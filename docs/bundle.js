/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={389:(e,t,n)=>{"use strict";var r;n.d(t,{J:()=>r}),function(e){e[e.STANDARD=16]="STANDARD",e[e.LARGE=20]="LARGE"}(r||(r={}))},162:function(e,t,n){var r,o;void 0===(o="function"==typeof(r=function(){"use strict";function t(e,t,n){var r=new XMLHttpRequest;r.open("GET",e),r.responseType="blob",r.onload=function(){l(r.response,t,n)},r.onerror=function(){console.error("could not download file")},r.send()}function r(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function o(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var a="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof n.g&&n.g.global===n.g?n.g:void 0,i=a.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),l=a.saveAs||("object"!=typeof window||window!==a?function(){}:"download"in HTMLAnchorElement.prototype&&!i?function(e,n,i){var l=a.URL||a.webkitURL,u=document.createElement("a");n=n||e.name||"download",u.download=n,u.rel="noopener","string"==typeof e?(u.href=e,u.origin===location.origin?o(u):r(u.href)?t(e,n,i):o(u,u.target="_blank")):(u.href=l.createObjectURL(e),setTimeout((function(){l.revokeObjectURL(u.href)}),4e4),setTimeout((function(){o(u)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,n,a){if(n=n||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(function(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(console.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}(e,a),n);else if(r(e))t(e,n,a);else{var i=document.createElement("a");i.href=e,i.target="_blank",setTimeout((function(){o(i)}))}}:function(e,n,r,o){if((o=o||open("","_blank"))&&(o.document.title=o.document.body.innerText="downloading..."),"string"==typeof e)return t(e,n,r);var l="application/octet-stream"===e.type,u=/constructor/i.test(a.HTMLElement)||a.safari,c=/CriOS\/[\d]+/.test(navigator.userAgent);if((c||l&&u||i)&&"undefined"!=typeof FileReader){var s=new FileReader;s.onloadend=function(){var e=s.result;e=c?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),o?o.location.href=e:location=e,o=null},s.readAsDataURL(e)}else{var f=a.URL||a.webkitURL,d=f.createObjectURL(e);o?o.location=d:location.href=d,o=null,setTimeout((function(){f.revokeObjectURL(d)}),4e4)}});a.saveAs=l.saveAs=l,e.exports=l})?r.apply(t,[]):r)||(e.exports=o)},695:(e,t,n)=>{var r;!function(){var o=i((function(e){return 1===e?"χρόνος":"χρόνια"}),(function(e){return 1===e?"μήνας":"μήνες"}),(function(e){return 1===e?"εβδομάδα":"εβδομάδες"}),(function(e){return 1===e?"μέρα":"μέρες"}),(function(e){return 1===e?"ώρα":"ώρες"}),(function(e){return 1===e?"λεπτό":"λεπτά"}),(function(e){return 1===e?"δευτερόλεπτο":"δευτερόλεπτα"}),(function(e){return(1===e?"χιλιοστό":"χιλιοστά")+" του δευτερολέπτου"}),","),a={af:i("jaar",(function(e){return"maand"+(1===e?"":"e")}),(function(e){return 1===e?"week":"weke"}),(function(e){return 1===e?"dag":"dae"}),(function(e){return 1===e?"uur":"ure"}),(function(e){return 1===e?"minuut":"minute"}),(function(e){return"sekonde"+(1===e?"":"s")}),(function(e){return"millisekonde"+(1===e?"":"s")}),","),ar:p(i((function(e){return["سنة","سنتان","سنوات"][l(e)]}),(function(e){return["شهر","شهران","أشهر"][l(e)]}),(function(e){return["أسبوع","أسبوعين","أسابيع"][l(e)]}),(function(e){return["يوم","يومين","أيام"][l(e)]}),(function(e){return["ساعة","ساعتين","ساعات"][l(e)]}),(function(e){return["دقيقة","دقيقتان","دقائق"][l(e)]}),(function(e){return["ثانية","ثانيتان","ثواني"][l(e)]}),(function(e){return["جزء من الثانية","جزآن من الثانية","أجزاء من الثانية"][l(e)]}),","),{delimiter:" ﻭ ",_digitReplacements:["۰","١","٢","٣","٤","٥","٦","٧","٨","٩"]}),bg:i((function(e){return["години","година","години"][c(e)]}),(function(e){return["месеца","месец","месеца"][c(e)]}),(function(e){return["седмици","седмица","седмици"][c(e)]}),(function(e){return["дни","ден","дни"][c(e)]}),(function(e){return["часа","час","часа"][c(e)]}),(function(e){return["минути","минута","минути"][c(e)]}),(function(e){return["секунди","секунда","секунди"][c(e)]}),(function(e){return["милисекунди","милисекунда","милисекунди"][c(e)]}),","),bn:i("বছর","মাস","সপ্তাহ","দিন","ঘন্টা","মিনিট","সেকেন্ড","মিলিসেকেন্ড"),ca:i((function(e){return"any"+(1===e?"":"s")}),(function(e){return"mes"+(1===e?"":"os")}),(function(e){return"setman"+(1===e?"a":"es")}),(function(e){return"di"+(1===e?"a":"es")}),(function(e){return"hor"+(1===e?"a":"es")}),(function(e){return"minut"+(1===e?"":"s")}),(function(e){return"segon"+(1===e?"":"s")}),(function(e){return"milisegon"+(1===e?"":"s")}),","),ckb:i("ساڵ","مانگ","هەفتە","ڕۆژ","کاژێر","خولەک","چرکە","میلی چرکە","."),cs:i((function(e){return["rok","roku","roky","let"][s(e)]}),(function(e){return["měsíc","měsíce","měsíce","měsíců"][s(e)]}),(function(e){return["týden","týdne","týdny","týdnů"][s(e)]}),(function(e){return["den","dne","dny","dní"][s(e)]}),(function(e){return["hodina","hodiny","hodiny","hodin"][s(e)]}),(function(e){return["minuta","minuty","minuty","minut"][s(e)]}),(function(e){return["sekunda","sekundy","sekundy","sekund"][s(e)]}),(function(e){return["milisekunda","milisekundy","milisekundy","milisekund"][s(e)]}),","),cy:i("flwyddyn","mis","wythnos","diwrnod","awr","munud","eiliad","milieiliad"),da:i("år",(function(e){return"måned"+(1===e?"":"er")}),(function(e){return"uge"+(1===e?"":"r")}),(function(e){return"dag"+(1===e?"":"e")}),(function(e){return"time"+(1===e?"":"r")}),(function(e){return"minut"+(1===e?"":"ter")}),(function(e){return"sekund"+(1===e?"":"er")}),(function(e){return"millisekund"+(1===e?"":"er")}),","),de:i((function(e){return"Jahr"+(1===e?"":"e")}),(function(e){return"Monat"+(1===e?"":"e")}),(function(e){return"Woche"+(1===e?"":"n")}),(function(e){return"Tag"+(1===e?"":"e")}),(function(e){return"Stunde"+(1===e?"":"n")}),(function(e){return"Minute"+(1===e?"":"n")}),(function(e){return"Sekunde"+(1===e?"":"n")}),(function(e){return"Millisekunde"+(1===e?"":"n")}),","),el:o,en:i((function(e){return"year"+(1===e?"":"s")}),(function(e){return"month"+(1===e?"":"s")}),(function(e){return"week"+(1===e?"":"s")}),(function(e){return"day"+(1===e?"":"s")}),(function(e){return"hour"+(1===e?"":"s")}),(function(e){return"minute"+(1===e?"":"s")}),(function(e){return"second"+(1===e?"":"s")}),(function(e){return"millisecond"+(1===e?"":"s")})),eo:i((function(e){return"jaro"+(1===e?"":"j")}),(function(e){return"monato"+(1===e?"":"j")}),(function(e){return"semajno"+(1===e?"":"j")}),(function(e){return"tago"+(1===e?"":"j")}),(function(e){return"horo"+(1===e?"":"j")}),(function(e){return"minuto"+(1===e?"":"j")}),(function(e){return"sekundo"+(1===e?"":"j")}),(function(e){return"milisekundo"+(1===e?"":"j")}),","),es:i((function(e){return"año"+(1===e?"":"s")}),(function(e){return"mes"+(1===e?"":"es")}),(function(e){return"semana"+(1===e?"":"s")}),(function(e){return"día"+(1===e?"":"s")}),(function(e){return"hora"+(1===e?"":"s")}),(function(e){return"minuto"+(1===e?"":"s")}),(function(e){return"segundo"+(1===e?"":"s")}),(function(e){return"milisegundo"+(1===e?"":"s")}),","),et:i((function(e){return"aasta"+(1===e?"":"t")}),(function(e){return"kuu"+(1===e?"":"d")}),(function(e){return"nädal"+(1===e?"":"at")}),(function(e){return"päev"+(1===e?"":"a")}),(function(e){return"tund"+(1===e?"":"i")}),(function(e){return"minut"+(1===e?"":"it")}),(function(e){return"sekund"+(1===e?"":"it")}),(function(e){return"millisekund"+(1===e?"":"it")}),","),eu:i("urte","hilabete","aste","egun","ordu","minutu","segundo","milisegundo",","),fa:i("سال","ماه","هفته","روز","ساعت","دقیقه","ثانیه","میلی ثانیه"),fi:i((function(e){return 1===e?"vuosi":"vuotta"}),(function(e){return 1===e?"kuukausi":"kuukautta"}),(function(e){return"viikko"+(1===e?"":"a")}),(function(e){return"päivä"+(1===e?"":"ä")}),(function(e){return"tunti"+(1===e?"":"a")}),(function(e){return"minuutti"+(1===e?"":"a")}),(function(e){return"sekunti"+(1===e?"":"a")}),(function(e){return"millisekunti"+(1===e?"":"a")}),","),fo:i("ár",(function(e){return 1===e?"mánaður":"mánaðir"}),(function(e){return 1===e?"vika":"vikur"}),(function(e){return 1===e?"dagur":"dagar"}),(function(e){return 1===e?"tími":"tímar"}),(function(e){return 1===e?"minuttur":"minuttir"}),"sekund","millisekund",","),fr:i((function(e){return"an"+(e>=2?"s":"")}),"mois",(function(e){return"semaine"+(e>=2?"s":"")}),(function(e){return"jour"+(e>=2?"s":"")}),(function(e){return"heure"+(e>=2?"s":"")}),(function(e){return"minute"+(e>=2?"s":"")}),(function(e){return"seconde"+(e>=2?"s":"")}),(function(e){return"milliseconde"+(e>=2?"s":"")}),","),gr:o,he:i((function(e){return 1===e?"שנה":"שנים"}),(function(e){return 1===e?"חודש":"חודשים"}),(function(e){return 1===e?"שבוע":"שבועות"}),(function(e){return 1===e?"יום":"ימים"}),(function(e){return 1===e?"שעה":"שעות"}),(function(e){return 1===e?"דקה":"דקות"}),(function(e){return 1===e?"שניה":"שניות"}),(function(e){return 1===e?"מילישנייה":"מילישניות"})),hr:i((function(e){return e%10==2||e%10==3||e%10==4?"godine":"godina"}),(function(e){return 1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci"}),(function(e){return e%10==1&&11!==e?"tjedan":"tjedna"}),(function(e){return 1===e?"dan":"dana"}),(function(e){return 1===e?"sat":2===e||3===e||4===e?"sata":"sati"}),(function(e){var t=e%10;return 2!==t&&3!==t&&4!==t||!(e<10||e>14)?"minuta":"minute"}),(function(e){var t=e%10;return 5===t||Math.floor(e)===e&&e>=10&&e<=19?"sekundi":1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi"}),(function(e){return 1===e?"milisekunda":e%10==2||e%10==3||e%10==4?"milisekunde":"milisekundi"}),","),hi:i("साल",(function(e){return 1===e?"महीना":"महीने"}),(function(e){return 1===e?"हफ़्ता":"हफ्ते"}),"दिन",(function(e){return 1===e?"घंटा":"घंटे"}),"मिनट","सेकंड","मिलीसेकंड"),hu:i("év","hónap","hét","nap","óra","perc","másodperc","ezredmásodperc",","),id:i("tahun","bulan","minggu","hari","jam","menit","detik","milidetik"),is:i("ár",(function(e){return"mánuð"+(1===e?"ur":"ir")}),(function(e){return"vik"+(1===e?"a":"ur")}),(function(e){return"dag"+(1===e?"ur":"ar")}),(function(e){return"klukkutím"+(1===e?"i":"ar")}),(function(e){return"mínút"+(1===e?"a":"ur")}),(function(e){return"sekúnd"+(1===e?"a":"ur")}),(function(e){return"millisekúnd"+(1===e?"a":"ur")})),it:i((function(e){return"ann"+(1===e?"o":"i")}),(function(e){return"mes"+(1===e?"e":"i")}),(function(e){return"settiman"+(1===e?"a":"e")}),(function(e){return"giorn"+(1===e?"o":"i")}),(function(e){return"or"+(1===e?"a":"e")}),(function(e){return"minut"+(1===e?"o":"i")}),(function(e){return"second"+(1===e?"o":"i")}),(function(e){return"millisecond"+(1===e?"o":"i")}),","),ja:i("年","ヶ月","週","日","時間","分","秒","ミリ秒"),km:i("ឆ្នាំ","ខែ","សប្តាហ៍","ថ្ងៃ","ម៉ោង","នាទី","វិនាទី","មិល្លីវិនាទី"),kn:i((function(e){return 1===e?"ವರ್ಷ":"ವರ್ಷಗಳು"}),(function(e){return 1===e?"ತಿಂಗಳು":"ತಿಂಗಳುಗಳು"}),(function(e){return 1===e?"ವಾರ":"ವಾರಗಳು"}),(function(e){return 1===e?"ದಿನ":"ದಿನಗಳು"}),(function(e){return 1===e?"ಗಂಟೆ":"ಗಂಟೆಗಳು"}),(function(e){return 1===e?"ನಿಮಿಷ":"ನಿಮಿಷಗಳು"}),(function(e){return 1===e?"ಸೆಕೆಂಡ್":"ಸೆಕೆಂಡುಗಳು"}),(function(e){return 1===e?"ಮಿಲಿಸೆಕೆಂಡ್":"ಮಿಲಿಸೆಕೆಂಡುಗಳು"})),ko:i("년","개월","주일","일","시간","분","초","밀리 초"),ku:i("sal","meh","hefte","roj","seet","deqe","saniye","mîlîçirk",","),lo:i("ປີ","ເດືອນ","ອາທິດ","ມື້","ຊົ່ວໂມງ","ນາທີ","ວິນາທີ","ມິນລິວິນາທີ",","),lt:i((function(e){return e%10==0||e%100>=10&&e%100<=20?"metų":"metai"}),(function(e){return["mėnuo","mėnesiai","mėnesių"][f(e)]}),(function(e){return["savaitė","savaitės","savaičių"][f(e)]}),(function(e){return["diena","dienos","dienų"][f(e)]}),(function(e){return["valanda","valandos","valandų"][f(e)]}),(function(e){return["minutė","minutės","minučių"][f(e)]}),(function(e){return["sekundė","sekundės","sekundžių"][f(e)]}),(function(e){return["milisekundė","milisekundės","milisekundžių"][f(e)]}),","),lv:i((function(e){return d(e)?"gads":"gadi"}),(function(e){return d(e)?"mēnesis":"mēneši"}),(function(e){return d(e)?"nedēļa":"nedēļas"}),(function(e){return d(e)?"diena":"dienas"}),(function(e){return d(e)?"stunda":"stundas"}),(function(e){return d(e)?"minūte":"minūtes"}),(function(e){return d(e)?"sekunde":"sekundes"}),(function(e){return d(e)?"milisekunde":"milisekundes"}),","),mk:i((function(e){return 1===e?"година":"години"}),(function(e){return 1===e?"месец":"месеци"}),(function(e){return 1===e?"недела":"недели"}),(function(e){return 1===e?"ден":"дена"}),(function(e){return 1===e?"час":"часа"}),(function(e){return 1===e?"минута":"минути"}),(function(e){return 1===e?"секунда":"секунди"}),(function(e){return 1===e?"милисекунда":"милисекунди"}),","),mn:i("жил","сар","долоо хоног","өдөр","цаг","минут","секунд","миллисекунд"),mr:i((function(e){return 1===e?"वर्ष":"वर्षे"}),(function(e){return 1===e?"महिना":"महिने"}),(function(e){return 1===e?"आठवडा":"आठवडे"}),"दिवस","तास",(function(e){return 1===e?"मिनिट":"मिनिटे"}),"सेकंद","मिलिसेकंद"),ms:i("tahun","bulan","minggu","hari","jam","minit","saat","milisaat"),nl:i("jaar",(function(e){return 1===e?"maand":"maanden"}),(function(e){return 1===e?"week":"weken"}),(function(e){return 1===e?"dag":"dagen"}),"uur",(function(e){return 1===e?"minuut":"minuten"}),(function(e){return 1===e?"seconde":"seconden"}),(function(e){return 1===e?"milliseconde":"milliseconden"}),","),no:i("år",(function(e){return"måned"+(1===e?"":"er")}),(function(e){return"uke"+(1===e?"":"r")}),(function(e){return"dag"+(1===e?"":"er")}),(function(e){return"time"+(1===e?"":"r")}),(function(e){return"minutt"+(1===e?"":"er")}),(function(e){return"sekund"+(1===e?"":"er")}),(function(e){return"millisekund"+(1===e?"":"er")}),","),pl:i((function(e){return["rok","roku","lata","lat"][u(e)]}),(function(e){return["miesiąc","miesiąca","miesiące","miesięcy"][u(e)]}),(function(e){return["tydzień","tygodnia","tygodnie","tygodni"][u(e)]}),(function(e){return["dzień","dnia","dni","dni"][u(e)]}),(function(e){return["godzina","godziny","godziny","godzin"][u(e)]}),(function(e){return["minuta","minuty","minuty","minut"][u(e)]}),(function(e){return["sekunda","sekundy","sekundy","sekund"][u(e)]}),(function(e){return["milisekunda","milisekundy","milisekundy","milisekund"][u(e)]}),","),pt:i((function(e){return"ano"+(1===e?"":"s")}),(function(e){return 1===e?"mês":"meses"}),(function(e){return"semana"+(1===e?"":"s")}),(function(e){return"dia"+(1===e?"":"s")}),(function(e){return"hora"+(1===e?"":"s")}),(function(e){return"minuto"+(1===e?"":"s")}),(function(e){return"segundo"+(1===e?"":"s")}),(function(e){return"milissegundo"+(1===e?"":"s")}),","),ro:i((function(e){return 1===e?"an":"ani"}),(function(e){return 1===e?"lună":"luni"}),(function(e){return 1===e?"săptămână":"săptămâni"}),(function(e){return 1===e?"zi":"zile"}),(function(e){return 1===e?"oră":"ore"}),(function(e){return 1===e?"minut":"minute"}),(function(e){return 1===e?"secundă":"secunde"}),(function(e){return 1===e?"milisecundă":"milisecunde"}),","),ru:i((function(e){return["лет","год","года"][c(e)]}),(function(e){return["месяцев","месяц","месяца"][c(e)]}),(function(e){return["недель","неделя","недели"][c(e)]}),(function(e){return["дней","день","дня"][c(e)]}),(function(e){return["часов","час","часа"][c(e)]}),(function(e){return["минут","минута","минуты"][c(e)]}),(function(e){return["секунд","секунда","секунды"][c(e)]}),(function(e){return["миллисекунд","миллисекунда","миллисекунды"][c(e)]}),","),sq:i((function(e){return 1===e?"vit":"vjet"}),"muaj","javë","ditë","orë",(function(e){return"minut"+(1===e?"ë":"a")}),(function(e){return"sekond"+(1===e?"ë":"a")}),(function(e){return"milisekond"+(1===e?"ë":"a")}),","),sr:i((function(e){return["години","година","године"][c(e)]}),(function(e){return["месеци","месец","месеца"][c(e)]}),(function(e){return["недељи","недеља","недеље"][c(e)]}),(function(e){return["дани","дан","дана"][c(e)]}),(function(e){return["сати","сат","сата"][c(e)]}),(function(e){return["минута","минут","минута"][c(e)]}),(function(e){return["секунди","секунда","секунде"][c(e)]}),(function(e){return["милисекунди","милисекунда","милисекунде"][c(e)]}),","),ta:i((function(e){return 1===e?"வருடம்":"ஆண்டுகள்"}),(function(e){return 1===e?"மாதம்":"மாதங்கள்"}),(function(e){return 1===e?"வாரம்":"வாரங்கள்"}),(function(e){return 1===e?"நாள்":"நாட்கள்"}),(function(e){return 1===e?"மணி":"மணிநேரம்"}),(function(e){return"நிமிட"+(1===e?"ம்":"ங்கள்")}),(function(e){return"வினாடி"+(1===e?"":"கள்")}),(function(e){return"மில்லி விநாடி"+(1===e?"":"கள்")})),te:i((function(e){return"సంవత్స"+(1===e?"రం":"రాల")}),(function(e){return"నెల"+(1===e?"":"ల")}),(function(e){return 1===e?"వారం":"వారాలు"}),(function(e){return"రోజు"+(1===e?"":"లు")}),(function(e){return"గంట"+(1===e?"":"లు")}),(function(e){return 1===e?"నిమిషం":"నిమిషాలు"}),(function(e){return 1===e?"సెకను":"సెకన్లు"}),(function(e){return 1===e?"మిల్లీసెకన్":"మిల్లీసెకన్లు"})),uk:i((function(e){return["років","рік","роки"][c(e)]}),(function(e){return["місяців","місяць","місяці"][c(e)]}),(function(e){return["тижнів","тиждень","тижні"][c(e)]}),(function(e){return["днів","день","дні"][c(e)]}),(function(e){return["годин","година","години"][c(e)]}),(function(e){return["хвилин","хвилина","хвилини"][c(e)]}),(function(e){return["секунд","секунда","секунди"][c(e)]}),(function(e){return["мілісекунд","мілісекунда","мілісекунди"][c(e)]}),","),ur:i("سال",(function(e){return 1===e?"مہینہ":"مہینے"}),(function(e){return 1===e?"ہفتہ":"ہفتے"}),"دن",(function(e){return 1===e?"گھنٹہ":"گھنٹے"}),"منٹ","سیکنڈ","ملی سیکنڈ"),sk:i((function(e){return["rok","roky","roky","rokov"][s(e)]}),(function(e){return["mesiac","mesiace","mesiace","mesiacov"][s(e)]}),(function(e){return["týždeň","týždne","týždne","týždňov"][s(e)]}),(function(e){return["deň","dni","dni","dní"][s(e)]}),(function(e){return["hodina","hodiny","hodiny","hodín"][s(e)]}),(function(e){return["minúta","minúty","minúty","minút"][s(e)]}),(function(e){return["sekunda","sekundy","sekundy","sekúnd"][s(e)]}),(function(e){return["milisekunda","milisekundy","milisekundy","milisekúnd"][s(e)]}),","),sl:i((function(e){return e%10==1?"leto":e%100==2?"leti":e%100==3||e%100==4||Math.floor(e)!==e&&e%100<=5?"leta":"let"}),(function(e){return e%10==1?"mesec":e%100==2||Math.floor(e)!==e&&e%100<=5?"meseca":e%10==3||e%10==4?"mesece":"mesecev"}),(function(e){return e%10==1?"teden":e%10==2||Math.floor(e)!==e&&e%100<=4?"tedna":e%10==3||e%10==4?"tedne":"tednov"}),(function(e){return e%100==1?"dan":"dni"}),(function(e){return e%10==1?"ura":e%100==2?"uri":e%10==3||e%10==4||Math.floor(e)!==e?"ure":"ur"}),(function(e){return e%10==1?"minuta":e%10==2?"minuti":e%10==3||e%10==4||Math.floor(e)!==e&&e%100<=4?"minute":"minut"}),(function(e){return e%10==1?"sekunda":e%100==2?"sekundi":e%100==3||e%100==4||Math.floor(e)!==e?"sekunde":"sekund"}),(function(e){return e%10==1?"milisekunda":e%100==2?"milisekundi":e%100==3||e%100==4||Math.floor(e)!==e?"milisekunde":"milisekund"}),","),sv:i("år",(function(e){return"månad"+(1===e?"":"er")}),(function(e){return"veck"+(1===e?"a":"or")}),(function(e){return"dag"+(1===e?"":"ar")}),(function(e){return"timm"+(1===e?"e":"ar")}),(function(e){return"minut"+(1===e?"":"er")}),(function(e){return"sekund"+(1===e?"":"er")}),(function(e){return"millisekund"+(1===e?"":"er")}),","),sw:p(i((function(e){return 1===e?"mwaka":"miaka"}),(function(e){return 1===e?"mwezi":"miezi"}),"wiki",(function(e){return 1===e?"siku":"masiku"}),(function(e){return 1===e?"saa":"masaa"}),"dakika","sekunde","milisekunde"),{_numberFirst:!0}),tr:i("yıl","ay","hafta","gün","saat","dakika","saniye","milisaniye",","),th:i("ปี","เดือน","สัปดาห์","วัน","ชั่วโมง","นาที","วินาที","มิลลิวินาที"),uz:i("yil","oy","hafta","kun","soat","minut","sekund","millisekund"),uz_CYR:i("йил","ой","ҳафта","кун","соат","минут","секунд","миллисекунд"),vi:i("năm","tháng","tuần","ngày","giờ","phút","giây","mili giây",","),zh_CN:i("年","个月","周","天","小时","分钟","秒","毫秒"),zh_TW:i("年","個月","周","天","小時","分鐘","秒","毫秒")};function i(e,t,n,r,o,a,i,l,u){var c={y:e,mo:t,w:n,d:r,h:o,m:a,s:i,ms:l};return void 0!==u&&(c.decimal=u),c}function l(e){return 2===e?1:e>2&&e<11?2:0}function u(e){return 1===e?0:Math.floor(e)!==e?1:e%10>=2&&e%10<=4&&!(e%100>10&&e%100<20)?2:3}function c(e){return Math.floor(e)!==e?2:e%100>=5&&e%100<=20||e%10>=5&&e%10<=9||e%10==0?0:e%10==1?1:e>1?2:0}function s(e){return 1===e?0:Math.floor(e)!==e?1:e%10>=2&&e%10<=4&&e%100<10?2:3}function f(e){return 1===e||e%10==1&&e%100>20?0:Math.floor(e)!==e||e%10>=2&&e%100>20||e%10>=2&&e%100<10?1:2}function d(e){return e%10==1&&e%100!=11}function p(e){for(var t,n=1;n<arguments.length;n++)for(var r in t=arguments[n])m(t,r)&&(e[r]=t[r]);return e}var h=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function m(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function v(e,t,n){var r,o,a,i=e.unitName,l=e.unitCount,u=n.spacer,c=n.maxDecimalPoints;r=m(n,"decimal")?n.decimal:m(t,"decimal")?t.decimal:".","digitReplacements"in n?o=n.digitReplacements:"_digitReplacements"in t&&(o=t._digitReplacements);var s=(void 0===c?l:Math.floor(l*Math.pow(10,c))/Math.pow(10,c)).toString();if(o){a="";for(var f=0;f<s.length;f++){var d=s[f];a+="."===d?r:o[d]}}else a=s.replace(".",r);var p,h=t[i];return p="function"==typeof h?h(l):h,t._numberFirst?p+u+a:a+u+p}function g(e){var t=function(e,n){e=Math.abs(e);var r=p({},t,n||{}),o=function(e,t){var n,r,o,a,i=t.units,l=t.unitMeasures,u="largest"in t?t.largest:1/0;if(!i.length)return[];var c={};for(a=e,r=0;r<i.length;r++){var s=l[n=i[r]];o=r===i.length-1?a/s:Math.floor(a/s),c[n]=o,a-=o*s}if(t.round){var f=u;for(r=0;r<i.length;r++)if(0!==(o=c[n=i[r]])&&0==--f){for(var d=r+1;d<i.length;d++){var p=i[d],h=c[p];c[n]+=h*l[p]/l[n],c[p]=0}break}for(r=i.length-1;r>=0;r--)if(0!==(o=c[n=i[r]])){var m=Math.round(o);if(c[n]=m,0===r)break;var v=i[r-1],g=l[v],y=Math.floor(m*l[n]/g);if(!y)break;c[v]+=y,c[n]=0}}var b=[];for(r=0;r<i.length&&b.length<u;r++)(o=c[n=i[r]])&&b.push({unitName:n,unitCount:o});return b}(e,r);return function(e,t){var n=function(e){var t=[e.language];if(m(e,"fallbacks")){if(!h(e.fallbacks)||!e.fallbacks.length)throw new Error("fallbacks must be an array with at least one element");t=t.concat(e.fallbacks)}for(var n=0;n<t.length;n++){var r=t[n];if(m(e.languages,r))return e.languages[r];if(m(a,r))return a[r]}throw new Error("No language found.")}(t);if(!e.length){var r=t.units;return v({unitName:r[r.length-1],unitCount:0},n,t)}var o,i=t.conjunction,l=t.serialComma;o=m(t,"delimiter")?t.delimiter:m(n,"delimiter")?n.delimiter:", ";for(var u=[],c=0;c<e.length;c++)u.push(v(e[c],n,t));return i&&1!==e.length?2===e.length?u.join(i):u.slice(0,-1).join(o)+(l?",":"")+i+u.slice(-1):u.join(o)}(o,r)};return p(t,{language:"en",spacer:" ",conjunction:"",serialComma:!0,units:["y","mo","w","d","h","m","s"],languages:{},round:!1,unitMeasures:{y:315576e5,mo:26298e5,w:6048e5,d:864e5,h:36e5,m:6e4,s:1e3,ms:1}},e)}var y=g({});y.getSupportedLanguages=function(){var e=[];for(var t in a)m(a,t)&&"gr"!==t&&e.push(t);return e},y.humanizer=g,void 0===(r=function(){return y}.call(t,n,t,e))||(e.exports=r)}()},483:(e,t,n)=>{e.exports=function e(t,n,r){function o(i,l){if(!n[i]){if(!t[i]){if(a)return a(i,!0);var u=new Error("Cannot find module '"+i+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[i]={exports:{}};t[i][0].call(c.exports,(function(e){return o(t[i][1][e]||e)}),c,c.exports,e,t,n,r)}return n[i].exports}for(var a=void 0,i=0;i<r.length;i++)o(r[i]);return o}({1:[function(e,t,r){(function(e){"use strict";var n,r,o=e.MutationObserver||e.WebKitMutationObserver;if(o){var a=0,i=new o(s),l=e.document.createTextNode("");i.observe(l,{characterData:!0}),n=function(){l.data=a=++a%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){s(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(s,0)};else{var u=new e.MessageChannel;u.port1.onmessage=s,n=function(){u.port2.postMessage(0)}}var c=[];function s(){var e,t;r=!0;for(var n=c.length;n;){for(t=c,c=[],e=-1;++e<n;)t[e]();n=c.length}r=!1}t.exports=function(e){1!==c.push(e)||r||n()}}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],2:[function(e,t,n){"use strict";var r=e(1);function o(){}var a={},i=["REJECTED"],l=["FULFILLED"],u=["PENDING"];function c(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=u,this.queue=[],this.outcome=void 0,e!==o&&p(this,e)}function s(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function f(e,t,n){r((function(){var r;try{r=t(n)}catch(t){return a.reject(e,t)}r===e?a.reject(e,new TypeError("Cannot resolve promise with itself")):a.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function p(e,t){var n=!1;function r(t){n||(n=!0,a.reject(e,t))}function o(t){n||(n=!0,a.resolve(e,t))}var i=h((function(){t(o,r)}));"error"===i.status&&r(i.value)}function h(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}t.exports=c,c.prototype.catch=function(e){return this.then(null,e)},c.prototype.then=function(e,t){if("function"!=typeof e&&this.state===l||"function"!=typeof t&&this.state===i)return this;var n=new this.constructor(o);return this.state!==u?f(n,this.state===l?e:t,this.outcome):this.queue.push(new s(n,e,t)),n},s.prototype.callFulfilled=function(e){a.resolve(this.promise,e)},s.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},s.prototype.callRejected=function(e){a.reject(this.promise,e)},s.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},a.resolve=function(e,t){var n=h(d,t);if("error"===n.status)return a.reject(e,n.value);var r=n.value;if(r)p(e,r);else{e.state=l,e.outcome=t;for(var o=-1,i=e.queue.length;++o<i;)e.queue[o].callFulfilled(t)}return e},a.reject=function(e,t){e.state=i,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},c.resolve=function(e){return e instanceof this?e:a.resolve(new this(o),e)},c.reject=function(e){var t=new this(o);return a.reject(t,e)},c.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var i=new Array(n),l=0,u=-1,c=new this(o);++u<n;)s(e[u],u);return c;function s(e,o){t.resolve(e).then((function(e){i[o]=e,++l!==n||r||(r=!0,a.resolve(c,i))}),(function(e){r||(r=!0,a.reject(c,e))}))}},c.race=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n,r=e.length,i=!1;if(!r)return this.resolve([]);for(var l=-1,u=new this(o);++l<r;)n=e[l],t.resolve(n).then((function(e){i||(i=!0,a.resolve(u,e))}),(function(e){i||(i=!0,a.reject(u,e))}));return u}},{1:1}],3:[function(e,t,r){(function(t){"use strict";"function"!=typeof t.Promise&&(t.Promise=e(2))}).call(this,void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{2:2}],4:[function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var o=function(){try{if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof webkitIndexedDB)return webkitIndexedDB;if("undefined"!=typeof mozIndexedDB)return mozIndexedDB;if("undefined"!=typeof OIndexedDB)return OIndexedDB;if("undefined"!=typeof msIndexedDB)return msIndexedDB}catch(e){return}}();function a(e,t){e=e||[],t=t||{};try{return new Blob(e,t)}catch(o){if("TypeError"!==o.name)throw o;for(var n=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),r=0;r<e.length;r+=1)n.append(e[r]);return n.getBlob(t.type)}}"undefined"==typeof Promise&&e(3);var i=Promise;function l(e,t){t&&e.then((function(e){t(null,e)}),(function(e){t(e)}))}function u(e,t,n){"function"==typeof t&&e.then(t),"function"==typeof n&&e.catch(n)}function c(e){return"string"!=typeof e&&(console.warn(e+" used as a key, but it is not a string."),e=String(e)),e}function s(){if(arguments.length&&"function"==typeof arguments[arguments.length-1])return arguments[arguments.length-1]}var f="local-forage-detect-blob-support",d=void 0,p={},h=Object.prototype.toString,m="readonly",v="readwrite";function g(e){for(var t=e.length,n=new ArrayBuffer(t),r=new Uint8Array(n),o=0;o<t;o++)r[o]=e.charCodeAt(o);return n}function y(e){return"boolean"==typeof d?i.resolve(d):function(e){return new i((function(t){var n=e.transaction(f,v),r=a([""]);n.objectStore(f).put(r,"key"),n.onabort=function(e){e.preventDefault(),e.stopPropagation(),t(!1)},n.oncomplete=function(){var e=navigator.userAgent.match(/Chrome\/(\d+)/),n=navigator.userAgent.match(/Edge\//);t(n||!e||parseInt(e[1],10)>=43)}})).catch((function(){return!1}))}(e).then((function(e){return d=e}))}function b(e){var t=p[e.name],n={};n.promise=new i((function(e,t){n.resolve=e,n.reject=t})),t.deferredOperations.push(n),t.dbReady?t.dbReady=t.dbReady.then((function(){return n.promise})):t.dbReady=n.promise}function w(e){var t=p[e.name].deferredOperations.pop();if(t)return t.resolve(),t.promise}function S(e,t){var n=p[e.name].deferredOperations.pop();if(n)return n.reject(t),n.promise}function E(e,t){return new i((function(n,r){if(p[e.name]=p[e.name]||{forages:[],db:null,dbReady:null,deferredOperations:[]},e.db){if(!t)return n(e.db);b(e),e.db.close()}var a=[e.name];t&&a.push(e.version);var i=o.open.apply(o,a);t&&(i.onupgradeneeded=function(t){var n=i.result;try{n.createObjectStore(e.storeName),t.oldVersion<=1&&n.createObjectStore(f)}catch(n){if("ConstraintError"!==n.name)throw n;console.warn('The database "'+e.name+'" has been upgraded from version '+t.oldVersion+" to version "+t.newVersion+', but the storage "'+e.storeName+'" already exists.')}}),i.onerror=function(e){e.preventDefault(),r(i.error)},i.onsuccess=function(){var t=i.result;t.onversionchange=function(e){e.target.close()},n(t),w(e)}}))}function k(e){return E(e,!1)}function C(e){return E(e,!0)}function x(e,t){if(!e.db)return!0;var n=!e.db.objectStoreNames.contains(e.storeName),r=e.version<e.db.version,o=e.version>e.db.version;if(r&&(e.version!==t&&console.warn('The database "'+e.name+"\" can't be downgraded from version "+e.db.version+" to version "+e.version+"."),e.version=e.db.version),o||n){if(n){var a=e.db.version+1;a>e.version&&(e.version=a)}return!0}return!1}function N(e){return a([g(atob(e.data))],{type:e.type})}function L(e){return e&&e.__local_forage_encoded_blob}function T(e){var t=this,n=t._initReady().then((function(){var e=p[t._dbInfo.name];if(e&&e.dbReady)return e.dbReady}));return u(n,e,e),n}function R(e,t,n,r){void 0===r&&(r=1);try{var o=e.db.transaction(e.storeName,t);n(null,o)}catch(o){if(r>0&&(!e.db||"InvalidStateError"===o.name||"NotFoundError"===o.name))return i.resolve().then((function(){if(!e.db||"NotFoundError"===o.name&&!e.db.objectStoreNames.contains(e.storeName)&&e.version<=e.db.version)return e.db&&(e.version=e.db.version+1),C(e)})).then((function(){return function(e){b(e);for(var t=p[e.name],n=t.forages,r=0;r<n.length;r++){var o=n[r];o._dbInfo.db&&(o._dbInfo.db.close(),o._dbInfo.db=null)}return e.db=null,k(e).then((function(t){return e.db=t,x(e)?C(e):t})).then((function(r){e.db=t.db=r;for(var o=0;o<n.length;o++)n[o]._dbInfo.db=r})).catch((function(t){throw S(e,t),t}))}(e).then((function(){R(e,t,n,r-1)}))})).catch(n);n(o)}}var _={_driver:"asyncStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]=e[r];var o=p[n.name];o||(o={forages:[],db:null,dbReady:null,deferredOperations:[]},p[n.name]=o),o.forages.push(t),t._initReady||(t._initReady=t.ready,t.ready=T);var a=[];function l(){return i.resolve()}for(var u=0;u<o.forages.length;u++){var c=o.forages[u];c!==t&&a.push(c._initReady().catch(l))}var s=o.forages.slice(0);return i.all(a).then((function(){return n.db=o.db,k(n)})).then((function(e){return n.db=e,x(n,t._defaultConfig.version)?C(n):e})).then((function(e){n.db=o.db=e,t._dbInfo=n;for(var r=0;r<s.length;r++){var a=s[r];a!==t&&(a._dbInfo.db=n.db,a._dbInfo.version=n.version)}}))},_support:function(){try{if(!o||!o.open)return!1;var e="undefined"!=typeof openDatabase&&/(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent)&&!/Chrome/.test(navigator.userAgent)&&!/BlackBerry/.test(navigator.platform),t="function"==typeof fetch&&-1!==fetch.toString().indexOf("[native code");return(!e||t)&&"undefined"!=typeof indexedDB&&"undefined"!=typeof IDBKeyRange}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){R(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).openCursor(),l=1;i.onsuccess=function(){var n=i.result;if(n){var r=n.value;L(r)&&(r=N(r));var o=e(r,n.key,l++);void 0!==o?t(o):n.continue()}else t()},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},getItem:function(e,t){var n=this;e=c(e);var r=new i((function(t,r){n.ready().then((function(){R(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).get(e);i.onsuccess=function(){var e=i.result;void 0===e&&(e=null),L(e)&&(e=N(e)),t(e)},i.onerror=function(){r(i.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},setItem:function(e,t,n){var r=this;e=c(e);var o=new i((function(n,o){var a;r.ready().then((function(){return a=r._dbInfo,"[object Blob]"===h.call(t)?y(a.db).then((function(e){return e?t:(n=t,new i((function(e,t){var r=new FileReader;r.onerror=t,r.onloadend=function(t){var r=btoa(t.target.result||"");e({__local_forage_encoded_blob:!0,data:r,type:n.type})},r.readAsBinaryString(n)})));var n})):t})).then((function(t){R(r._dbInfo,v,(function(a,i){if(a)return o(a);try{var l=i.objectStore(r._dbInfo.storeName);null===t&&(t=void 0);var u=l.put(t,e);i.oncomplete=function(){void 0===t&&(t=null),n(t)},i.onabort=i.onerror=function(){var e=u.error?u.error:u.transaction.error;o(e)}}catch(e){o(e)}}))})).catch(o)}));return l(o,n),o},removeItem:function(e,t){var n=this;e=c(e);var r=new i((function(t,r){n.ready().then((function(){R(n._dbInfo,v,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName).delete(e);a.oncomplete=function(){t()},a.onerror=function(){r(i.error)},a.onabort=function(){var e=i.error?i.error:i.transaction.error;r(e)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},clear:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){R(t._dbInfo,v,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).clear();o.oncomplete=function(){e()},o.onabort=o.onerror=function(){var e=a.error?a.error:a.transaction.error;n(e)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},length:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){R(t._dbInfo,m,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).count();a.onsuccess=function(){e(a.result)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},key:function(e,t){var n=this,r=new i((function(t,r){e<0?t(null):n.ready().then((function(){R(n._dbInfo,m,(function(o,a){if(o)return r(o);try{var i=a.objectStore(n._dbInfo.storeName),l=!1,u=i.openKeyCursor();u.onsuccess=function(){var n=u.result;n?0===e||l?t(n.key):(l=!0,n.advance(e)):t(null)},u.onerror=function(){r(u.error)}}catch(e){r(e)}}))})).catch(r)}));return l(r,t),r},keys:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){R(t._dbInfo,m,(function(r,o){if(r)return n(r);try{var a=o.objectStore(t._dbInfo.storeName).openKeyCursor(),i=[];a.onsuccess=function(){var t=a.result;t?(i.push(t.key),t.continue()):e(i)},a.onerror=function(){n(a.error)}}catch(e){n(e)}}))})).catch(n)}));return l(n,e),n},dropInstance:function(e,t){t=s.apply(this,arguments);var n,r=this.config();if((e="function"!=typeof e&&e||{}).name||(e.name=e.name||r.name,e.storeName=e.storeName||r.storeName),e.name){var a=e.name===r.name&&this._dbInfo.db?i.resolve(this._dbInfo.db):k(e).then((function(t){var n=p[e.name],r=n.forages;n.db=t;for(var o=0;o<r.length;o++)r[o]._dbInfo.db=t;return t}));n=e.storeName?a.then((function(t){if(t.objectStoreNames.contains(e.storeName)){var n=t.version+1;b(e);var r=p[e.name],a=r.forages;t.close();for(var l=0;l<a.length;l++){var u=a[l];u._dbInfo.db=null,u._dbInfo.version=n}var c=new i((function(t,r){var a=o.open(e.name,n);a.onerror=function(e){a.result.close(),r(e)},a.onupgradeneeded=function(){a.result.deleteObjectStore(e.storeName)},a.onsuccess=function(){var e=a.result;e.close(),t(e)}}));return c.then((function(e){r.db=e;for(var t=0;t<a.length;t++){var n=a[t];n._dbInfo.db=e,w(n._dbInfo)}})).catch((function(t){throw(S(e,t)||i.resolve()).catch((function(){})),t}))}})):a.then((function(t){b(e);var n=p[e.name],r=n.forages;t.close();for(var a=0;a<r.length;a++)r[a]._dbInfo.db=null;var l=new i((function(t,n){var r=o.deleteDatabase(e.name);r.onerror=function(){var e=r.result;e&&e.close(),n(r.error)},r.onblocked=function(){console.warn('dropInstance blocked for database "'+e.name+'" until all open connections are closed')},r.onsuccess=function(){var e=r.result;e&&e.close(),t(e)}}));return l.then((function(e){n.db=e;for(var t=0;t<r.length;t++)w(r[t]._dbInfo)})).catch((function(t){throw(S(e,t)||i.resolve()).catch((function(){})),t}))}))}else n=i.reject("Invalid arguments");return l(n,t),n}};var P="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",A=/^~~local_forage_type~([^~]+)~/,I="__lfsc__:",D="arbf",O="blob",z="si08",F="ui08",M="uic8",j="si16",B="si32",U="ur16",V="ui32",H="fl32",G="fl64",W=Object.prototype.toString;function J(e){var t,n,r,o,a,i=.75*e.length,l=e.length,u=0;"="===e[e.length-1]&&(i--,"="===e[e.length-2]&&i--);var c=new ArrayBuffer(i),s=new Uint8Array(c);for(t=0;t<l;t+=4)n=P.indexOf(e[t]),r=P.indexOf(e[t+1]),o=P.indexOf(e[t+2]),a=P.indexOf(e[t+3]),s[u++]=n<<2|r>>4,s[u++]=(15&r)<<4|o>>2,s[u++]=(3&o)<<6|63&a;return c}function K(e){var t,n=new Uint8Array(e),r="";for(t=0;t<n.length;t+=3)r+=P[n[t]>>2],r+=P[(3&n[t])<<4|n[t+1]>>4],r+=P[(15&n[t+1])<<2|n[t+2]>>6],r+=P[63&n[t+2]];return n.length%3==2?r=r.substring(0,r.length-1)+"=":n.length%3==1&&(r=r.substring(0,r.length-2)+"=="),r}var q={serialize:function(e,t){var n="";if(e&&(n=W.call(e)),e&&("[object ArrayBuffer]"===n||e.buffer&&"[object ArrayBuffer]"===W.call(e.buffer))){var r,o=I;e instanceof ArrayBuffer?(r=e,o+=D):(r=e.buffer,"[object Int8Array]"===n?o+=z:"[object Uint8Array]"===n?o+=F:"[object Uint8ClampedArray]"===n?o+=M:"[object Int16Array]"===n?o+=j:"[object Uint16Array]"===n?o+=U:"[object Int32Array]"===n?o+=B:"[object Uint32Array]"===n?o+=V:"[object Float32Array]"===n?o+=H:"[object Float64Array]"===n?o+=G:t(new Error("Failed to get type for BinaryArray"))),t(o+K(r))}else if("[object Blob]"===n){var a=new FileReader;a.onload=function(){var n="~~local_forage_type~"+e.type+"~"+K(this.result);t(I+O+n)},a.readAsArrayBuffer(e)}else try{t(JSON.stringify(e))}catch(n){console.error("Couldn't convert value into a JSON string: ",e),t(null,n)}},deserialize:function(e){if(e.substring(0,9)!==I)return JSON.parse(e);var t,n=e.substring(13),r=e.substring(9,13);if(r===O&&A.test(n)){var o=n.match(A);t=o[1],n=n.substring(o[0].length)}var i=J(n);switch(r){case D:return i;case O:return a([i],{type:t});case z:return new Int8Array(i);case F:return new Uint8Array(i);case M:return new Uint8ClampedArray(i);case j:return new Int16Array(i);case U:return new Uint16Array(i);case B:return new Int32Array(i);case V:return new Uint32Array(i);case H:return new Float32Array(i);case G:return new Float64Array(i);default:throw new Error("Unkown type: "+r)}},stringToBuffer:J,bufferToString:K};function $(e,t,n,r){e.executeSql("CREATE TABLE IF NOT EXISTS "+t.storeName+" (id INTEGER PRIMARY KEY, key unique, value)",[],n,r)}function Q(e,t,n,r,o,a){e.executeSql(n,r,o,(function(e,i){i.code===i.SYNTAX_ERR?e.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name = ?",[t.storeName],(function(e,l){l.rows.length?a(e,i):$(e,t,(function(){e.executeSql(n,r,o,a)}),a)}),a):a(e,i)}),a)}function Y(e,t,n,r){var o=this;e=c(e);var a=new i((function(a,i){o.ready().then((function(){void 0===t&&(t=null);var l=t,u=o._dbInfo;u.serializer.serialize(t,(function(t,c){c?i(c):u.db.transaction((function(n){Q(n,u,"INSERT OR REPLACE INTO "+u.storeName+" (key, value) VALUES (?, ?)",[e,t],(function(){a(l)}),(function(e,t){i(t)}))}),(function(t){if(t.code===t.QUOTA_ERR){if(r>0)return void a(Y.apply(o,[e,l,n,r-1]));i(t)}}))}))})).catch(i)}));return l(a,n),a}var X={_driver:"webSQLStorage",_initStorage:function(e){var t=this,n={db:null};if(e)for(var r in e)n[r]="string"!=typeof e[r]?e[r].toString():e[r];var o=new i((function(e,r){try{n.db=openDatabase(n.name,String(n.version),n.description,n.size)}catch(e){return r(e)}n.db.transaction((function(o){$(o,n,(function(){t._dbInfo=n,e()}),(function(e,t){r(t)}))}),r)}));return n.serializer=q,o},_support:"function"==typeof openDatabase,iterate:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){Q(n,o,"SELECT * FROM "+o.storeName,[],(function(n,r){for(var a=r.rows,i=a.length,l=0;l<i;l++){var u=a.item(l),c=u.value;if(c&&(c=o.serializer.deserialize(c)),void 0!==(c=e(c,u.key,l+1)))return void t(c)}t()}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},getItem:function(e,t){var n=this;e=c(e);var r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){Q(n,o,"SELECT * FROM "+o.storeName+" WHERE key = ? LIMIT 1",[e],(function(e,n){var r=n.rows.length?n.rows.item(0).value:null;r&&(r=o.serializer.deserialize(r)),t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},setItem:function(e,t,n){return Y.apply(this,[e,t,n,1])},removeItem:function(e,t){var n=this;e=c(e);var r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){Q(n,o,"DELETE FROM "+o.storeName+" WHERE key = ?",[e],(function(){t()}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},clear:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){Q(t,r,"DELETE FROM "+r.storeName,[],(function(){e()}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},length:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){Q(t,r,"SELECT COUNT(key) as c FROM "+r.storeName,[],(function(t,n){var r=n.rows.item(0).c;e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},key:function(e,t){var n=this,r=new i((function(t,r){n.ready().then((function(){var o=n._dbInfo;o.db.transaction((function(n){Q(n,o,"SELECT key FROM "+o.storeName+" WHERE id = ? LIMIT 1",[e+1],(function(e,n){var r=n.rows.length?n.rows.item(0).key:null;t(r)}),(function(e,t){r(t)}))}))})).catch(r)}));return l(r,t),r},keys:function(e){var t=this,n=new i((function(e,n){t.ready().then((function(){var r=t._dbInfo;r.db.transaction((function(t){Q(t,r,"SELECT key FROM "+r.storeName,[],(function(t,n){for(var r=[],o=0;o<n.rows.length;o++)r.push(n.rows.item(o).key);e(r)}),(function(e,t){n(t)}))}))})).catch(n)}));return l(n,e),n},dropInstance:function(e,t){t=s.apply(this,arguments);var n=this.config();(e="function"!=typeof e&&e||{}).name||(e.name=e.name||n.name,e.storeName=e.storeName||n.storeName);var r,o=this;return l(r=e.name?new i((function(t){var r;r=e.name===n.name?o._dbInfo.db:openDatabase(e.name,"","",0),e.storeName?t({db:r,storeNames:[e.storeName]}):t(function(e){return new i((function(t,n){e.transaction((function(r){r.executeSql("SELECT name FROM sqlite_master WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'",[],(function(n,r){for(var o=[],a=0;a<r.rows.length;a++)o.push(r.rows.item(a).name);t({db:e,storeNames:o})}),(function(e,t){n(t)}))}),(function(e){n(e)}))}))}(r))})).then((function(e){return new i((function(t,n){e.db.transaction((function(r){function o(e){return new i((function(t,n){r.executeSql("DROP TABLE IF EXISTS "+e,[],(function(){t()}),(function(e,t){n(t)}))}))}for(var a=[],l=0,u=e.storeNames.length;l<u;l++)a.push(o(e.storeNames[l]));i.all(a).then((function(){t()})).catch((function(e){n(e)}))}),(function(e){n(e)}))}))})):i.reject("Invalid arguments"),t),r}};function Z(e,t){var n=e.name+"/";return e.storeName!==t.storeName&&(n+=e.storeName+"/"),n}function ee(){return!function(){var e="_localforage_support_test";try{return localStorage.setItem(e,!0),localStorage.removeItem(e),!1}catch(e){return!0}}()||localStorage.length>0}var te={_driver:"localStorageWrapper",_initStorage:function(e){var t={};if(e)for(var n in e)t[n]=e[n];return t.keyPrefix=Z(e,this._defaultConfig),ee()?(this._dbInfo=t,t.serializer=q,i.resolve()):i.reject()},_support:function(){try{return"undefined"!=typeof localStorage&&"setItem"in localStorage&&!!localStorage.setItem}catch(e){return!1}}(),iterate:function(e,t){var n=this,r=n.ready().then((function(){for(var t=n._dbInfo,r=t.keyPrefix,o=r.length,a=localStorage.length,i=1,l=0;l<a;l++){var u=localStorage.key(l);if(0===u.indexOf(r)){var c=localStorage.getItem(u);if(c&&(c=t.serializer.deserialize(c)),void 0!==(c=e(c,u.substring(o),i++)))return c}}}));return l(r,t),r},getItem:function(e,t){var n=this;e=c(e);var r=n.ready().then((function(){var t=n._dbInfo,r=localStorage.getItem(t.keyPrefix+e);return r&&(r=t.serializer.deserialize(r)),r}));return l(r,t),r},setItem:function(e,t,n){var r=this;e=c(e);var o=r.ready().then((function(){void 0===t&&(t=null);var n=t;return new i((function(o,a){var i=r._dbInfo;i.serializer.serialize(t,(function(t,r){if(r)a(r);else try{localStorage.setItem(i.keyPrefix+e,t),o(n)}catch(e){"QuotaExceededError"!==e.name&&"NS_ERROR_DOM_QUOTA_REACHED"!==e.name||a(e),a(e)}}))}))}));return l(o,n),o},removeItem:function(e,t){var n=this;e=c(e);var r=n.ready().then((function(){var t=n._dbInfo;localStorage.removeItem(t.keyPrefix+e)}));return l(r,t),r},clear:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo.keyPrefix,n=localStorage.length-1;n>=0;n--){var r=localStorage.key(n);0===r.indexOf(e)&&localStorage.removeItem(r)}}));return l(n,e),n},length:function(e){var t=this.keys().then((function(e){return e.length}));return l(t,e),t},key:function(e,t){var n=this,r=n.ready().then((function(){var t,r=n._dbInfo;try{t=localStorage.key(e)}catch(e){t=null}return t&&(t=t.substring(r.keyPrefix.length)),t}));return l(r,t),r},keys:function(e){var t=this,n=t.ready().then((function(){for(var e=t._dbInfo,n=localStorage.length,r=[],o=0;o<n;o++){var a=localStorage.key(o);0===a.indexOf(e.keyPrefix)&&r.push(a.substring(e.keyPrefix.length))}return r}));return l(n,e),n},dropInstance:function(e,t){if(t=s.apply(this,arguments),!(e="function"!=typeof e&&e||{}).name){var n=this.config();e.name=e.name||n.name,e.storeName=e.storeName||n.storeName}var r,o=this;return r=e.name?new i((function(t){e.storeName?t(Z(e,o._defaultConfig)):t(e.name+"/")})).then((function(e){for(var t=localStorage.length-1;t>=0;t--){var n=localStorage.key(t);0===n.indexOf(e)&&localStorage.removeItem(n)}})):i.reject("Invalid arguments"),l(r,t),r}},ne=function(e,t){for(var n=e.length,r=0;r<n;){if((o=e[r])===(a=t)||"number"==typeof o&&"number"==typeof a&&isNaN(o)&&isNaN(a))return!0;r++}var o,a;return!1},re=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)},oe={},ae={},ie={INDEXEDDB:_,WEBSQL:X,LOCALSTORAGE:te},le=[ie.INDEXEDDB._driver,ie.WEBSQL._driver,ie.LOCALSTORAGE._driver],ue=["dropInstance"],ce=["clear","getItem","iterate","key","keys","length","removeItem","setItem"].concat(ue),se={description:"",driver:le.slice(),name:"localforage",size:4980736,storeName:"keyvaluepairs",version:1};function fe(e,t){e[t]=function(){var n=arguments;return e.ready().then((function(){return e[t].apply(e,n)}))}}function de(){for(var e=1;e<arguments.length;e++){var t=arguments[e];if(t)for(var n in t)t.hasOwnProperty(n)&&(re(t[n])?arguments[0][n]=t[n].slice():arguments[0][n]=t[n])}return arguments[0]}var pe=function(){function e(t){for(var n in function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),ie)if(ie.hasOwnProperty(n)){var r=ie[n],o=r._driver;this[n]=o,oe[o]||this.defineDriver(r)}this._defaultConfig=de({},se),this._config=de({},this._defaultConfig,t),this._driverSet=null,this._initDriver=null,this._ready=!1,this._dbInfo=null,this._wrapLibraryMethodsWithReady(),this.setDriver(this._config.driver).catch((function(){}))}return e.prototype.config=function(e){if("object"===(void 0===e?"undefined":r(e))){if(this._ready)return new Error("Can't call config() after localforage has been used.");for(var t in e){if("storeName"===t&&(e[t]=e[t].replace(/\W/g,"_")),"version"===t&&"number"!=typeof e[t])return new Error("Database version must be a number.");this._config[t]=e[t]}return!("driver"in e)||!e.driver||this.setDriver(this._config.driver)}return"string"==typeof e?this._config[e]:this._config},e.prototype.defineDriver=function(e,t,n){var r=new i((function(t,n){try{var r=e._driver,o=new Error("Custom driver not compliant; see https://mozilla.github.io/localForage/#definedriver");if(!e._driver)return void n(o);for(var a=ce.concat("_initStorage"),u=0,c=a.length;u<c;u++){var s=a[u];if((!ne(ue,s)||e[s])&&"function"!=typeof e[s])return void n(o)}!function(){for(var t=function(e){return function(){var t=new Error("Method "+e+" is not implemented by the current driver"),n=i.reject(t);return l(n,arguments[arguments.length-1]),n}},n=0,r=ue.length;n<r;n++){var o=ue[n];e[o]||(e[o]=t(o))}}();var f=function(n){oe[r]&&console.info("Redefining LocalForage driver: "+r),oe[r]=e,ae[r]=n,t()};"_support"in e?e._support&&"function"==typeof e._support?e._support().then(f,n):f(!!e._support):f(!0)}catch(e){n(e)}}));return u(r,t,n),r},e.prototype.driver=function(){return this._driver||null},e.prototype.getDriver=function(e,t,n){var r=oe[e]?i.resolve(oe[e]):i.reject(new Error("Driver not found."));return u(r,t,n),r},e.prototype.getSerializer=function(e){var t=i.resolve(q);return u(t,e),t},e.prototype.ready=function(e){var t=this,n=t._driverSet.then((function(){return null===t._ready&&(t._ready=t._initDriver()),t._ready}));return u(n,e,e),n},e.prototype.setDriver=function(e,t,n){var r=this;re(e)||(e=[e]);var o=this._getSupportedDrivers(e);function a(){r._config.driver=r.driver()}function l(e){return r._extend(e),a(),r._ready=r._initStorage(r._config),r._ready}var c=null!==this._driverSet?this._driverSet.catch((function(){return i.resolve()})):i.resolve();return this._driverSet=c.then((function(){var e=o[0];return r._dbInfo=null,r._ready=null,r.getDriver(e).then((function(e){r._driver=e._driver,a(),r._wrapLibraryMethodsWithReady(),r._initDriver=function(e){return function(){var t=0;return function n(){for(;t<e.length;){var o=e[t];return t++,r._dbInfo=null,r._ready=null,r.getDriver(o).then(l).catch(n)}a();var u=new Error("No available storage method found.");return r._driverSet=i.reject(u),r._driverSet}()}}(o)}))})).catch((function(){a();var e=new Error("No available storage method found.");return r._driverSet=i.reject(e),r._driverSet})),u(this._driverSet,t,n),this._driverSet},e.prototype.supports=function(e){return!!ae[e]},e.prototype._extend=function(e){de(this,e)},e.prototype._getSupportedDrivers=function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e[n];this.supports(o)&&t.push(o)}return t},e.prototype._wrapLibraryMethodsWithReady=function(){for(var e=0,t=ce.length;e<t;e++)fe(this,ce[e])},e.prototype.createInstance=function(t){return new e(t)},e}(),he=new pe;t.exports=he},{3:3}]},{},[4])(4)},734:(e,t,n)=>{"use strict";function r(e){return e.toLowerCase()}n.d(t,{B:()=>i});var o=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],a=/[^A-Z0-9]+/gi;function i(e,t){void 0===t&&(t={});for(var n=t.splitRegexp,i=void 0===n?o:n,u=t.stripRegexp,c=void 0===u?a:u,s=t.transform,f=void 0===s?r:s,d=t.delimiter,p=void 0===d?" ":d,h=l(l(e,i,"$1\0$2"),c,"\0"),m=0,v=h.length;"\0"===h.charAt(m);)m++;for(;"\0"===h.charAt(v-1);)v--;return h.slice(m,v).split("\0").map(f).join(p)}function l(e,t,n){return t instanceof RegExp?e.replace(t,n):t.reduce((function(e,t){return e.replace(t,n)}),e)}},764:(e,t,n)=>{"use strict";n.d(t,{Ho:()=>i});var r=n(582),o=n(734);function a(e,t){var n=e.charAt(0),r=e.substr(1).toLowerCase();return t>0&&n>="0"&&n<="9"?"_"+n+r:""+n.toUpperCase()+r}function i(e,t){return void 0===t&&(t={}),(0,o.B)(e,(0,r.pi)({delimiter:"",transform:a},t))}},448:(e,t,n)=>{"use strict";var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var s=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),E=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),x=Symbol.for("react.profiler"),N=Symbol.for("react.provider"),L=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),_=Symbol.for("react.suspense_list"),P=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var z,F=Object.assign;function M(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var j=!1;function B(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var u="\n"+o[i].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}}while(1<=i&&0<=l);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?M(e):""}function U(e){switch(e.tag){case 5:return M(e.type);case 16:return M("Lazy");case 13:return M("Suspense");case 19:return M("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case E:return"Portal";case x:return"Profiler";case C:return"StrictMode";case R:return"Suspense";case _:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case L:return(e.displayName||"Context")+".Consumer";case N:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case P:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function G(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function J(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function $(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Q(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Y(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function X(e,t){Y(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function ae(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ue(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,se,fe=(se=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return se(e,t)}))}:se);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ge=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,ke=null,Ce=null;function xe(e){if(e=wo(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=Eo(t),Ee(e.stateNode,e.type,t))}}function Ne(e){ke?Ce?Ce.push(e):Ce=[e]:ke=e}function Le(){if(ke){var e=ke,t=Ce;if(Ce=ke=null,xe(e),t)for(e=0;e<t.length;e++)xe(t[e])}}function Te(e,t){return e(t)}function Re(){}var _e=!1;function Pe(e,t,n){if(_e)return e(t,n);_e=!0;try{return Te(e,t,n)}finally{_e=!1,(null!==ke||null!==Ce)&&(Re(),Le())}}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=Eo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Ie=!1;if(s)try{var De={};Object.defineProperty(De,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(se){Ie=!1}function Oe(e,t,n,r,o,a,i,l,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var ze=!1,Fe=null,Me=!1,je=null,Be={onError:function(e){ze=!0,Fe=e}};function Ue(e,t,n,r,o,a,i,l,u){ze=!1,Fe=null,Oe.apply(Be,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Ve(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Je(e):null}function Je(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Je(e);if(null!==t)return t;e=e.sibling}return null}var Ke=o.unstable_scheduleCallback,qe=o.unstable_cancelCallback,$e=o.unstable_shouldYield,Qe=o.unstable_requestPaint,Ye=o.unstable_now,Xe=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ut|0)|0},lt=Math.log,ut=Math.LN2,ct=64,st=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=ft(l):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,Et,kt,Ct,xt,Nt=!1,Lt=[],Tt=null,Rt=null,_t=null,Pt=new Map,At=new Map,It=[],Dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Ot(e,t){switch(e){case"focusin":case"focusout":Tt=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":_t=null;break;case"pointerover":case"pointerout":Pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":At.delete(t.pointerId)}}function zt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&Et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Ft(e){var t=bo(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void xt(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=$t(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&Et(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function jt(e,t,n){Mt(e)&&n.delete(t)}function Bt(){Nt=!1,null!==Tt&&Mt(Tt)&&(Tt=null),null!==Rt&&Mt(Rt)&&(Rt=null),null!==_t&&Mt(_t)&&(_t=null),Pt.forEach(jt),At.forEach(jt)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Nt||(Nt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bt)))}function Vt(e){function t(t){return Ut(t,e)}if(0<Lt.length){Ut(Lt[0],e);for(var n=1;n<Lt.length;n++){var r=Lt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Tt&&Ut(Tt,e),null!==Rt&&Ut(Rt,e),null!==_t&&Ut(_t,e),Pt.forEach(t),At.forEach(t),n=0;n<It.length;n++)(r=It[n]).blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)Ft(n),null===n.blockedOn&&It.shift()}var Ht=w.ReactCurrentBatchConfig,Gt=!0;function Wt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Jt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Kt(e,t,n,r){if(Gt){var o=$t(e,t,n,r);if(null===o)Gr(e,t,r,qt,n),Ot(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Tt=zt(Tt,e,t,n,r,o),!0;case"dragenter":return Rt=zt(Rt,e,t,n,r,o),!0;case"mouseover":return _t=zt(_t,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Pt.set(a,zt(Pt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,At.set(a,zt(At.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Ot(e,r),4&t&&-1<Dt.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&St(a),null===(a=$t(e,t,n,r))&&Gr(e,t,r,qt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Gr(e,t,r,null,n)}}var qt=null;function $t(e,t,n,r){if(qt=null,null!==(e=bo(e=Se(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Xe()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Xt,r=n.length,o="value"in Yt?Yt.value:Yt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,un,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=on(cn),fn=F({},cn,{view:0,detail:0}),dn=on(fn),pn=F({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:xn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(an=e.screenX-un.screenX,ln=e.screenY-un.screenY):ln=an=0,un=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(F({},pn,{dataTransfer:0})),vn=on(F({},fn,{relatedTarget:0})),gn=on(F({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=F({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),wn=on(F({},cn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function xn(){return Cn}var Nn=F({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:xn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ln=on(Nn),Tn=on(F({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=on(F({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:xn})),_n=on(F({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=F({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=on(Pn),In=[9,13,27,32],Dn=s&&"CompositionEvent"in window,On=null;s&&"documentMode"in document&&(On=document.documentMode);var zn=s&&"TextEvent"in window&&!On,Fn=s&&(!Dn||On&&8<On&&11>=On),Mn=String.fromCharCode(32),jn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){Ne(r),0<(t=Jr(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Jn=null,Kn=null;function qn(e){Mr(e,0)}function $n(e){if(K(So(e)))return e}function Qn(e,t){if("change"===e)return t}var Yn=!1;if(s){var Xn;if(s){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Xn=Zn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function tr(){Jn&&(Jn.detachEvent("onpropertychange",nr),Kn=Jn=null)}function nr(e){if("value"===e.propertyName&&$n(Kn)){var t=[];Wn(t,Kn,e,Se(e)),Pe(qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Jn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return $n(Kn)}function ar(e,t){if("click"===e)return $n(t)}function ir(e,t){if("input"===e||"change"===e)return $n(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function ur(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function sr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=sr(n,a);var i=sr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=s&&"documentMode"in document&&11>=document.documentMode,vr=null,gr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==q(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&ur(yr,r)||(yr=r,0<(r=Jr(gr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Er={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},kr={},Cr={};function xr(e){if(kr[e])return kr[e];if(!Er[e])return e;var t,n=Er[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return kr[e]=n[t];return e}s&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete Er.animationend.animation,delete Er.animationiteration.animation,delete Er.animationstart.animation),"TransitionEvent"in window||delete Er.transitionend.transition);var Nr=xr("animationend"),Lr=xr("animationiteration"),Tr=xr("animationstart"),Rr=xr("transitionend"),_r=new Map,Pr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,t){_r.set(e,t),u(t,[e])}for(var Ir=0;Ir<Pr.length;Ir++){var Dr=Pr[Ir];Ar(Dr.toLowerCase(),"on"+(Dr[0].toUpperCase()+Dr.slice(1)))}Ar(Nr,"onAnimationEnd"),Ar(Lr,"onAnimationIteration"),Ar(Tr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(Rr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Or="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),zr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Or));function Fr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,c){if(Ue.apply(this,arguments),ze){if(!ze)throw Error(a(198));var s=Fe;ze=!1,Fe=null,Me||(Me=!0,je=s)}}(r,t,void 0,e),e.currentTarget=null}function Mr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,c=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;Fr(o,l,c),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,c=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;Fr(o,l,c),a=u}}}if(Me)throw e=je,Me=!1,je=null,e}function jr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(t){"selectionchange"!==t&&(zr.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Br("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Qt(t)){case 1:var o=Wt;break;case 4:o=Jt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Gr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}Pe((function(){var r=a,o=Se(n),i=[];e:{var l=_r.get(e);if(void 0!==l){var u=sn,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":u=Ln;break;case"focusin":c="focus",u=vn;break;case"focusout":c="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Rn;break;case Nr:case Lr:case Tr:u=gn;break;case Rr:u=_n;break;case"scroll":u=dn;break;case"wheel":u=An;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==l?l+"Capture":null:l;s=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ae(h,d))&&s.push(Wr(h,m,p))),f)break;h=h.return}0<s.length&&(l=new u(l,c,null,n,o),i.push({event:l,listeners:s}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!bo(c)&&!c[mo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(c=(c=n.relatedTarget||n.toElement)?bo(c):null)&&(c!==(f=Ve(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(u=null,c=r),u!==c)){if(s=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:So(u),p=null==c?l:So(c),(l=new s(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,bo(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,m=s),f=m,u&&c)e:{for(d=c,h=0,p=s=u;p;p=Kr(p))h++;for(p=0,m=d;m;m=Kr(m))p++;for(;0<h-p;)s=Kr(s),h--;for(;0<p-h;)d=Kr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Kr(s),d=Kr(d)}s=null}else s=null;null!==u&&qr(i,l,u,s,!1),null!==c&&null!==f&&qr(i,f,c,s,!0)}if("select"===(u=(l=r?So(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Qn;else if(Gn(l))if(Yn)v=ir;else{v=or;var g=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?Wn(i,v,n,o):(g&&g(e,l,r),"focusout"===e&&(g=l._wrapperState)&&g.controlled&&"number"===l.type&&ee(l,"number",l.value)),g=r?So(r):window,e){case"focusin":(Gn(g)||"true"===g.contentEditable)&&(vr=g,gr=r,yr=null);break;case"focusout":yr=gr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var y;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=en()):(Xt="value"in(Yt=o)?Yt.value:Yt.textContent,Vn=!0)),0<(g=Jr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(jn=!0,Mn);case"textInput":return(e=t.data)===Mn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!Dn&&Bn(e,t)?(e=en(),Zt=Xt=Yt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Jr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Mr(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ae(e,n))&&r.unshift(Wr(e,a,o)),null!=(a=Ae(e,t))&&r.push(Wr(e,a,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function qr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,c=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==c&&(l=c,o?null!=(u=Ae(n,a))&&i.unshift(Wr(n,u,l)):o||null!=(u=Ae(n,a))&&i.push(Wr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var $r=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function Yr(e){return("string"==typeof e?e:""+e).replace($r,"\n").replace(Qr,"")}function Xr(e,t,n){if(t=Yr(t),Yr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function uo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Vt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function so(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,go="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=so(e);null!==e;){if(n=e[po])return n;e=so(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Eo(e){return e[ho]||null}var ko=[],Co=-1;function xo(e){return{current:e}}function No(e){0>Co||(e.current=ko[Co],ko[Co]=null,Co--)}function Lo(e,t){Co++,ko[Co]=e.current,e.current=t}var To={},Ro=xo(To),_o=xo(!1),Po=To;function Ao(e,t){var n=e.type.contextTypes;if(!n)return To;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Io(e){return null!=e.childContextTypes}function Do(){No(_o),No(Ro)}function Oo(e,t,n){if(Ro.current!==To)throw Error(a(168));Lo(Ro,t),Lo(_o,n)}function zo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,H(e)||"Unknown",o));return F({},n,r)}function Fo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||To,Po=Ro.current,Lo(Ro,e),Lo(_o,_o.current),!0}function Mo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=zo(e,t,Po),r.__reactInternalMemoizedMergedChildContext=e,No(_o),No(Ro),Lo(Ro,e)):No(_o),Lo(_o,n)}var jo=null,Bo=!1,Uo=!1;function Vo(e){null===jo?jo=[e]:jo.push(e)}function Ho(){if(!Uo&&null!==jo){Uo=!0;var e=0,t=bt;try{var n=jo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}jo=null,Bo=!1}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),Ke(Ze,Ho),t}finally{bt=t,Uo=!1}}return null}var Go=[],Wo=0,Jo=null,Ko=0,qo=[],$o=0,Qo=null,Yo=1,Xo="";function Zo(e,t){Go[Wo++]=Ko,Go[Wo++]=Jo,Jo=e,Ko=t}function ea(e,t,n){qo[$o++]=Yo,qo[$o++]=Xo,qo[$o++]=Qo,Qo=e;var r=Yo;e=Xo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Yo=1<<32-it(t)+o|n<<o|r,Xo=a+e}else Yo=1<<a|n<<o|r,Xo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===Jo;)Jo=Go[--Wo],Go[Wo]=null,Ko=Go[--Wo],Go[Wo]=null;for(;e===Qo;)Qo=qo[--$o],qo[$o]=null,Xo=qo[--$o],qo[$o]=null,Yo=qo[--$o],qo[$o]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Ac(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ua(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Qo?{id:Yo,overflow:Xo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ac(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ca(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function sa(e){if(aa){var t=oa;if(t){var n=t;if(!ua(e,t)){if(ca(e))throw Error(a(418));t=co(n.nextSibling);var r=ra;t&&ua(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ca(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function da(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ca(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=co(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?co(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=co(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var va=w.ReactCurrentBatchConfig;function ga(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=xo(null),ba=null,wa=null,Sa=null;function Ea(){Sa=wa=ba=null}function ka(e){var t=ya.current;No(ya),e._currentValue=t}function Ca(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function xa(e,t){ba=e,Sa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Na(e){var t=e._currentValue;if(Sa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var La=null;function Ta(e){null===La?La=[e]:La.push(e)}function Ra(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ta(t)):(n.next=o.next,o.next=n),t.interleaved=n,_a(e,r)}function _a(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Pa=!1;function Aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Da(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Oa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ru)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,_a(e,n)}return null===(o=r.interleaved)?(t.next=t,Ta(r)):(t.next=o.next,o.next=t),r.interleaved=t,_a(e,n)}function za(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Fa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ma(e,t,n,r){var o=e.updateQueue;Pa=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,c=u.next;u.next=null,null===i?a=c:i.next=c,i=u;var s=e.alternate;null!==s&&(l=(s=s.updateQueue).lastBaseUpdate)!==i&&(null===l?s.firstBaseUpdate=c:l.next=c,s.lastBaseUpdate=u)}if(null!==a){var f=o.baseState;for(i=0,s=c=u=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=F({},f,d);break e;case 2:Pa=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===s?(c=s=p,u=f):s=s.next=p,i|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(u=f),o.baseState=u,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Fu|=i,e.lanes=i,e.memoizedState=f}}function ja(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ba=(new r.Component).refs;function Ua(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Va={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Da(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Oa(e,a,o))&&(rc(t,e,o,r),za(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),a=Da(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Oa(e,a,o))&&(rc(t,e,o,r),za(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Da(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Oa(e,o,r))&&(rc(t,e,r,n),za(t,e,r))}};function Ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function Ga(e,t,n){var r=!1,o=To,a=t.contextType;return"object"==typeof a&&null!==a?a=Na(a):(o=Io(t)?Po:Ro.current,a=(r=null!=(r=t.contextTypes))?Ao(e,o):To),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Wa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Va.enqueueReplaceState(t,t.state,null)}function Ja(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ba,Aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Na(a):(a=Io(t)?Po:Ro.current,o.context=Ao(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Ua(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Va.enqueueReplaceState(o,o.state,null),Ma(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===Ba&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function qa(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function $a(e){return(0,e._init)(e._payload)}function Qa(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Dc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mc(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===A&&$a(a)===t.type)?((r=o(t,n.props)).ref=Ka(e,t,n),r.return=e,r):((r=Oc(n.type,n.key,n.props,null,e.mode,r)).ref=Ka(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jc(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=zc(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Mc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Oc(t.type,t.key,t.props,null,e.mode,n)).ref=Ka(e,null,t),n.return=e,n;case E:return(t=jc(t,e.mode,n)).return=e,t;case A:return d(e,(0,t._init)(t._payload),n)}if(te(t)||O(t))return(t=zc(t,e.mode,n,null)).return=e,t;qa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?c(e,t,n,r):null;case E:return n.key===o?s(e,t,n,r):null;case A:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||O(n))return null!==o?null:f(e,t,n,r,null);qa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case E:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case A:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||O(r))return f(t,e=e.get(n)||null,r,o,null);qa(t,r)}return null}function m(o,a,l,u){for(var c=null,s=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var g=p(o,f,l[m],u);if(null===g){null===f&&(f=v);break}e&&f&&null===g.alternate&&t(o,f),a=i(g,a,m),null===s?c=g:s.sibling=g,s=g,f=v}if(m===l.length)return n(o,f),aa&&Zo(o,m),c;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return aa&&Zo(o,m),c}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v);return e&&f.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),c}function v(o,l,u,c){var s=O(u);if("function"!=typeof s)throw Error(a(150));if(null==(u=s.call(u)))throw Error(a(151));for(var f=s=null,m=l,v=l=0,g=null,y=u.next();null!==m&&!y.done;v++,y=u.next()){m.index>v?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,c);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?s=b:f.sibling=b,f=b,m=g}if(y.done)return n(o,m),aa&&Zo(o,v),s;if(null===m){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,c))&&(l=i(y,l,v),null===f?s=y:f.sibling=y,f=y);return aa&&Zo(o,v),s}for(m=r(o,m);!y.done;v++,y=u.next())null!==(y=h(m,o,v,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?v:y.key),l=i(y,l,v),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,v),s}return function e(r,a,i,u){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case S:e:{for(var c=i.key,s=a;null!==s;){if(s.key===c){if((c=i.type)===k){if(7===s.tag){n(r,s.sibling),(a=o(s,i.props.children)).return=r,r=a;break e}}else if(s.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===A&&$a(c)===s.type){n(r,s.sibling),(a=o(s,i.props)).ref=Ka(r,s,i),a.return=r,r=a;break e}n(r,s);break}t(r,s),s=s.sibling}i.type===k?((a=zc(i.props.children,r.mode,u,i.key)).return=r,r=a):((u=Oc(i.type,i.key,i.props,null,r.mode,u)).ref=Ka(r,a,i),u.return=r,r=u)}return l(r);case E:e:{for(s=i.key;null!==a;){if(a.key===s){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=jc(i,r.mode,u)).return=r,r=a}return l(r);case A:return e(r,a,(s=i._init)(i._payload),u)}if(te(i))return m(r,a,i,u);if(O(i))return v(r,a,i,u);qa(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Mc(i,r.mode,u)).return=r,r=a),l(r)):n(r,a)}}var Ya=Qa(!0),Xa=Qa(!1),Za={},ei=xo(Za),ti=xo(Za),ni=xo(Za);function ri(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch(Lo(ni,t),Lo(ti,e),Lo(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ue(null,"");break;default:t=ue(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}No(ei),Lo(ei,t)}function ai(){No(ei),No(ti),No(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=ue(t,e.type);t!==n&&(Lo(ti,e),Lo(ei,n))}function li(e){ti.current===e&&(No(ei),No(ti))}var ui=xo(0);function ci(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var si=[];function fi(){for(var e=0;e<si.length;e++)si[e]._workInProgressVersionPrimary=null;si.length=0}var di=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,vi=null,gi=null,yi=!1,bi=!1,wi=0,Si=0;function Ei(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ci(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,di.current=null===e||null===e.memoizedState?ll:ul,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,gi=vi=null,t.updateQueue=null,di.current=cl,e=n(r,o)}while(bi)}if(di.current=il,t=null!==vi&&null!==vi.next,hi=0,gi=vi=mi=null,yi=!1,t)throw Error(a(300));return e}function xi(){var e=0!==wi;return wi=0,e}function Ni(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===gi?mi.memoizedState=gi=e:gi=gi.next=e,gi}function Li(){if(null===vi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=vi.next;var t=null===gi?mi.memoizedState:gi.next;if(null!==t)gi=t,vi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(vi=e).memoizedState,baseState:vi.baseState,baseQueue:vi.baseQueue,queue:vi.queue,next:null},null===gi?mi.memoizedState=gi=e:gi=gi.next=e}return gi}function Ti(e,t){return"function"==typeof t?t(e):t}function Ri(e){var t=Li(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=vi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,c=null,s=i;do{var f=s.lane;if((hi&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(u=c=d,l=r):c=c.next=d,mi.lanes|=f,Fu|=f}s=s.next}while(null!==s&&s!==i);null===c?l=r:c.next=u,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Fu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function _i(e){var t=Li(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Pi(){}function Ai(e,t){var n=mi,r=Li(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Gi(Oi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==gi&&1&gi.memoizedState.tag){if(n.flags|=2048,ji(9,Di.bind(null,n,r,o,t),void 0,null),null===_u)throw Error(a(349));0!=(30&hi)||Ii(n,t,o)}return o}function Ii(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Di(e,t,n,r){t.value=n,t.getSnapshot=r,zi(t)&&Fi(e)}function Oi(e,t,n){return n((function(){zi(t)&&Fi(e)}))}function zi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Fi(e){var t=_a(e,1);null!==t&&rc(t,e,1,-1)}function Mi(e){var t=Ni();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ti,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function ji(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Bi(){return Li().memoizedState}function Ui(e,t,n,r){var o=Ni();mi.flags|=e,o.memoizedState=ji(1|t,n,void 0,void 0===r?null:r)}function Vi(e,t,n,r){var o=Li();r=void 0===r?null:r;var a=void 0;if(null!==vi){var i=vi.memoizedState;if(a=i.destroy,null!==r&&ki(r,i.deps))return void(o.memoizedState=ji(t,n,a,r))}mi.flags|=e,o.memoizedState=ji(1|t,n,a,r)}function Hi(e,t){return Ui(8390656,8,e,t)}function Gi(e,t){return Vi(2048,8,e,t)}function Wi(e,t){return Vi(4,2,e,t)}function Ji(e,t){return Vi(4,4,e,t)}function Ki(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function qi(e,t,n){return n=null!=n?n.concat([e]):null,Vi(4,4,Ki.bind(null,t,e),n)}function $i(){}function Qi(e,t){var n=Li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yi(e,t){var n=Li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Xi(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Fu|=n,e.baseState=!0),t)}function Zi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return Li().memoizedState}function tl(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Ra(e,t,n,r))&&(rc(n,e,r,tc()),al(n,t,r))}function nl(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var u=t.interleaved;return null===u?(o.next=o,Ta(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ra(e,t,o,r))&&(rc(n,e,r,o=tc()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:Na,useCallback:Ei,useContext:Ei,useEffect:Ei,useImperativeHandle:Ei,useInsertionEffect:Ei,useLayoutEffect:Ei,useMemo:Ei,useReducer:Ei,useRef:Ei,useState:Ei,useDebugValue:Ei,useDeferredValue:Ei,useTransition:Ei,useMutableSource:Ei,useSyncExternalStore:Ei,useId:Ei,unstable_isNewReconciler:!1},ll={readContext:Na,useCallback:function(e,t){return Ni().memoizedState=[e,void 0===t?null:t],e},useContext:Na,useEffect:Hi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ui(4194308,4,Ki.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ui(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ui(4,2,e,t)},useMemo:function(e,t){var n=Ni();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ni();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Ni().memoizedState=e},useState:Mi,useDebugValue:$i,useDeferredValue:function(e){return Ni().memoizedState=e},useTransition:function(){var e=Mi(!1),t=e[0];return e=Zi.bind(null,e[1]),Ni().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=Ni();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===_u)throw Error(a(349));0!=(30&hi)||Ii(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Hi(Oi.bind(null,r,i,e),[e]),r.flags|=2048,ji(9,Di.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Ni(),t=_u.identifierPrefix;if(aa){var n=Xo;t=":"+t+"R"+(n=(Yo&~(1<<32-it(Yo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Si++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},ul={readContext:Na,useCallback:Qi,useContext:Na,useEffect:Gi,useImperativeHandle:qi,useInsertionEffect:Wi,useLayoutEffect:Ji,useMemo:Yi,useReducer:Ri,useRef:Bi,useState:function(){return Ri(Ti)},useDebugValue:$i,useDeferredValue:function(e){return Xi(Li(),vi.memoizedState,e)},useTransition:function(){return[Ri(Ti)[0],Li().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Ai,useId:el,unstable_isNewReconciler:!1},cl={readContext:Na,useCallback:Qi,useContext:Na,useEffect:Gi,useImperativeHandle:qi,useInsertionEffect:Wi,useLayoutEffect:Ji,useMemo:Yi,useReducer:_i,useRef:Bi,useState:function(){return _i(Ti)},useDebugValue:$i,useDeferredValue:function(e){var t=Li();return null===vi?t.memoizedState=e:Xi(t,vi.memoizedState,e)},useTransition:function(){return[_i(Ti)[0],Li().memoizedState]},useMutableSource:Pi,useSyncExternalStore:Ai,useId:el,unstable_isNewReconciler:!1};function sl(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function dl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Da(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wu||(Wu=!0,Ju=r),dl(0,t)},n}function ml(e,t,n){(n=Da(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){dl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){dl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Nc.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Da(-1,1)).tag=2,Oa(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function Sl(e,t,n,r){t.child=null===e?Xa(t,null,n,r):Ya(t,e.child,n,r)}function El(e,t,n,r,o){n=n.render;var a=t.ref;return xa(t,o),r=Ci(e,t,n,r,a,o),n=xi(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,Sl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wl(e,t,o))}function kl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Ic(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Oc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Cl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:ur)(i,r)&&e.ref===t.ref)return Wl(e,t,o)}return t.flags|=1,(e=Dc(a,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(ur(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Wl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return Ll(e,t,n,r,o)}function xl(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Lo(Du,Iu),Iu|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Lo(Du,Iu),Iu|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Lo(Du,Iu),Iu|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Lo(Du,Iu),Iu|=r;return Sl(e,t,o,n),t.child}function Nl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ll(e,t,n,r,o){var a=Io(n)?Po:Ro.current;return a=Ao(t,a),xa(t,o),n=Ci(e,t,n,r,a,o),r=xi(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,Sl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wl(e,t,o))}function Tl(e,t,n,r,o){if(Io(n)){var a=!0;Fo(t)}else a=!1;if(xa(t,o),null===t.stateNode)Gl(e,t),Ga(t,n,r),Ja(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,c=n.contextType;c="object"==typeof c&&null!==c?Na(c):Ao(t,c=Io(n)?Po:Ro.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==c)&&Wa(t,i,r,c),Pa=!1;var d=t.memoizedState;i.state=d,Ma(t,r,i,o),u=t.memoizedState,l!==r||d!==u||_o.current||Pa?("function"==typeof s&&(Ua(t,n,s,r),u=t.memoizedState),(l=Pa||Ha(t,n,l,r,d,u,c))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=c,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ia(e,t),l=t.memoizedProps,c=t.type===t.elementType?l:ga(t.type,l),i.props=c,f=t.pendingProps,d=i.context,u="object"==typeof(u=n.contextType)&&null!==u?Na(u):Ao(t,u=Io(n)?Po:Ro.current);var p=n.getDerivedStateFromProps;(s="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==f||d!==u)&&Wa(t,i,r,u),Pa=!1,d=t.memoizedState,i.state=d,Ma(t,r,i,o);var h=t.memoizedState;l!==f||d!==h||_o.current||Pa?("function"==typeof p&&(Ua(t,n,p,r),h=t.memoizedState),(c=Pa||Ha(t,n,c,r,d,h,u)||!1)?(s||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=u,r=c):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Rl(e,t,n,r,a,o)}function Rl(e,t,n,r,o,a){Nl(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Mo(t,n,!1),Wl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ya(t,e.child,null,a),t.child=Ya(t,null,l,a)):Sl(e,t,l,a),t.memoizedState=r.state,o&&Mo(t,n,!0),t.child}function _l(e){var t=e.stateNode;t.pendingContext?Oo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Oo(0,t.context,!1),oi(e,t.containerInfo)}function Pl(e,t,n,r,o){return ha(),ma(o),t.flags|=256,Sl(e,t,n,r),t.child}var Al,Il,Dl,Ol,zl={dehydrated:null,treeContext:null,retryLane:0};function Fl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ml(e,t,n){var r,o=t.pendingProps,i=ui.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Lo(ui,1&i),null===e)return sa(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Fc(u,o,0,null),e=zc(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Fl(n),t.memoizedState=zl,e):jl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Bl(e,t,l,r=fl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Fc({mode:"visible",children:r.children},o,0,null),(i=zc(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Ya(t,e.child,null,l),t.child.memoizedState=Fl(l),t.memoizedState=zl,i);if(0==(1&t.mode))return Bl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Bl(e,t,l,r=fl(i=Error(a(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=_u)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,_a(e,o),rc(r,e,o,-1))}return vc(),Bl(e,t,l,r=fl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Tc.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=co(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(qo[$o++]=Yo,qo[$o++]=Xo,qo[$o++]=Qo,Yo=e.id,Xo=e.overflow,Qo=t),(t=jl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=Dc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Dc(r,l):(l=zc(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Fl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=zl,o}return e=(l=e.child).sibling,o=Dc(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function jl(e,t){return(t=Fc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Bl(e,t,n,r){return null!==r&&ma(r),Ya(t,e.child,null,n),(e=jl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ul(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ca(e.return,t,n)}function Vl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Hl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Sl(e,t,r.children,n),0!=(2&(r=ui.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ul(e,n,t);else if(19===e.tag)Ul(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Lo(ui,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ci(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Vl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ci(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Vl(t,!0,n,null,a);break;case"together":Vl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Gl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Dc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Dc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Jl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function ql(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return Io(t.type)&&Do(),Kl(t),null;case 3:return r=t.stateNode,ai(),No(_o),No(Ro),fi(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lc(ia),ia=null))),Il(e,t),Kl(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Dl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Kl(t),null}if(e=ri(ei.current),da(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(o=0;o<Or.length;o++)jr(Or[o],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":Q(r,i),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},jr("invalid",r);break;case"textarea":oe(r,i),jr("invalid",r)}for(var u in ye(n,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Xr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&jr("scroll",r)}switch(n){case"input":J(r),Z(r,i,!0);break;case"textarea":J(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[po]=t,e[ho]=r,Al(e,t,!1,!1),t.stateNode=e;e:{switch(u=be(n,r),n){case"dialog":jr("cancel",e),jr("close",e),o=r;break;case"iframe":case"object":case"embed":jr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Or.length;o++)jr(Or[o],e);o=r;break;case"source":jr("error",e),o=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),o=r;break;case"details":jr("toggle",e),o=r;break;case"input":Q(e,r),o=$(e,r),jr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=F({},r,{value:void 0}),jr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),jr("invalid",e)}for(i in ye(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?ve(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&fe(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&de(e,s):"number"==typeof s&&de(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&jr("scroll",e):null!=s&&b(e,i,s,u))}switch(n){case"input":J(e),Z(e,r,!1);break;case"textarea":J(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)Ol(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Xr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Xr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Kl(t),null;case 13:if(No(ui),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),i=!1}else null!==ia&&(lc(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ui.current)?0===Ou&&(Ou=3):vc())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return ai(),Il(e,t),null===e&&Vr(t.stateNode.containerInfo),Kl(t),null;case 10:return ka(t.type._context),Kl(t),null;case 19:if(No(ui),null===(i=t.memoizedState))return Kl(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)Jl(i,!1);else{if(0!==Ou||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=ci(e))){for(t.flags|=128,Jl(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Lo(ui,1&ui.current|2),t.child}e=e.sibling}null!==i.tail&&Ye()>Hu&&(t.flags|=128,r=!0,Jl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ci(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Jl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!aa)return Kl(t),null}else 2*Ye()-i.renderingStartTime>Hu&&1073741824!==n&&(t.flags|=128,r=!0,Jl(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ye(),t.sibling=null,n=ui.current,Lo(ui,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Iu)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function $l(e,t){switch(na(t),t.tag){case 1:return Io(t.type)&&Do(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),No(_o),No(Ro),fi(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(No(ui),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return No(ui),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Al=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Il=function(){},Dl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=$(e,o),r=$(e,r),i=[];break;case"select":o=F({},o,{value:void 0}),r=F({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(s in ye(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(a in u)u.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(a in u)!u.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&u[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(i||(i=[]),i.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(i=i||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&jr("scroll",e),i||u===c||(i=[])):(i=i||[]).push(s,c))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}},Ol=function(e,t,n,r){n!==r&&(t.flags|=4)};var Ql=!1,Yl=!1,Xl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function eu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xc(e,t,n)}else n.current=null}function tu(e,t,n){try{n()}catch(n){xc(e,t,n)}}var nu=!1;function ru(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&tu(t,n,a)}o=o.next}while(o!==r)}}function ou(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function iu(e){var t=e.alternate;null!==t&&(e.alternate=null,iu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[go],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function uu(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||lu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}function su(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(su(e,t,n),e=e.sibling;null!==e;)su(e,t,n),e=e.sibling}var fu=null,du=!1;function pu(e,t,n){for(n=n.child;null!==n;)hu(e,t,n),n=n.sibling}function hu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Yl||eu(n,t);case 6:var r=fu,o=du;fu=null,pu(e,t,n),du=o,null!==(fu=r)&&(du?(e=fu,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fu.removeChild(n.stateNode));break;case 18:null!==fu&&(du?(e=fu,n=n.stateNode,8===e.nodeType?uo(e.parentNode,n):1===e.nodeType&&uo(e,n),Vt(e)):uo(fu,n.stateNode));break;case 4:r=fu,o=du,fu=n.stateNode.containerInfo,du=!0,pu(e,t,n),fu=r,du=o;break;case 0:case 11:case 14:case 15:if(!Yl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&tu(n,t,i),o=o.next}while(o!==r)}pu(e,t,n);break;case 1:if(!Yl&&(eu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xc(n,t,e)}pu(e,t,n);break;case 21:pu(e,t,n);break;case 22:1&n.mode?(Yl=(r=Yl)||null!==n.memoizedState,pu(e,t,n),Yl=r):pu(e,t,n);break;default:pu(e,t,n)}}function mu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xl),t.forEach((function(t){var r=Rc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function vu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:fu=u.stateNode,du=!1;break e;case 3:case 4:fu=u.stateNode.containerInfo,du=!0;break e}u=u.return}if(null===fu)throw Error(a(160));hu(i,l,o),fu=null,du=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){xc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(vu(t,e),yu(e),4&r){try{ru(3,e,e.return),ou(3,e)}catch(t){xc(e,e.return,t)}try{ru(5,e,e.return)}catch(t){xc(e,e.return,t)}}break;case 1:vu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return);break;case 5:if(vu(t,e),yu(e),512&r&&null!==n&&eu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){xc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===u&&"radio"===i.type&&null!=i.name&&Y(o,i),be(u,l);var s=be(u,i);for(l=0;l<c.length;l+=2){var f=c[l],d=c[l+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,s)}switch(u){case"input":X(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){xc(e,e.return,t)}}break;case 6:if(vu(t,e),yu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){xc(e,e.return,t)}}break;case 3:if(vu(t,e),yu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){xc(e,e.return,t)}break;case 4:default:vu(t,e),yu(e);break;case 13:vu(t,e),yu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Vu=Ye())),4&r&&mu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Yl=(s=Yl)||f,vu(t,e),Yl=s):vu(t,e),yu(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zl=e,f=e.child;null!==f;){for(d=Zl=f;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:ru(4,p,p.return);break;case 1:eu(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){xc(r,n,e)}}break;case 5:eu(p,p.return);break;case 22:if(null!==p.memoizedState){Eu(d);continue}}null!==h?(h.return=p,Zl=h):Eu(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,u.style.display=me("display",l))}catch(t){xc(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){xc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:vu(t,e),yu(e),4&r&&mu(e);case 21:}}function yu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(lu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),su(e,uu(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cu(e,uu(e),i);break;default:throw Error(a(161))}}catch(t){xc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bu(e,t,n){Zl=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Ql;if(!i){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Yl;l=Ql;var c=Yl;if(Ql=i,(Yl=u)&&!c)for(Zl=o;null!==Zl;)u=(i=Zl).child,22===i.tag&&null!==i.memoizedState?ku(o):null!==u?(u.return=i,Zl=u):ku(o);for(;null!==a;)Zl=a,wu(a,t,n),a=a.sibling;Zl=o,Ql=l,Yl=c}Su(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zl=a):Su(e)}}function Su(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Yl||ou(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ga(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&ja(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}ja(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Vt(d)}}}break;default:throw Error(a(163))}Yl||512&t.flags&&au(t)}catch(e){xc(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function Eu(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function ku(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ou(4,t)}catch(e){xc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){xc(t,o,e)}}var a=t.return;try{au(t)}catch(e){xc(t,a,e)}break;case 5:var i=t.return;try{au(t)}catch(e){xc(t,i,e)}}}catch(e){xc(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var Cu,xu=Math.ceil,Nu=w.ReactCurrentDispatcher,Lu=w.ReactCurrentOwner,Tu=w.ReactCurrentBatchConfig,Ru=0,_u=null,Pu=null,Au=0,Iu=0,Du=xo(0),Ou=0,zu=null,Fu=0,Mu=0,ju=0,Bu=null,Uu=null,Vu=0,Hu=1/0,Gu=null,Wu=!1,Ju=null,Ku=null,qu=!1,$u=null,Qu=0,Yu=0,Xu=null,Zu=-1,ec=0;function tc(){return 0!=(6&Ru)?Ye():-1!==Zu?Zu:Zu=Ye()}function nc(e){return 0==(1&e.mode)?1:0!=(2&Ru)&&0!==Au?Au&-Au:null!==va.transition?(0===ec&&(ec=mt()),ec):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function rc(e,t,n,r){if(50<Yu)throw Yu=0,Xu=null,Error(a(185));gt(e,n,r),0!=(2&Ru)&&e===_u||(e===_u&&(0==(2&Ru)&&(Mu|=n),4===Ou&&uc(e,Au)),oc(e,r),1===n&&0===Ru&&0==(1&t.mode)&&(Hu=Ye()+500,Bo&&Ho()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,u=o[i];-1===u?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):u<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===_u?Au:0);if(0===r)null!==n&&qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&qe(n),1===t)0===e.tag?function(e){Bo=!0,Vo(e)}(cc.bind(null,e)):Vo(cc.bind(null,e)),io((function(){0==(6&Ru)&&Ho()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=_c(n,ac.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ac(e,t){if(Zu=-1,ec=0,0!=(6&Ru))throw Error(a(327));var n=e.callbackNode;if(kc()&&e.callbackNode!==n)return null;var r=dt(e,e===_u?Au:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gc(e,r);else{t=r;var o=Ru;Ru|=2;var i=mc();for(_u===e&&Au===t||(Gu=null,Hu=Ye()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}Ea(),Nu.current=i,Ru=o,null!==Pu?t=0:(_u=null,Au=0,t=Ou)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=ic(e,o)),1===t)throw n=zu,pc(e,0),uc(e,r),oc(e,Ye()),n;if(6===t)uc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=gc(e,r))&&0!==(i=ht(e))&&(r=i,t=ic(e,i)),1===t))throw n=zu,pc(e,0),uc(e,r),oc(e,Ye()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Ec(e,Uu,Gu);break;case 3:if(uc(e,r),(130023424&r)===r&&10<(t=Vu+500-Ye())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Ec.bind(null,e,Uu,Gu),t);break}Ec(e,Uu,Gu);break;case 4:if(uc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Ye()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xu(r/1960))-r)){e.timeoutHandle=ro(Ec.bind(null,e,Uu,Gu),r);break}Ec(e,Uu,Gu);break;default:throw Error(a(329))}}}return oc(e,Ye()),e.callbackNode===n?ac.bind(null,e):null}function ic(e,t){var n=Bu;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=gc(e,t))&&(t=Uu,Uu=n,null!==t&&lc(t)),e}function lc(e){null===Uu?Uu=e:Uu.push.apply(Uu,e)}function uc(e,t){for(t&=~ju,t&=~Mu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&Ru))throw Error(a(327));kc();var t=dt(e,0);if(0==(1&t))return oc(e,Ye()),null;var n=gc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=ic(e,r))}if(1===n)throw n=zu,pc(e,0),uc(e,t),oc(e,Ye()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ec(e,Uu,Gu),oc(e,Ye()),null}function sc(e,t){var n=Ru;Ru|=1;try{return e(t)}finally{0===(Ru=n)&&(Hu=Ye()+500,Bo&&Ho())}}function fc(e){null!==$u&&0===$u.tag&&0==(6&Ru)&&kc();var t=Ru;Ru|=1;var n=Tu.transition,r=bt;try{if(Tu.transition=null,bt=1,e)return e()}finally{bt=r,Tu.transition=n,0==(6&(Ru=t))&&Ho()}}function dc(){Iu=Du.current,No(Du)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Pu)for(n=Pu.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Do();break;case 3:ai(),No(_o),No(Ro),fi();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:No(ui);break;case 10:ka(r.type._context);break;case 22:case 23:dc()}n=n.return}if(_u=e,Pu=e=Dc(e.current,null),Au=Iu=t,Ou=0,zu=null,ju=Mu=Fu=0,Uu=Bu=null,null!==La){for(t=0;t<La.length;t++)if(null!==(r=(n=La[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}La=null}return e}function hc(e,t){for(;;){var n=Pu;try{if(Ea(),di.current=il,yi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}yi=!1}if(hi=0,gi=vi=mi=null,bi=!1,wi=0,Lu.current=null,null===n||null===n.return){Ou=1,zu=t,Pu=null;break}e:{var i=e,l=n.return,u=n,c=t;if(t=Au,u.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var s=c,f=u,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=gl(l);if(null!==h){h.flags&=-257,yl(h,l,u,0,t),1&h.mode&&vl(i,s,t),c=s;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(c),t.updateQueue=v}else m.add(c);break e}if(0==(1&t)){vl(i,s,t),vc();break e}c=Error(a(426))}else if(aa&&1&u.mode){var g=gl(l);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),yl(g,l,u,0,t),ma(sl(c,u));break e}}i=c=sl(c,u),4!==Ou&&(Ou=2),null===Bu?Bu=[i]:Bu.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,Fa(i,hl(0,c,t));break e;case 1:u=c;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Ku||!Ku.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,Fa(i,ml(i,u,t));break e}}i=i.return}while(null!==i)}Sc(n)}catch(e){t=e,Pu===n&&null!==n&&(Pu=n=n.return);continue}break}}function mc(){var e=Nu.current;return Nu.current=il,null===e?il:e}function vc(){0!==Ou&&3!==Ou&&2!==Ou||(Ou=4),null===_u||0==(268435455&Fu)&&0==(268435455&Mu)||uc(_u,Au)}function gc(e,t){var n=Ru;Ru|=2;var r=mc();for(_u===e&&Au===t||(Gu=null,pc(e,t));;)try{yc();break}catch(t){hc(e,t)}if(Ea(),Ru=n,Nu.current=r,null!==Pu)throw Error(a(261));return _u=null,Au=0,Ou}function yc(){for(;null!==Pu;)wc(Pu)}function bc(){for(;null!==Pu&&!$e();)wc(Pu)}function wc(e){var t=Cu(e.alternate,e,Iu);e.memoizedProps=e.pendingProps,null===t?Sc(e):Pu=t,Lu.current=null}function Sc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=ql(n,t,Iu)))return void(Pu=n)}else{if(null!==(n=$l(n,t)))return n.flags&=32767,void(Pu=n);if(null===e)return Ou=6,void(Pu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Pu=t);Pu=t=e}while(null!==t);0===Ou&&(Ou=5)}function Ec(e,t,n){var r=bt,o=Tu.transition;try{Tu.transition=null,bt=1,function(e,t,n,r){do{kc()}while(null!==$u);if(0!=(6&Ru))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===_u&&(Pu=_u=null,Au=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||qu||(qu=!0,_c(tt,(function(){return kc(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Tu.transition,Tu.transition=null;var l=bt;bt=1;var u=Ru;Ru|=4,Lu.current=null,function(e,t){if(eo=Gt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(c=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(u=l),p===i&&++f===r&&(c=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===c?null:{start:u,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Gt=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,g=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?v:ga(t.type,v),g);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){xc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=nu,nu=!1}(e,n),gu(n,e),hr(to),Gt=!!eo,to=eo=null,e.current=n,bu(n,e,o),Qe(),Ru=u,bt=l,Tu.transition=i}else e.current=n;if(qu&&(qu=!1,$u=e,Qu=o),0===(i=e.pendingLanes)&&(Ku=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Ye()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Wu)throw Wu=!1,e=Ju,Ju=null,e;0!=(1&Qu)&&0!==e.tag&&kc(),0!=(1&(i=e.pendingLanes))?e===Xu?Yu++:(Yu=0,Xu=e):Yu=0,Ho()}(e,t,n,r)}finally{Tu.transition=o,bt=r}return null}function kc(){if(null!==$u){var e=wt(Qu),t=Tu.transition,n=bt;try{if(Tu.transition=null,bt=16>e?16:e,null===$u)var r=!1;else{if(e=$u,$u=null,Qu=0,0!=(6&Ru))throw Error(a(331));var o=Ru;for(Ru|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(0!=(16&Zl.flags)){var u=i.deletions;if(null!==u){for(var c=0;c<u.length;c++){var s=u[c];for(Zl=s;null!==Zl;){var f=Zl;switch(f.tag){case 0:case 11:case 15:ru(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zl=d;else for(;null!==Zl;){var p=(f=Zl).sibling,h=f.return;if(iu(f),f===s){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var g=v.sibling;v.sibling=null,v=g}while(null!==v)}}Zl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(i=Zl).flags))switch(i.tag){case 0:case 11:case 15:ru(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Zl=y;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(u=Zl).flags))try{switch(u.tag){case 0:case 11:case 15:ou(9,u)}}catch(e){xc(u,u.return,e)}if(u===l){Zl=null;break e}var S=u.sibling;if(null!==S){S.return=u.return,Zl=S;break e}Zl=u.return}}if(Ru=o,Ho(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Tu.transition=t}}return!1}function Cc(e,t,n){e=Oa(e,t=hl(0,t=sl(n,t),1),1),t=tc(),null!==e&&(gt(e,1,t),oc(e,t))}function xc(e,t,n){if(3===e.tag)Cc(e,e,n);else for(;null!==t;){if(3===t.tag){Cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Oa(t,e=ml(t,e=sl(n,e),1),1),e=tc(),null!==t&&(gt(t,1,e),oc(t,e));break}}t=t.return}}function Nc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,_u===e&&(Au&n)===n&&(4===Ou||3===Ou&&(130023424&Au)===Au&&500>Ye()-Vu?pc(e,0):ju|=n),oc(e,t)}function Lc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=st,0==(130023424&(st<<=1))&&(st=4194304)));var n=tc();null!==(e=_a(e,t))&&(gt(e,t,n),oc(e,n))}function Tc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Lc(e,n)}function Rc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Lc(e,n)}function _c(e,t){return Ke(e,t)}function Pc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ac(e,t,n,r){return new Pc(e,t,n,r)}function Ic(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Dc(e,t){var n=e.alternate;return null===n?((n=Ac(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Oc(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Ic(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return zc(n.children,o,i,t);case C:l=8,o|=8;break;case x:return(e=Ac(12,n,t,2|o)).elementType=x,e.lanes=i,e;case R:return(e=Ac(13,n,t,o)).elementType=R,e.lanes=i,e;case _:return(e=Ac(19,n,t,o)).elementType=_,e.lanes=i,e;case I:return Fc(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case N:l=10;break e;case L:l=9;break e;case T:l=11;break e;case P:l=14;break e;case A:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ac(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function zc(e,t,n,r){return(e=Ac(7,e,r,t)).lanes=n,e}function Fc(e,t,n,r){return(e=Ac(22,e,r,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function Mc(e,t,n){return(e=Ac(6,e,null,t)).lanes=n,e}function jc(e,t,n){return(t=Ac(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Uc(e,t,n,r,o,a,i,l,u){return e=new Bc(e,t,n,l,u),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ac(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Aa(a),e}function Vc(e){if(!e)return To;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Io(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Io(n))return zo(e,n,t)}return t}function Hc(e,t,n,r,o,a,i,l,u){return(e=Uc(n,r,!0,e,0,a,0,l,u)).context=Vc(null),n=e.current,(a=Da(r=tc(),o=nc(n))).callback=null!=t?t:null,Oa(n,a,o),e.current.lanes=o,gt(e,o,r),oc(e,r),e}function Gc(e,t,n,r){var o=t.current,a=tc(),i=nc(o);return n=Vc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Da(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Oa(o,t,i))&&(rc(e,o,i,a),za(e,o,i)),i}function Wc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Jc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Kc(e,t){Jc(e,t),(e=e.alternate)&&Jc(e,t)}Cu=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||_o.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:_l(t),ha();break;case 5:ii(t);break;case 1:Io(t.type)&&Fo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Lo(ya,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Lo(ui,1&ui.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Lo(ui,1&ui.current),null!==(e=Wl(e,t,n))?e.sibling:null);Lo(ui,1&ui.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Lo(ui,ui.current),r)break;return null;case 22:case 23:return t.lanes=0,xl(e,t,n)}return Wl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Gl(e,t),e=t.pendingProps;var o=Ao(t,Ro.current);xa(t,n),o=Ci(null,t,r,e,o,n);var i=xi();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Io(r)?(i=!0,Fo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Aa(t),o.updater=Va,t.stateNode=o,o._reactInternals=t,Ja(t,r,e,n),t=Rl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),Sl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Gl(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ic(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===P)return 14}return 2}(r),e=ga(r,e),o){case 0:t=Ll(null,t,r,e,n);break e;case 1:t=Tl(null,t,r,e,n);break e;case 11:t=El(null,t,r,e,n);break e;case 14:t=kl(null,t,r,ga(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ll(e,t,r,o=t.elementType===r?o:ga(r,o),n);case 1:return r=t.type,o=t.pendingProps,Tl(e,t,r,o=t.elementType===r?o:ga(r,o),n);case 3:e:{if(_l(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ia(e,t),Ma(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Pl(e,t,r,n,o=sl(Error(a(423)),t));break e}if(r!==o){t=Pl(e,t,r,n,o=sl(Error(a(424)),t));break e}for(oa=co(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Wl(e,t,n);break e}Sl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&sa(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),Nl(e,t),Sl(e,t,l,n),t.child;case 6:return null===e&&sa(t),null;case 13:return Ml(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ya(t,null,r,n):Sl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,El(e,t,r,o=t.elementType===r?o:ga(r,o),n);case 7:return Sl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Sl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,Lo(ya,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!_o.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var u=i.dependencies;if(null!==u){l=i.child;for(var c=u.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Da(-1,n&-n)).tag=2;var s=i.updateQueue;if(null!==s){var f=(s=s.shared).pending;null===f?c.next=c:(c.next=f.next,f.next=c),s.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),Ca(i.return,n,t),u.lanes|=n;break}c=c.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),Ca(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Sl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,xa(t,n),r=r(o=Na(o)),t.flags|=1,Sl(e,t,r,n),t.child;case 14:return o=ga(r=t.type,t.pendingProps),kl(e,t,r,o=ga(r.type,o),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ga(r,o),Gl(e,t),t.tag=1,Io(r)?(e=!0,Fo(t)):e=!1,xa(t,n),Ga(t,r,o),Ja(t,r,o,n),Rl(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return xl(e,t,n)}throw Error(a(156,t.tag))};var qc="function"==typeof reportError?reportError:function(e){console.error(e)};function $c(e){this._internalRoot=e}function Qc(e){this._internalRoot=e}function Yc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zc(){}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Wc(i);l.call(e)}}Gc(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Wc(i);a.call(e)}}var i=Hc(t,r,e,0,null,!1,0,"",Zc);return e._reactRootContainer=i,e[mo]=i.current,Vr(8===e.nodeType?e.parentNode:e),fc(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Wc(u);l.call(e)}}var u=Uc(e,0,!1,null,0,!1,0,"",Zc);return e._reactRootContainer=u,e[mo]=u.current,Vr(8===e.nodeType?e.parentNode:e),fc((function(){Gc(t,u,n,r)})),u}(n,t,e,o,r);return Wc(i)}Qc.prototype.render=$c.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Gc(e,t,null,null)},Qc.prototype.unmount=$c.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Gc(null,e,null,null)})),t[mo]=null}},Qc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&Ft(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(yt(t,1|n),oc(t,Ye()),0==(6&Ru)&&(Hu=Ye()+500,Ho()))}break;case 13:fc((function(){var t=_a(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Kc(e,1)}},Et=function(e){if(13===e.tag){var t=_a(e,134217728);null!==t&&rc(t,e,134217728,tc()),Kc(e,134217728)}},kt=function(e){if(13===e.tag){var t=nc(e),n=_a(e,t);null!==n&&rc(n,e,t,tc()),Kc(e,t)}},Ct=function(){return bt},xt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Ee=function(e,t,n){switch(t){case"input":if(X(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Eo(r);if(!o)throw Error(a(90));K(r),X(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Te=sc,Re=fc;var ts={usingClientEntryPoint:!1,Events:[wo,So,Eo,Ne,Le,sc]},ns={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rs={bundleType:ns.bundleType,version:ns.version,rendererPackageName:ns.rendererPackageName,rendererConfig:ns.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:ns.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var os=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!os.isDisabled&&os.supportsFiber)try{ot=os.inject(rs),at=os}catch(se){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ts,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Yc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Yc(e))throw Error(a(299));var n=!1,r="",o=qc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Uc(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Vr(8===e.nodeType?e.parentNode:e),new $c(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Xc(t))throw Error(a(200));return es(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Yc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=qc;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Hc(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Vr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qc(t)},t.render=function(e,t,n){if(!Xc(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xc(e))throw Error(a(40));return!!e._reactRootContainer&&(fc((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),u=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),s=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function g(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=g.prototype;var w=b.prototype=new y;w.constructor=b,m(w,g.prototype),w.isPureReactComponent=!0;var S=Array.isArray,E=Object.prototype.hasOwnProperty,k={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function x(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=t[o]);var u=arguments.length-2;if(1===u)a.children=r;else if(1<u){for(var c=Array(u),s=0;s<u;s++)c[s]=arguments[s+2];a.children=c}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===a[o]&&(a[o]=u[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:k.current}}function N(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var L=/\/+/g;function T(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case n:case r:u=!0}}if(u)return i=i(u=e),e=""===a?"."+T(u,0):a,S(i)?(o="",null!=e&&(o=e.replace(L,"$&/")+"/"),R(i,t,o,"",(function(e){return e}))):null!=i&&(N(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(L,"$&/")+"/")+e)),t.push(i)),1;if(u=0,a=""===a?".":a+":",S(e))for(var c=0;c<e.length;c++){var s=a+T(l=e[c],c);u+=R(l,t,o,s,i)}else if(s=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof s)for(e=s.call(e),c=0;!(l=e.next()).done;)u+=R(l=l.value,t,o,s=a+T(l,c++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return u}function _(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},I={transition:null},D={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:I,ReactCurrentOwner:k};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!N(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=s,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)E.call(t,c)&&!C.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=r;else if(1<c){u=Array(c);for(var s=0;s<c;s++)u[s]=arguments[s+2];o.children=u}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=x,t.createFactory=function(e){var t=x.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=N,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],c=l+1,s=e[c];if(0>a(u,n))c<o&&0>a(s,u)?(e[r]=s,e[c]=n,r=c):(e[r]=u,e[l]=n,r=l);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}var c=[],s=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,g="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(s);null!==t;){if(null===t.callback)o(s);else{if(!(t.startTime<=e))break;o(s),t.sortIndex=t.expirationTime,n(c,t)}t=r(s)}}function S(e){if(v=!1,w(e),!m)if(null!==r(c))m=!0,I(E);else{var t=r(s);null!==t&&D(S,t.startTime-e)}}function E(e,n){m=!1,v&&(v=!1,y(N),N=-1),h=!0;var a=p;try{for(w(n),d=r(c);null!==d&&(!(d.expirationTime>n)||e&&!R());){var i=d.callback;if("function"==typeof i){d.callback=null,p=d.priorityLevel;var l=i(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(c)&&o(c),w(n)}else o(c);d=r(c)}if(null!==d)var u=!0;else{var f=r(s);null!==f&&D(S,f.startTime-n),u=!1}return u}finally{d=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,C=!1,x=null,N=-1,L=5,T=-1;function R(){return!(t.unstable_now()-T<L)}function _(){if(null!==x){var e=t.unstable_now();T=e;var n=!0;try{n=x(!0,e)}finally{n?k():(C=!1,x=null)}}else C=!1}if("function"==typeof b)k=function(){b(_)};else if("undefined"!=typeof MessageChannel){var P=new MessageChannel,A=P.port2;P.port1.onmessage=_,k=function(){A.postMessage(null)}}else k=function(){g(_,0)};function I(e){x=e,C||(C=!0,k())}function D(e,n){N=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,I(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):L=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(s,e),null===r(c)&&e===r(s)&&(v?(y(N),N=-1):v=!0,D(S,a-i))):(e.sortIndex=l,n(c,e),m||h||(m=!0,I(E))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},967:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e="",t=0;t<arguments.length;t++){var n=arguments[t];n&&(e=i(e,a(n)))}return e}function a(e){if("string"==typeof e||"number"==typeof e)return e;if("object"!=typeof e)return"";if(Array.isArray(e))return o.apply(null,e);if(e.toString!==Object.prototype.toString&&!e.toString.toString().includes("[native code]"))return e.toString();var t="";for(var n in e)r.call(e,n)&&e[n]&&(t=i(t,n));return t}function i(e,t){return t?e?e+" "+t:e+t:e}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},582:(e,t,n)=>{"use strict";n.d(t,{Jh:()=>u,ZT:()=>o,_T:()=>i,mG:()=>l,pi:()=>a});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var a=function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};function i(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function l(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function l(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}u((r=r.apply(e,t||[])).next())}))}function u(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function l(l){return function(u){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,l[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&l[0]?r.return:l[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,l[1])).done)return o;switch(r=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return i.label++,{value:l[1],done:!1};case 5:i.label++,r=l[1],l=[0];continue;case 7:l=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){i=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){i.label=l[1];break}if(6===l[0]&&i.label<o[1]){i.label=o[1],o=l;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(l);break}o[2]&&i.ops.pop(),i.trys.pop();continue}l=t.call(e,i)}catch(e){l=[6,e],r=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,u])}}}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e].call(a.exports,a,a.exports,o),a.exports}o.m=n,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](e,t),t)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="webcam-pwa:",o.l=(n,r,a,i)=>{if(e[n])e[n].push(r);else{var l,u;if(void 0!==a)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var f=c[s];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+a){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,o.nc&&l.setAttribute("nonce",o.nc),l.setAttribute("data-webpack",t+a),l.src=n),e[n]=[r];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!e;)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,n)=>{var r=o.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var a=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=a);var i=o.p+o.u(t),l=new Error;o.l(i,(n=>{if(o.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var a=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+a+": "+i+")",l.name="ChunkLoadError",l.type=a,l.request=i,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,a,[i,l,u]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in l)o.o(l,r)&&(o.m[r]=l[r]);u&&u(o)}for(t&&t(n);c<i.length;c++)a=i[c],o.o(e,a)&&e[a]&&e[a][0](),e[a]=0},n=self.webpackChunkwebcam_pwa=self.webpackChunkwebcam_pwa||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=o(294),t=o(745),n=o(582),r=o(967),a=o.n(r),i={CENTER:"center",LEFT:"left",RIGHT:"right"},l={NONE:"none",PRIMARY:"primary",SUCCESS:"success",WARNING:"warning",DANGER:"danger"},u="bp5";"undefined"!=typeof BLUEPRINT_NAMESPACE?u=BLUEPRINT_NAMESPACE:"undefined"!=typeof REACT_APP_BLUEPRINT_NAMESPACE&&(u=REACT_APP_BLUEPRINT_NAMESPACE);var c="".concat(u,"-active"),s="".concat(u,"-align-left"),f="".concat(u,"-align-right"),d="".concat(u,"-compact"),p=("".concat(u,"-dark"),"".concat(u,"-disabled")),h="".concat(u,"-fill"),m=("".concat(u,"-fixed"),"".concat(u,"-fixed-top"),"".concat(u,"-inline")),v="".concat(u,"-interactive"),g="".concat(u,"-large"),y="".concat(u,"-loading"),b="".concat(u,"-minimal"),w="".concat(u,"-outlined"),S=("".concat(u,"-padded"),"".concat(u,"-multiline"),"".concat(u,"-read-only"),"".concat(u,"-round")),E="".concat(u,"-selected"),k="".concat(u,"-small"),C="".concat(u,"-vertical"),x=(ct("top"),ct("bottom"),ct("left"),ct("right"),it(0),it(1),it(2),it(3),it(4),ut(l.PRIMARY),ut(l.SUCCESS),ut(l.WARNING),ut(l.DANGER),"".concat(u,"-focus-disabled"),"".concat(u,"-focus-style-manager-ignore"),"".concat(u,"-ui-text"),"".concat(u,"-running-text"),"".concat(u,"-monospace-text"),"".concat(u,"-text-large"),"".concat(u,"-text-small"),"".concat(u,"-text-muted"),"".concat(u,"-text-disabled"),"".concat(u,"-text-overflow-ellipsis")),N="".concat(u,"-blockquote"),L="".concat(u,"-code"),T="".concat(u,"-code-block"),R="".concat(u,"-heading"),_="".concat(u,"-list"),P=("".concat(u,"-list-unstyled"),"".concat(u,"-rtl"),"".concat(u,"-alert")),A=("".concat(P,"-body"),"".concat(P,"-contents"),"".concat(P,"-footer"),"".concat(u,"-breadcrumb")),I=("".concat(A,"-current"),"".concat(A,"s"),"".concat(A,"s-collapsed"),"".concat(u,"-button")),D=("".concat(I,"-group"),"".concat(I,"-spinner")),O="".concat(I,"-text"),z="".concat(u,"-callout"),F=("".concat(z,"-has-body-content"),"".concat(z,"-icon"),"".concat(u,"-card")),M="".concat(u,"-control-card"),j="".concat(M,"-label"),B=("".concat(u,"-switch-control-card"),"".concat(u,"-checkbox-control-card"),"".concat(u,"-radio-control-card")),U="".concat(u,"-card-list"),V=("".concat(U,"-bordered"),"".concat(u,"-collapse")),H=("".concat(V,"-body"),"".concat(u,"-context-menu")),G=("".concat(H,"-virtual-target"),"".concat(H,"-popover"),"".concat(H,"-backdrop"),"".concat(u,"-control-group"),"".concat(u,"-dialog")),W="".concat(G,"-container"),J="".concat(G,"-header"),K=("".concat(G,"-body"),"".concat(G,"-body-scroll-container"),"".concat(G,"-close-button")),q=("".concat(G,"-footer"),"".concat(G,"-footer-fixed"),"".concat(G,"-footer-main-section"),"".concat(G,"-footer-actions"),"".concat(u,"-dialog-step")),$=("".concat(q,"-container"),"".concat(q,"-title"),"".concat(q,"-icon"),"".concat(q,"-viewed"),"".concat(u,"-divider")),Q="".concat(u,"-drawer"),Y=("".concat(Q,"-body"),"".concat(Q,"-footer"),"".concat(Q,"-header"),"".concat(u,"-editable-text")),X=("".concat(Y,"-content"),"".concat(Y,"-editing"),"".concat(Y,"-input"),"".concat(Y,"-placeholder"),"".concat(u,"-flex-expander")),Z=("".concat(u,"-html-select"),"".concat(u,"-select"),"".concat(u,"-html-table")),ee=("".concat(Z,"-bordered"),"".concat(Z,"-striped"),"".concat(u,"-input")),te=("".concat(ee,"-ghost"),"".concat(ee,"-group"),"".concat(ee,"-left-container"),"".concat(ee,"-action"),"".concat(u,"-resizable-input-span"),"".concat(u,"-text-area")),ne=("".concat(te,"-auto-resize"),"".concat(u,"-control")),re="".concat(ne,"-indicator"),oe="".concat(re,"-child"),ae="".concat(u,"-checkbox"),ie="".concat(u,"-radio"),le="".concat(u,"-radio-group"),ue="".concat(u,"-switch"),ce="".concat(ue,"-inner-text"),se=("".concat(u,"-file-input"),"".concat(u,"-file-input-has-selection"),"".concat(u,"-file-upload-input"),"".concat(u,"-file-upload-input-custom-text"),"".concat(u,"-key")),fe=("".concat(se,"-combo"),"".concat(u,"-modifier-key"),"".concat(u,"-hotkey")),de=("".concat(fe,"-label"),"".concat(fe,"-column"),"".concat(fe,"-dialog"),"".concat(u,"-label")),pe=("".concat(u,"-form-group"),"".concat(u,"-form-content"),"".concat(u,"-form-helper-text"),"".concat(u,"-form-group-sub-label"),"".concat(u,"-menu")),he="".concat(pe,"-item"),me=("".concat(he,"-is-selectable"),"".concat(he,"-selected-icon"),"".concat(he,"-icon"),"".concat(he,"-label"),"".concat(u,"-submenu")),ve=("".concat(me,"-icon"),"".concat(pe,"-divider"),"".concat(pe,"-header"),"".concat(u,"-multistep-dialog")),ge=("".concat(ve,"-panels"),"".concat(ve,"-left-panel"),"".concat(ve,"-right-panel"),"".concat(ve,"-nav-top"),"".concat(ve,"-nav-right"),"".concat(u,"-section")),ye=("".concat(ge,"-collapsed"),"".concat(ge,"-header")),be=("".concat(ye,"-left"),"".concat(ye,"-title"),"".concat(ye,"-sub-title"),"".concat(ye,"-divider"),"".concat(ye,"-tabs"),"".concat(ye,"-right"),"".concat(ge,"-card"),"".concat(u,"-navbar")),we=("".concat(be,"-group"),"".concat(be,"-heading"),"".concat(be,"-divider"),"".concat(u,"-non-ideal-state")),Se=("".concat(we,"-visual"),"".concat(we,"-text"),"".concat(u,"-numeric-input"),"".concat(u,"-overflow-list")),Ee=("".concat(Se,"-spacer"),"".concat(u,"-overlay")),ke="".concat(Ee,"-backdrop"),Ce=("".concat(Ee,"-container"),"".concat(Ee,"-content")),xe="".concat(Ee,"-inline"),Ne="".concat(Ee,"-open"),Le="".concat(Ee,"-scroll-container"),Te="".concat(Ee,"-start-focus-trap"),Re="".concat(Ee,"-end-focus-trap"),_e="".concat(u,"-panel-stack"),Pe=("".concat(_e,"-header"),"".concat(_e,"-header-back"),"".concat(_e,"-view"),"".concat(u,"-panel-stack2"),"".concat(_e,"-header"),"".concat(_e,"-header-back"),"".concat(_e,"-view"),"".concat(u,"-popover")),Ae=("".concat(Pe,"-arrow"),"".concat(Pe,"-backdrop"),"".concat(Pe,"-capturing-dismiss"),"".concat(Pe,"-content")),Ie=("".concat(Pe,"-placement"),"".concat(Ae,"-sizing"),"".concat(Pe,"-dismiss")),De=("".concat(Ie,"-override"),"".concat(Pe,"-match-target-width"),"".concat(Pe,"-open"),"".concat(Pe,"-popper-escaped"),"".concat(Pe,"-reference-hidden"),"".concat(Pe,"-target"),"".concat(Pe,"-transition-container"),"".concat(Pe,"-wrapper"),"".concat(u,"-progress-bar"),"".concat(u,"-progress-meter"),"".concat(u,"-no-stripes"),"".concat(u,"-no-animation"),"".concat(u,"-portal")),Oe=("".concat(u,"-skeleton"),"".concat(u,"-slider")),ze=("".concat(Oe,"-axis"),"".concat(Oe,"-handle"),"".concat(Oe,"-label"),"".concat(Oe,"-track"),"".concat(Oe,"-progress"),"".concat(u,"-start"),"".concat(u,"-end"),"".concat(u,"-spinner")),Fe="".concat(ze,"-animation"),Me="".concat(ze,"-head"),je="".concat(u,"-no-spin"),Be="".concat(ze,"-track"),Ue=("".concat(u,"-segmented-control"),"".concat(u,"-tab")),Ve="".concat(Ue,"-icon"),He="".concat(Ue,"-tag"),Ge="".concat(Ue,"-indicator"),We="".concat(Ge,"-wrapper"),Je="".concat(Ue,"-list"),Ke="".concat(Ue,"-panel"),qe="".concat(Ue,"s"),$e="".concat(u,"-tag"),Qe="".concat($e,"-remove"),Ye="".concat(u,"-tag-input"),Xe=("".concat(Ye,"-icon"),"".concat(Ye,"-values"),"".concat(u,"-toast")),Ze=("".concat(Xe,"-container"),"".concat(Xe,"-message"),"".concat(u,"-tooltip")),et=("".concat(Ze,"-indicator"),"".concat(u,"-tree"),"".concat(u,"-tree-node")),tt="".concat(et,"-caret"),nt=("".concat(tt,"-closed"),"".concat(tt,"-none"),"".concat(tt,"-open"),"".concat(et,"-content"),"".concat(et,"-expanded"),"".concat(et,"-icon"),"".concat(et,"-label"),"".concat(et,"-list"),"".concat(et,"-secondary-label"),"".concat(et,"-selected"),"".concat(u,"-tree-root"),"".concat(u,"-icon")),rt="".concat(nt,"-standard"),ot="".concat(nt,"-large");function at(e){switch(e){case i.LEFT:return s;case i.RIGHT:return f;default:return}}function it(e){if(void 0!==e)return"".concat(u,"-elevation-").concat(e)}function lt(e){if(null!=e)return 0===e.indexOf("".concat(u,"-icon-"))?e:"".concat(u,"-icon-").concat(e)}function ut(e){if(null!=e&&e!==l.NONE)return"".concat(u,"-intent-").concat(e.toLowerCase())}function ct(e){if(void 0!==e)return"".concat(u,"-position-").concat(e)}function st(e,t){var n;return null==e?document.activeElement:(null!==(n=e.getRootNode(t))&&void 0!==n?n:document).activeElement}function ft(e){return"Enter"===e.key||" "===e.key}function dt(e,t,n){if(null==e&&null==t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e)||Array.isArray(t))return!1;if(null!=n)return pt(e,t,n);var r=Object.keys(e),o=Object.keys(t);return pt(e,t,{include:r})&&pt(e,t,{include:o})}function pt(e,t,n){return function(e,t,n){if(function(e){return null!=e&&null!=e.include}(n))return n.include;if(function(e){return null!=e&&null!=e.exclude}(n)){var r=Object.keys(e),o=Object.keys(t),a=r.concat(o).reduce((function(e,t){return e[t]=!0,e}),{});return n.exclude.forEach((function(e){return delete a[e]})),Object.keys(a)}return[]}(e,t,n).every((function(n){return e.hasOwnProperty(n)===t.hasOwnProperty(n)&&e[n]===t[n]}))}var ht="Blueprint5",mt=["active","alignText","asyncControl","containerRef","current","elementRef","fill","icon","iconSize","inputClassName","inputRef","intent","inline","large","loading","leftElement","leftIcon","minimal","onRemove","outlined","panel","panelClassName","popoverProps","rightElement","rightIcon","round","size","small","tagName","text","textClassName"];function vt(e,t,r){return void 0===t&&(t=mt),void 0===r&&(r=!1),r&&(t=t.concat(mt)),t.reduce((function(e,t){return-1!==t.indexOf("-")||e.hasOwnProperty(t)&&delete e[t],e}),(0,n.pi)({},e))}var gt="[Blueprint]",yt=("".concat(gt," <Popover> requires renderTarget prop or a child element."),"".concat(gt,' <Popover hasBackdrop={true}> requires interactionKind="click".'),"".concat(gt," <Popover> supports only one child which is rendered as its target; additional children are ignored."),gt+" <Portal> context blueprintPortalClassName must be string"),bt=gt+" setting blueprintPortalClassName via legacy React context API is deprecated, use <PortalProvider> instead.",wt=gt+" <RadioGroup> children and options prop are mutually exclusive, with options taking priority.",St=gt+" <Spinner> Classes.SMALL/LARGE are ignored if size prop is set.",Et=gt+" <Dialog> iconName is ignored if title is omitted.",kt=gt+" <Dialog> isCloseButtonShown prop is ignored if title is omitted.";function Ct(e){return"undefined"!=typeof NODE_ENV&&NODE_ENV===e}var xt=new Map,Nt=function(e){function t(t){var n=e.call(this,t)||this;return n.timeoutIds=[],n.requestIds=[],n.clearTimeouts=function(){if(n.timeoutIds.length>0){for(var e=0,t=n.timeoutIds;e<t.length;e++){var r=t[e];window.clearTimeout(r)}n.timeoutIds=[]}},n.cancelAnimationFrames=function(){if(n.requestIds.length>0){for(var e=0,t=n.requestIds;e<t.length;e++){var r=t[e];window.cancelAnimationFrame(r)}n.requestIds=[]}},Ct("production")||n.validateProps(n.props),n}return(0,n.ZT)(t,e),t.prototype.componentDidUpdate=function(e,t,n){Ct("production")||this.validateProps(this.props)},t.prototype.componentWillUnmount=function(){this.clearTimeouts(),this.cancelAnimationFrames()},t.prototype.requestAnimationFrame=function(e){var t=window.requestAnimationFrame(e);return this.requestIds.push(t),function(){return window.cancelAnimationFrame(t)}},t.prototype.setTimeout=function(e,t){var n=window.setTimeout(e,t);return this.timeoutIds.push(n),function(){return window.clearTimeout(n)}},t.prototype.validateProps=function(e){},t}(e.PureComponent);function Lt(e,t){return void 0===t&&(t=!1),null==e||""===e||!1===e||!t&&Array.isArray(e)&&(0===e.length||e.every((function(e){return Lt(e,!0)})))}function Tt(e,t){return null!=e&&null!=e.type&&null!=e.type.displayName&&e.type.displayName===t.displayName}var Rt,_t,Pt,At,It=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(r,t),r.prototype.render=function(){var t=this.props,n=t.className,r=t.panel;return e.createElement("div",{className:a()(Ke,n),role:"tablist"},r)},r.defaultProps={disabled:!1},r.displayName="".concat(ht,".Tab"),r}(Nt),Dt=o(389),Ot=o(764),zt=o(734);!function(e){e.AddClip="add-clip",e.AddColumnLeft="add-column-left",e.AddColumnRight="add-column-right",e.AddLocation="add-location",e.AddRowBottom="add-row-bottom",e.AddRowTop="add-row-top",e.AddToArtifact="add-to-artifact",e.AddToFolder="add-to-folder",e.Add="add",e.AimpointsTarget="aimpoints-target",e.Airplane="airplane",e.AlignCenter="align-center",e.AlignJustify="align-justify",e.AlignLeft="align-left",e.AlignRight="align-right",e.AlignmentBottom="alignment-bottom",e.AlignmentHorizontalCenter="alignment-horizontal-center",e.AlignmentLeft="alignment-left",e.AlignmentRight="alignment-right",e.AlignmentTop="alignment-top",e.AlignmentVerticalCenter="alignment-vertical-center",e.Ammunition="ammunition",e.Anchor="anchor",e.Annotation="annotation",e.Antenna="antenna",e.AppHeader="app-header",e.Application="application",e.Applications="applications",e.Archive="archive",e.AreaOfInterest="area-of-interest",e.ArrayBoolean="array-boolean",e.ArrayDate="array-date",e.ArrayFloatingPoint="array-floating-point",e.ArrayNumeric="array-numeric",e.ArrayString="array-string",e.ArrayTimestamp="array-timestamp",e.Array="array",e.ArrowBottomLeft="arrow-bottom-left",e.ArrowBottomRight="arrow-bottom-right",e.ArrowDown="arrow-down",e.ArrowLeft="arrow-left",e.ArrowRight="arrow-right",e.ArrowTopLeft="arrow-top-left",e.ArrowTopRight="arrow-top-right",e.ArrowUp="arrow-up",e.ArrowsHorizontal="arrows-horizontal",e.ArrowsVertical="arrows-vertical",e.Asterisk="asterisk",e.At="at",e.AutomaticUpdates="automatic-updates",e.Axle="axle",e.Backlink="backlink",e.Badge="badge",e.BanCircle="ban-circle",e.BankAccount="bank-account",e.Barcode="barcode",e.Blank="blank",e.BlockedPerson="blocked-person",e.Bold="bold",e.Book="book",e.Bookmark="bookmark",e.Box="box",e.Briefcase="briefcase",e.BringData="bring-data",e.Bug="bug",e.Buggy="buggy",e.Build="build",e.Calculator="calculator",e.Calendar="calendar",e.Camera="camera",e.CaretDown="caret-down",e.CaretLeft="caret-left",e.CaretRight="caret-right",e.CaretUp="caret-up",e.CargoShip="cargo-ship",e.CellTower="cell-tower",e.Changes="changes",e.Chart="chart",e.Chat="chat",e.ChevronBackward="chevron-backward",e.ChevronDown="chevron-down",e.ChevronForward="chevron-forward",e.ChevronLeft="chevron-left",e.ChevronRight="chevron-right",e.ChevronUp="chevron-up",e.CircleArrowDown="circle-arrow-down",e.CircleArrowLeft="circle-arrow-left",e.CircleArrowRight="circle-arrow-right",e.CircleArrowUp="circle-arrow-up",e.Circle="circle",e.Citation="citation",e.Clean="clean",e.Clip="clip",e.Clipboard="clipboard",e.CloudDownload="cloud-download",e.CloudUpload="cloud-upload",e.Cloud="cloud",e.CodeBlock="code-block",e.Code="code",e.Cog="cog",e.CollapseAll="collapse-all",e.ColorFill="color-fill",e.ColumnLayout="column-layout",e.Comment="comment",e.Comparison="comparison",e.Compass="compass",e.Compressed="compressed",e.Confirm="confirm",e.Console="console",e.Contrast="contrast",e.Control="control",e.CreditCard="credit-card",e.CrossCircle="cross-circle",e.Cross="cross",e.Crown="crown",e.CubeAdd="cube-add",e.CubeRemove="cube-remove",e.Cube="cube",e.CurvedRangeChart="curved-range-chart",e.Cut="cut",e.Cycle="cycle",e.Dashboard="dashboard",e.DataConnection="data-connection",e.DataLineage="data-lineage",e.Database="database",e.Delete="delete",e.Delta="delta",e.DeriveColumn="derive-column",e.Desktop="desktop",e.Detection="detection",e.Diagnosis="diagnosis",e.DiagramTree="diagram-tree",e.DirectionLeft="direction-left",e.DirectionRight="direction-right",e.Disable="disable",e.Divide="divide",e.DocumentOpen="document-open",e.DocumentShare="document-share",e.Document="document",e.Dollar="dollar",e.Dot="dot",e.DoubleCaretHorizontal="double-caret-horizontal",e.DoubleCaretVertical="double-caret-vertical",e.DoubleChevronDown="double-chevron-down",e.DoubleChevronLeft="double-chevron-left",e.DoubleChevronRight="double-chevron-right",e.DoubleChevronUp="double-chevron-up",e.DoughnutChart="doughnut-chart",e.Download="download",e.DragHandleHorizontal="drag-handle-horizontal",e.DragHandleVertical="drag-handle-vertical",e.Draw="draw",e.DrawerLeftFilled="drawer-left-filled",e.DrawerLeft="drawer-left",e.DrawerRightFilled="drawer-right-filled",e.DrawerRight="drawer-right",e.DriveTime="drive-time",e.Duplicate="duplicate",e.Edit="edit",e.Eject="eject",e.Emoji="emoji",e.Endorsed="endorsed",e.Envelope="envelope",e.Equals="equals",e.Eraser="eraser",e.Error="error",e.Euro="euro",e.Exchange="exchange",e.ExcludeRow="exclude-row",e.ExpandAll="expand-all",e.Explain="explain",e.Export="export",e.EyeOff="eye-off",e.EyeOn="eye-on",e.EyeOpen="eye-open",e.FastBackward="fast-backward",e.FastForward="fast-forward",e.FeedSubscribed="feed-subscribed",e.Feed="feed",e.Film="film",e.FilterKeep="filter-keep",e.FilterList="filter-list",e.FilterOpen="filter-open",e.FilterRemove="filter-remove",e.Filter="filter",e.Flag="flag",e.Flame="flame",e.Flash="flash",e.FloatingPoint="floating-point",e.FloppyDisk="floppy-disk",e.FlowBranch="flow-branch",e.FlowEnd="flow-end",e.FlowLinear="flow-linear",e.FlowReviewBranch="flow-review-branch",e.FlowReview="flow-review",e.Flows="flows",e.FolderClose="folder-close",e.FolderNew="folder-new",e.FolderOpen="folder-open",e.FolderSharedOpen="folder-shared-open",e.FolderShared="folder-shared",e.Follower="follower",e.Following="following",e.Font="font",e.Fork="fork",e.Form="form",e.Fuel="fuel",e.FullCircle="full-circle",e.FullStackedChart="full-stacked-chart",e.Fullscreen="fullscreen",e.Function="function",e.GanttChart="gantt-chart",e.Generate="generate",e.Geofence="geofence",e.Geolocation="geolocation",e.Geosearch="geosearch",e.Geotime="geotime",e.GitBranch="git-branch",e.GitCommit="git-commit",e.GitMerge="git-merge",e.GitNewBranch="git-new-branch",e.GitPull="git-pull",e.GitPush="git-push",e.GitRepo="git-repo",e.Glass="glass",e.GlobeNetwork="globe-network",e.Globe="globe",e.GraphRemove="graph-remove",e.Graph="graph",e.GreaterThanOrEqualTo="greater-than-or-equal-to",e.GreaterThan="greater-than",e.GridView="grid-view",e.Grid="grid",e.GroupItem="group-item",e.GroupObjects="group-objects",e.GroupedBarChart="grouped-bar-chart",e.HandDown="hand-down",e.HandLeft="hand-left",e.HandRight="hand-right",e.HandUp="hand-up",e.Hand="hand",e.Hat="hat",e.HeaderOne="header-one",e.HeaderThree="header-three",e.HeaderTwo="header-two",e.Header="header",e.Headset="headset",e.HeartBroken="heart-broken",e.Heart="heart",e.HeatGrid="heat-grid",e.Heatmap="heatmap",e.Helicopter="helicopter",e.Help="help",e.HelperManagement="helper-management",e.HighPriority="high-priority",e.HighVoltagePole="high-voltage-pole",e.Highlight="highlight",e.History="history",e.Home="home",e.HorizontalBarChartAsc="horizontal-bar-chart-asc",e.HorizontalBarChartDesc="horizontal-bar-chart-desc",e.HorizontalBarChart="horizontal-bar-chart",e.HorizontalDistribution="horizontal-distribution",e.HorizontalInbetween="horizontal-inbetween",e.Hurricane="hurricane",e.IdNumber="id-number",e.ImageRotateLeft="image-rotate-left",e.ImageRotateRight="image-rotate-right",e.Import="import",e.InboxFiltered="inbox-filtered",e.InboxGeo="inbox-geo",e.InboxSearch="inbox-search",e.InboxUpdate="inbox-update",e.Inbox="inbox",e.InfoSign="info-sign",e.Inheritance="inheritance",e.InheritedGroup="inherited-group",e.InnerJoin="inner-join",e.Input="input",e.Insert="insert",e.Intelligence="intelligence",e.Intersection="intersection",e.IpAddress="ip-address",e.IssueClosed="issue-closed",e.IssueNew="issue-new",e.Issue="issue",e.Italic="italic",e.JoinTable="join-table",e.KeyBackspace="key-backspace",e.KeyCommand="key-command",e.KeyControl="key-control",e.KeyDelete="key-delete",e.KeyEnter="key-enter",e.KeyEscape="key-escape",e.KeyOption="key-option",e.KeyShift="key-shift",e.KeyTab="key-tab",e.Key="key",e.KnownVehicle="known-vehicle",e.LabTest="lab-test",e.Label="label",e.LayerOutline="layer-outline",e.Layer="layer",e.Layers="layers",e.LayoutAuto="layout-auto",e.LayoutBalloon="layout-balloon",e.LayoutCircle="layout-circle",e.LayoutGrid="layout-grid",e.LayoutGroupBy="layout-group-by",e.LayoutHierarchy="layout-hierarchy",e.LayoutLinear="layout-linear",e.LayoutSkewGrid="layout-skew-grid",e.LayoutSortedClusters="layout-sorted-clusters",e.Layout="layout",e.Learning="learning",e.LeftJoin="left-join",e.LengthenText="lengthen-text",e.LessThanOrEqualTo="less-than-or-equal-to",e.LessThan="less-than",e.Lifesaver="lifesaver",e.Lightbulb="lightbulb",e.Lightning="lightning",e.Link="link",e.ListColumns="list-columns",e.ListDetailView="list-detail-view",e.List="list",e.Locate="locate",e.Lock="lock",e.Locomotive="locomotive",e.LogIn="log-in",e.LogOut="log-out",e.LowVoltagePole="low-voltage-pole",e.Manual="manual",e.ManuallyEnteredData="manually-entered-data",e.ManyToMany="many-to-many",e.ManyToOne="many-to-one",e.MapCreate="map-create",e.MapMarker="map-marker",e.Map="map",e.Maximize="maximize",e.Media="media",e.MenuClosed="menu-closed",e.MenuOpen="menu-open",e.Menu="menu",e.MergeColumns="merge-columns",e.MergeLinks="merge-links",e.Microphone="microphone",e.Minimize="minimize",e.Minus="minus",e.MobilePhone="mobile-phone",e.MobileVideo="mobile-video",e.ModalFilled="modal-filled",e.Modal="modal",e.Model="model",e.Moon="moon",e.More="more",e.Mountain="mountain",e.Move="move",e.Mugshot="mugshot",e.MultiSelect="multi-select",e.Music="music",e.Nest="nest",e.NewDrawing="new-drawing",e.NewGridItem="new-grid-item",e.NewLayer="new-layer",e.NewLayers="new-layers",e.NewLink="new-link",e.NewObject="new-object",e.NewPerson="new-person",e.NewPrescription="new-prescription",e.NewShield="new-shield",e.NewTextBox="new-text-box",e.Ninja="ninja",e.NotEqualTo="not-equal-to",e.NotificationsSnooze="notifications-snooze",e.NotificationsUpdated="notifications-updated",e.Notifications="notifications",e.NumberedList="numbered-list",e.Numerical="numerical",e.Office="office",e.Offline="offline",e.OilField="oil-field",e.OneColumn="one-column",e.OneToMany="one-to-many",e.OneToOne="one-to-one",e.OpenApplication="open-application",e.Outdated="outdated",e.PageLayout="page-layout",e.PanelStats="panel-stats",e.PanelTable="panel-table",e.Paperclip="paperclip",e.Paragraph="paragraph",e.PasteVariable="paste-variable",e.PathSearch="path-search",e.Path="path",e.Pause="pause",e.People="people",e.Percentage="percentage",e.Person="person",e.PhoneCall="phone-call",e.PhoneForward="phone-forward",e.Phone="phone",e.PieChart="pie-chart",e.Pin="pin",e.PivotTable="pivot-table",e.Pivot="pivot",e.Play="play",e.Playbook="playbook",e.Plus="plus",e.PolygonFilter="polygon-filter",e.Power="power",e.PredictiveAnalysis="predictive-analysis",e.Prescription="prescription",e.Presentation="presentation",e.Print="print",e.Projects="projects",e.Properties="properties",e.Property="property",e.PublishFunction="publish-function",e.Pulse="pulse",e.Rain="rain",e.Random="random",e.Record="record",e.RectHeight="rect-height",e.RectWidth="rect-width",e.Rectangle="rectangle",e.Redo="redo",e.Refresh="refresh",e.Regex="regex",e.RegressionChart="regression-chart",e.RemoveColumnLeft="remove-column-left",e.RemoveColumnRight="remove-column-right",e.RemoveColumn="remove-column",e.RemoveRowBottom="remove-row-bottom",e.RemoveRowTop="remove-row-top",e.Remove="remove",e.Repeat="repeat",e.Reset="reset",e.Resolve="resolve",e.Rig="rig",e.RightJoin="right-join",e.Ring="ring",e.RocketSlant="rocket-slant",e.Rocket="rocket",e.RotateDocument="rotate-document",e.RotatePage="rotate-page",e.Route="route",e.Satellite="satellite",e.Saved="saved",e.ScatterPlot="scatter-plot",e.SearchAround="search-around",e.SearchTemplate="search-template",e.SearchText="search-text",e.Search="search",e.SegmentedControl="segmented-control",e.Select="select",e.Selection="selection",e.SendMessage="send-message",e.SendToGraph="send-to-graph",e.SendToMap="send-to-map",e.SendTo="send-to",e.Sensor="sensor",e.SeriesAdd="series-add",e.SeriesConfiguration="series-configuration",e.SeriesDerived="series-derived",e.SeriesFiltered="series-filtered",e.SeriesSearch="series-search",e.Settings="settings",e.Shapes="shapes",e.Share="share",e.SharedFilter="shared-filter",e.Shield="shield",e.Ship="ship",e.Shop="shop",e.ShoppingCart="shopping-cart",e.ShortenText="shorten-text",e.SignalSearch="signal-search",e.SimCard="sim-card",e.Slash="slash",e.SmallCross="small-cross",e.SmallInfoSign="small-info-sign",e.SmallMinus="small-minus",e.SmallPlus="small-plus",e.SmallSquare="small-square",e.SmallTick="small-tick",e.Snowflake="snowflake",e.SocialMedia="social-media",e.SortAlphabeticalDesc="sort-alphabetical-desc",e.SortAlphabetical="sort-alphabetical",e.SortAsc="sort-asc",e.SortDesc="sort-desc",e.SortNumericalDesc="sort-numerical-desc",e.SortNumerical="sort-numerical",e.Sort="sort",e.SpellCheck="spell-check",e.SplitColumns="split-columns",e.Square="square",e.StackedChart="stacked-chart",e.StadiumGeometry="stadium-geometry",e.StarEmpty="star-empty",e.Star="star",e.StepBackward="step-backward",e.StepChart="step-chart",e.StepForward="step-forward",e.Stop="stop",e.Stopwatch="stopwatch",e.Strikethrough="strikethrough",e.Style="style",e.Subscript="subscript",e.Superscript="superscript",e.SwapHorizontal="swap-horizontal",e.SwapVertical="swap-vertical",e.Switch="switch",e.SymbolCircle="symbol-circle",e.SymbolCross="symbol-cross",e.SymbolDiamond="symbol-diamond",e.SymbolRectangle="symbol-rectangle",e.SymbolSquare="symbol-square",e.SymbolTriangleDown="symbol-triangle-down",e.SymbolTriangleUp="symbol-triangle-up",e.Syringe="syringe",e.Tag="tag",e.TakeAction="take-action",e.Tank="tank",e.Target="target",e.Taxi="taxi",e.Temperature="temperature",e.TextHighlight="text-highlight",e.ThDerived="th-derived",e.ThDisconnect="th-disconnect",e.ThFiltered="th-filtered",e.ThList="th-list",e.Th="th",e.ThirdParty="third-party",e.ThumbsDown="thumbs-down",e.ThumbsUp="thumbs-up",e.TickCircle="tick-circle",e.Tick="tick",e.Time="time",e.TimelineAreaChart="timeline-area-chart",e.TimelineBarChart="timeline-bar-chart",e.TimelineEvents="timeline-events",e.TimelineLineChart="timeline-line-chart",e.Tint="tint",e.Torch="torch",e.Tractor="tractor",e.Train="train",e.Translate="translate",e.Trash="trash",e.Tree="tree",e.TrendingDown="trending-down",e.TrendingUp="trending-up",e.Truck="truck",e.TwoColumns="two-columns",e.Unarchive="unarchive",e.Underline="underline",e.Undo="undo",e.UngroupObjects="ungroup-objects",e.UnknownVehicle="unknown-vehicle",e.Unlink="unlink",e.Unlock="unlock",e.Unpin="unpin",e.Unresolve="unresolve",e.Updated="updated",e.Upload="upload",e.User="user",e.Variable="variable",e.VerticalBarChartAsc="vertical-bar-chart-asc",e.VerticalBarChartDesc="vertical-bar-chart-desc",e.VerticalDistribution="vertical-distribution",e.VerticalInbetween="vertical-inbetween",e.Video="video",e.Virus="virus",e.VolumeDown="volume-down",e.VolumeOff="volume-off",e.VolumeUp="volume-up",e.Walk="walk",e.WarningSign="warning-sign",e.WaterfallChart="waterfall-chart",e.Waves="waves",e.WidgetButton="widget-button",e.WidgetFooter="widget-footer",e.WidgetHeader="widget-header",e.Widget="widget",e.Wind="wind",e.Wrench="wrench",e.ZoomIn="zoom-in",e.ZoomOut="zoom-out",e.ZoomToFit="zoom-to-fit"}(_t||(_t={})),(Rt={})[_t.AddClip]="61697",Rt[_t.AddColumnLeft]="61698",Rt[_t.AddColumnRight]="61699",Rt[_t.AddLocation]="61700",Rt[_t.AddRowBottom]="61701",Rt[_t.AddRowTop]="61702",Rt[_t.AddToArtifact]="61703",Rt[_t.AddToFolder]="61704",Rt[_t.Add]="61705",Rt[_t.AimpointsTarget]="62261",Rt[_t.Airplane]="61706",Rt[_t.AlignCenter]="61707",Rt[_t.AlignJustify]="61708",Rt[_t.AlignLeft]="61709",Rt[_t.AlignRight]="61710",Rt[_t.AlignmentBottom]="61711",Rt[_t.AlignmentHorizontalCenter]="61712",Rt[_t.AlignmentLeft]="61713",Rt[_t.AlignmentRight]="61714",Rt[_t.AlignmentTop]="61715",Rt[_t.AlignmentVerticalCenter]="61716",Rt[_t.Ammunition]="62274",Rt[_t.Anchor]="62256",Rt[_t.Annotation]="61717",Rt[_t.Antenna]="61718",Rt[_t.AppHeader]="61719",Rt[_t.Application]="61720",Rt[_t.Applications]="61721",Rt[_t.Archive]="61722",Rt[_t.AreaOfInterest]="61723",Rt[_t.ArrayBoolean]="61724",Rt[_t.ArrayDate]="61725",Rt[_t.ArrayFloatingPoint]="62253",Rt[_t.ArrayNumeric]="61726",Rt[_t.ArrayString]="61727",Rt[_t.ArrayTimestamp]="61728",Rt[_t.Array]="61729",Rt[_t.ArrowBottomLeft]="61730",Rt[_t.ArrowBottomRight]="61731",Rt[_t.ArrowDown]="61732",Rt[_t.ArrowLeft]="61733",Rt[_t.ArrowRight]="61734",Rt[_t.ArrowTopLeft]="61735",Rt[_t.ArrowTopRight]="61736",Rt[_t.ArrowUp]="61737",Rt[_t.ArrowsHorizontal]="61738",Rt[_t.ArrowsVertical]="61739",Rt[_t.Asterisk]="61740",Rt[_t.At]="62257",Rt[_t.AutomaticUpdates]="61741",Rt[_t.Axle]="62264",Rt[_t.Backlink]="61742",Rt[_t.Badge]="61743",Rt[_t.BanCircle]="61744",Rt[_t.BankAccount]="61745",Rt[_t.Barcode]="61746",Rt[_t.Blank]="61747",Rt[_t.BlockedPerson]="61748",Rt[_t.Bold]="61749",Rt[_t.Book]="61750",Rt[_t.Bookmark]="61751",Rt[_t.Box]="61752",Rt[_t.Briefcase]="61753",Rt[_t.BringData]="61754",Rt[_t.Bug]="62254",Rt[_t.Buggy]="61755",Rt[_t.Build]="61756",Rt[_t.Calculator]="61757",Rt[_t.Calendar]="61758",Rt[_t.Camera]="61759",Rt[_t.CaretDown]="61760",Rt[_t.CaretLeft]="61761",Rt[_t.CaretRight]="61762",Rt[_t.CaretUp]="61763",Rt[_t.CargoShip]="61764",Rt[_t.CellTower]="61765",Rt[_t.Changes]="61766",Rt[_t.Chart]="61767",Rt[_t.Chat]="61768",Rt[_t.ChevronBackward]="61769",Rt[_t.ChevronDown]="61770",Rt[_t.ChevronForward]="61771",Rt[_t.ChevronLeft]="61772",Rt[_t.ChevronRight]="61773",Rt[_t.ChevronUp]="61774",Rt[_t.CircleArrowDown]="61775",Rt[_t.CircleArrowLeft]="61776",Rt[_t.CircleArrowRight]="61777",Rt[_t.CircleArrowUp]="61778",Rt[_t.Circle]="61779",Rt[_t.Citation]="61780",Rt[_t.Clean]="61781",Rt[_t.Clip]="61782",Rt[_t.Clipboard]="61783",Rt[_t.CloudDownload]="61784",Rt[_t.CloudUpload]="61785",Rt[_t.Cloud]="61786",Rt[_t.CodeBlock]="61787",Rt[_t.Code]="61788",Rt[_t.Cog]="61789",Rt[_t.CollapseAll]="61790",Rt[_t.ColorFill]="62248",Rt[_t.ColumnLayout]="61791",Rt[_t.Comment]="61792",Rt[_t.Comparison]="61793",Rt[_t.Compass]="61794",Rt[_t.Compressed]="61795",Rt[_t.Confirm]="61796",Rt[_t.Console]="61797",Rt[_t.Contrast]="61798",Rt[_t.Control]="61799",Rt[_t.CreditCard]="61800",Rt[_t.CrossCircle]="62262",Rt[_t.Cross]="61801",Rt[_t.Crown]="61802",Rt[_t.CubeAdd]="61803",Rt[_t.CubeRemove]="61804",Rt[_t.Cube]="61805",Rt[_t.CurvedRangeChart]="61806",Rt[_t.Cut]="61807",Rt[_t.Cycle]="61808",Rt[_t.Dashboard]="61809",Rt[_t.DataConnection]="61810",Rt[_t.DataLineage]="61811",Rt[_t.Database]="61812",Rt[_t.Delete]="61813",Rt[_t.Delta]="61814",Rt[_t.DeriveColumn]="61815",Rt[_t.Desktop]="61816",Rt[_t.Detection]="62273",Rt[_t.Diagnosis]="61817",Rt[_t.DiagramTree]="61818",Rt[_t.DirectionLeft]="61819",Rt[_t.DirectionRight]="61820",Rt[_t.Disable]="61821",Rt[_t.Divide]="62247",Rt[_t.DocumentOpen]="61822",Rt[_t.DocumentShare]="61823",Rt[_t.Document]="61824",Rt[_t.Dollar]="61825",Rt[_t.Dot]="61826",Rt[_t.DoubleCaretHorizontal]="61827",Rt[_t.DoubleCaretVertical]="61828",Rt[_t.DoubleChevronDown]="61829",Rt[_t.DoubleChevronLeft]="61830",Rt[_t.DoubleChevronRight]="61831",Rt[_t.DoubleChevronUp]="61832",Rt[_t.DoughnutChart]="61833",Rt[_t.Download]="61834",Rt[_t.DragHandleHorizontal]="61835",Rt[_t.DragHandleVertical]="61836",Rt[_t.Draw]="61837",Rt[_t.DrawerLeftFilled]="61838",Rt[_t.DrawerLeft]="61839",Rt[_t.DrawerRightFilled]="61840",Rt[_t.DrawerRight]="61841",Rt[_t.DriveTime]="61842",Rt[_t.Duplicate]="61843",Rt[_t.Edit]="61844",Rt[_t.Eject]="61845",Rt[_t.Emoji]="61846",Rt[_t.Endorsed]="61847",Rt[_t.Envelope]="61848",Rt[_t.Equals]="61849",Rt[_t.Eraser]="61850",Rt[_t.Error]="61851",Rt[_t.Euro]="61852",Rt[_t.Exchange]="61853",Rt[_t.ExcludeRow]="61854",Rt[_t.ExpandAll]="61855",Rt[_t.Explain]="62285",Rt[_t.Export]="61856",Rt[_t.EyeOff]="61857",Rt[_t.EyeOn]="61858",Rt[_t.EyeOpen]="61859",Rt[_t.FastBackward]="61860",Rt[_t.FastForward]="61861",Rt[_t.FeedSubscribed]="61862",Rt[_t.Feed]="61863",Rt[_t.Film]="61864",Rt[_t.FilterKeep]="61865",Rt[_t.FilterList]="61866",Rt[_t.FilterOpen]="61867",Rt[_t.FilterRemove]="61868",Rt[_t.Filter]="61869",Rt[_t.Flag]="61870",Rt[_t.Flame]="61871",Rt[_t.Flash]="61872",Rt[_t.FloatingPoint]="62252",Rt[_t.FloppyDisk]="61873",Rt[_t.FlowBranch]="61874",Rt[_t.FlowEnd]="61875",Rt[_t.FlowLinear]="61876",Rt[_t.FlowReviewBranch]="61877",Rt[_t.FlowReview]="61878",Rt[_t.Flows]="61879",Rt[_t.FolderClose]="61880",Rt[_t.FolderNew]="61881",Rt[_t.FolderOpen]="61882",Rt[_t.FolderSharedOpen]="61883",Rt[_t.FolderShared]="61884",Rt[_t.Follower]="61885",Rt[_t.Following]="61886",Rt[_t.Font]="61887",Rt[_t.Fork]="61888",Rt[_t.Form]="61889",Rt[_t.Fuel]="62243",Rt[_t.FullCircle]="61890",Rt[_t.FullStackedChart]="61891",Rt[_t.Fullscreen]="61892",Rt[_t.Function]="61893",Rt[_t.GanttChart]="61894",Rt[_t.Generate]="62284",Rt[_t.Geofence]="61895",Rt[_t.Geolocation]="61896",Rt[_t.Geosearch]="61897",Rt[_t.Geotime]="62276",Rt[_t.GitBranch]="61898",Rt[_t.GitCommit]="61899",Rt[_t.GitMerge]="61900",Rt[_t.GitNewBranch]="61901",Rt[_t.GitPull]="61902",Rt[_t.GitPush]="61903",Rt[_t.GitRepo]="61904",Rt[_t.Glass]="61905",Rt[_t.GlobeNetwork]="61906",Rt[_t.Globe]="61907",Rt[_t.GraphRemove]="61908",Rt[_t.Graph]="61909",Rt[_t.GreaterThanOrEqualTo]="61910",Rt[_t.GreaterThan]="61911",Rt[_t.GridView]="61912",Rt[_t.Grid]="61913",Rt[_t.GroupItem]="62282",Rt[_t.GroupObjects]="61914",Rt[_t.GroupedBarChart]="61915",Rt[_t.HandDown]="61916",Rt[_t.HandLeft]="61917",Rt[_t.HandRight]="61918",Rt[_t.HandUp]="61919",Rt[_t.Hand]="61920",Rt[_t.Hat]="61921",Rt[_t.HeaderOne]="61922",Rt[_t.HeaderThree]="61923",Rt[_t.HeaderTwo]="61924",Rt[_t.Header]="61925",Rt[_t.Headset]="61926",Rt[_t.HeartBroken]="61927",Rt[_t.Heart]="61928",Rt[_t.HeatGrid]="61929",Rt[_t.Heatmap]="61930",Rt[_t.Helicopter]="61931",Rt[_t.Help]="61932",Rt[_t.HelperManagement]="61933",Rt[_t.HighPriority]="61934",Rt[_t.HighVoltagePole]="62259",Rt[_t.Highlight]="61935",Rt[_t.History]="61936",Rt[_t.Home]="61937",Rt[_t.HorizontalBarChartAsc]="61938",Rt[_t.HorizontalBarChartDesc]="61939",Rt[_t.HorizontalBarChart]="61940",Rt[_t.HorizontalDistribution]="61941",Rt[_t.HorizontalInbetween]="62249",Rt[_t.Hurricane]="61942",Rt[_t.IdNumber]="61943",Rt[_t.ImageRotateLeft]="61944",Rt[_t.ImageRotateRight]="61945",Rt[_t.Import]="61946",Rt[_t.InboxFiltered]="61947",Rt[_t.InboxGeo]="61948",Rt[_t.InboxSearch]="61949",Rt[_t.InboxUpdate]="61950",Rt[_t.Inbox]="61951",Rt[_t.InfoSign]="61952",Rt[_t.Inheritance]="61953",Rt[_t.InheritedGroup]="61954",Rt[_t.InnerJoin]="61955",Rt[_t.Input]="62283",Rt[_t.Insert]="61956",Rt[_t.Intelligence]="62263",Rt[_t.Intersection]="61957",Rt[_t.IpAddress]="61958",Rt[_t.IssueClosed]="61959",Rt[_t.IssueNew]="61960",Rt[_t.Issue]="61961",Rt[_t.Italic]="61962",Rt[_t.JoinTable]="61963",Rt[_t.KeyBackspace]="61964",Rt[_t.KeyCommand]="61965",Rt[_t.KeyControl]="61966",Rt[_t.KeyDelete]="61967",Rt[_t.KeyEnter]="61968",Rt[_t.KeyEscape]="61969",Rt[_t.KeyOption]="61970",Rt[_t.KeyShift]="61971",Rt[_t.KeyTab]="61972",Rt[_t.Key]="61973",Rt[_t.KnownVehicle]="61974",Rt[_t.LabTest]="61975",Rt[_t.Label]="61976",Rt[_t.LayerOutline]="61977",Rt[_t.Layer]="61978",Rt[_t.Layers]="61979",Rt[_t.LayoutAuto]="61980",Rt[_t.LayoutBalloon]="61981",Rt[_t.LayoutCircle]="61982",Rt[_t.LayoutGrid]="61983",Rt[_t.LayoutGroupBy]="61984",Rt[_t.LayoutHierarchy]="61985",Rt[_t.LayoutLinear]="61986",Rt[_t.LayoutSkewGrid]="61987",Rt[_t.LayoutSortedClusters]="61988",Rt[_t.Layout]="61989",Rt[_t.Learning]="61990",Rt[_t.LeftJoin]="61991",Rt[_t.LengthenText]="62270",Rt[_t.LessThanOrEqualTo]="61992",Rt[_t.LessThan]="61993",Rt[_t.Lifesaver]="61994",Rt[_t.Lightbulb]="61995",Rt[_t.Lightning]="61996",Rt[_t.Link]="61997",Rt[_t.ListColumns]="61998",Rt[_t.ListDetailView]="61999",Rt[_t.List]="62000",Rt[_t.Locate]="62001",Rt[_t.Lock]="62002",Rt[_t.Locomotive]="62267",Rt[_t.LogIn]="62003",Rt[_t.LogOut]="62004",Rt[_t.LowVoltagePole]="62258",Rt[_t.Manual]="62005",Rt[_t.ManuallyEnteredData]="62006",Rt[_t.ManyToMany]="62007",Rt[_t.ManyToOne]="62008",Rt[_t.MapCreate]="62009",Rt[_t.MapMarker]="62010",Rt[_t.Map]="62011",Rt[_t.Maximize]="62012",Rt[_t.Media]="62013",Rt[_t.MenuClosed]="62014",Rt[_t.MenuOpen]="62015",Rt[_t.Menu]="62016",Rt[_t.MergeColumns]="62017",Rt[_t.MergeLinks]="62018",Rt[_t.Microphone]="62275",Rt[_t.Minimize]="62019",Rt[_t.Minus]="62020",Rt[_t.MobilePhone]="62021",Rt[_t.MobileVideo]="62022",Rt[_t.ModalFilled]="62023",Rt[_t.Modal]="62024",Rt[_t.Model]="62269",Rt[_t.Moon]="62025",Rt[_t.More]="62026",Rt[_t.Mountain]="62027",Rt[_t.Move]="62028",Rt[_t.Mugshot]="62029",Rt[_t.MultiSelect]="62030",Rt[_t.Music]="62031",Rt[_t.Nest]="62032",Rt[_t.NewDrawing]="62033",Rt[_t.NewGridItem]="62034",Rt[_t.NewLayer]="62035",Rt[_t.NewLayers]="62036",Rt[_t.NewLink]="62037",Rt[_t.NewObject]="62038",Rt[_t.NewPerson]="62039",Rt[_t.NewPrescription]="62040",Rt[_t.NewShield]="62281",Rt[_t.NewTextBox]="62041",Rt[_t.Ninja]="62042",Rt[_t.NotEqualTo]="62043",Rt[_t.NotificationsSnooze]="62044",Rt[_t.NotificationsUpdated]="62045",Rt[_t.Notifications]="62046",Rt[_t.NumberedList]="62047",Rt[_t.Numerical]="62048",Rt[_t.Office]="62049",Rt[_t.Offline]="62050",Rt[_t.OilField]="62051",Rt[_t.OneColumn]="62052",Rt[_t.OneToMany]="62053",Rt[_t.OneToOne]="62054",Rt[_t.OpenApplication]="62251",Rt[_t.Outdated]="62055",Rt[_t.PageLayout]="62056",Rt[_t.PanelStats]="62057",Rt[_t.PanelTable]="62058",Rt[_t.Paperclip]="62059",Rt[_t.Paragraph]="62060",Rt[_t.PasteVariable]="62278",Rt[_t.PathSearch]="62061",Rt[_t.Path]="62062",Rt[_t.Pause]="62063",Rt[_t.People]="62064",Rt[_t.Percentage]="62065",Rt[_t.Person]="62066",Rt[_t.PhoneCall]="62279",Rt[_t.PhoneForward]="62280",Rt[_t.Phone]="62067",Rt[_t.PieChart]="62068",Rt[_t.Pin]="62069",Rt[_t.PivotTable]="62070",Rt[_t.Pivot]="62071",Rt[_t.Play]="62072",Rt[_t.Playbook]="62244",Rt[_t.Plus]="62073",Rt[_t.PolygonFilter]="62074",Rt[_t.Power]="62075",Rt[_t.PredictiveAnalysis]="62076",Rt[_t.Prescription]="62077",Rt[_t.Presentation]="62078",Rt[_t.Print]="62079",Rt[_t.Projects]="62080",Rt[_t.Properties]="62081",Rt[_t.Property]="62082",Rt[_t.PublishFunction]="62083",Rt[_t.Pulse]="62084",Rt[_t.Rain]="62085",Rt[_t.Random]="62086",Rt[_t.Record]="62087",Rt[_t.RectHeight]="62245",Rt[_t.RectWidth]="62246",Rt[_t.Rectangle]="62241",Rt[_t.Redo]="62088",Rt[_t.Refresh]="62089",Rt[_t.Regex]="62255",Rt[_t.RegressionChart]="62090",Rt[_t.RemoveColumnLeft]="62091",Rt[_t.RemoveColumnRight]="62092",Rt[_t.RemoveColumn]="62093",Rt[_t.RemoveRowBottom]="62094",Rt[_t.RemoveRowTop]="62095",Rt[_t.Remove]="62096",Rt[_t.Repeat]="62097",Rt[_t.Reset]="62098",Rt[_t.Resolve]="62099",Rt[_t.Rig]="62100",Rt[_t.RightJoin]="62101",Rt[_t.Ring]="62102",Rt[_t.RocketSlant]="62103",Rt[_t.Rocket]="62104",Rt[_t.RotateDocument]="62105",Rt[_t.RotatePage]="62106",Rt[_t.Route]="62107",Rt[_t.Satellite]="62108",Rt[_t.Saved]="62109",Rt[_t.ScatterPlot]="62110",Rt[_t.SearchAround]="62111",Rt[_t.SearchTemplate]="62112",Rt[_t.SearchText]="62113",Rt[_t.Search]="62114",Rt[_t.SegmentedControl]="62115",Rt[_t.Select]="62116",Rt[_t.Selection]="62117",Rt[_t.SendMessage]="62118",Rt[_t.SendToGraph]="62119",Rt[_t.SendToMap]="62120",Rt[_t.SendTo]="62121",Rt[_t.Sensor]="62268",Rt[_t.SeriesAdd]="62122",Rt[_t.SeriesConfiguration]="62123",Rt[_t.SeriesDerived]="62124",Rt[_t.SeriesFiltered]="62125",Rt[_t.SeriesSearch]="62126",Rt[_t.Settings]="62127",Rt[_t.Shapes]="62128",Rt[_t.Share]="62129",Rt[_t.SharedFilter]="62130",Rt[_t.Shield]="62131",Rt[_t.Ship]="62132",Rt[_t.Shop]="62133",Rt[_t.ShoppingCart]="62134",Rt[_t.ShortenText]="62271",Rt[_t.SignalSearch]="62135",Rt[_t.SimCard]="62136",Rt[_t.Slash]="62137",Rt[_t.SmallCross]="62138",Rt[_t.SmallInfoSign]="62260",Rt[_t.SmallMinus]="62139",Rt[_t.SmallPlus]="62140",Rt[_t.SmallSquare]="62141",Rt[_t.SmallTick]="62142",Rt[_t.Snowflake]="62143",Rt[_t.SocialMedia]="62144",Rt[_t.SortAlphabeticalDesc]="62145",Rt[_t.SortAlphabetical]="62146",Rt[_t.SortAsc]="62147",Rt[_t.SortDesc]="62148",Rt[_t.SortNumericalDesc]="62149",Rt[_t.SortNumerical]="62150",Rt[_t.Sort]="62151",Rt[_t.SpellCheck]="62272",Rt[_t.SplitColumns]="62152",Rt[_t.Square]="62153",Rt[_t.StackedChart]="62154",Rt[_t.StadiumGeometry]="62155",Rt[_t.StarEmpty]="62156",Rt[_t.Star]="62157",Rt[_t.StepBackward]="62158",Rt[_t.StepChart]="62159",Rt[_t.StepForward]="62160",Rt[_t.Stop]="62161",Rt[_t.Stopwatch]="62162",Rt[_t.Strikethrough]="62163",Rt[_t.Style]="62164",Rt[_t.Subscript]="62265",Rt[_t.Superscript]="62266",Rt[_t.SwapHorizontal]="62165",Rt[_t.SwapVertical]="62166",Rt[_t.Switch]="62167",Rt[_t.SymbolCircle]="62168",Rt[_t.SymbolCross]="62169",Rt[_t.SymbolDiamond]="62170",Rt[_t.SymbolRectangle]="62242",Rt[_t.SymbolSquare]="62171",Rt[_t.SymbolTriangleDown]="62172",Rt[_t.SymbolTriangleUp]="62173",Rt[_t.Syringe]="62174",Rt[_t.Tag]="62175",Rt[_t.TakeAction]="62176",Rt[_t.Tank]="62177",Rt[_t.Target]="62178",Rt[_t.Taxi]="62179",Rt[_t.Temperature]="62180",Rt[_t.TextHighlight]="62181",Rt[_t.ThDerived]="62182",Rt[_t.ThDisconnect]="62183",Rt[_t.ThFiltered]="62184",Rt[_t.ThList]="62185",Rt[_t.Th]="62186",Rt[_t.ThirdParty]="62187",Rt[_t.ThumbsDown]="62188",Rt[_t.ThumbsUp]="62189",Rt[_t.TickCircle]="62190",Rt[_t.Tick]="62191",Rt[_t.Time]="62192",Rt[_t.TimelineAreaChart]="62193",Rt[_t.TimelineBarChart]="62194",Rt[_t.TimelineEvents]="62195",Rt[_t.TimelineLineChart]="62196",Rt[_t.Tint]="62197",Rt[_t.Torch]="62198",Rt[_t.Tractor]="62199",Rt[_t.Train]="62200",Rt[_t.Translate]="62201",Rt[_t.Trash]="62202",Rt[_t.Tree]="62203",Rt[_t.TrendingDown]="62204",Rt[_t.TrendingUp]="62205",Rt[_t.Truck]="62206",Rt[_t.TwoColumns]="62207",Rt[_t.Unarchive]="62208",Rt[_t.Underline]="62209",Rt[_t.Undo]="62210",Rt[_t.UngroupObjects]="62211",Rt[_t.UnknownVehicle]="62212",Rt[_t.Unlink]="62277",Rt[_t.Unlock]="62213",Rt[_t.Unpin]="62214",Rt[_t.Unresolve]="62215",Rt[_t.Updated]="62216",Rt[_t.Upload]="62217",Rt[_t.User]="62218",Rt[_t.Variable]="62219",Rt[_t.VerticalBarChartAsc]="62220",Rt[_t.VerticalBarChartDesc]="62221",Rt[_t.VerticalDistribution]="62222",Rt[_t.VerticalInbetween]="62250",Rt[_t.Video]="62223",Rt[_t.Virus]="62224",Rt[_t.VolumeDown]="62225",Rt[_t.VolumeOff]="62226",Rt[_t.VolumeUp]="62227",Rt[_t.Walk]="62228",Rt[_t.WarningSign]="62229",Rt[_t.WaterfallChart]="62230",Rt[_t.Waves]="62231",Rt[_t.WidgetButton]="62232",Rt[_t.WidgetFooter]="62233",Rt[_t.WidgetHeader]="62234",Rt[_t.Widget]="62235",Rt[_t.Wind]="62236",Rt[_t.Wrench]="62237",Rt[_t.ZoomIn]="62238",Rt[_t.ZoomOut]="62239",Rt[_t.ZoomToFit]="62240";for(var Ft={},Mt={},jt=0,Bt=Object.values(_t);jt<Bt.length;jt++){var Ut=Bt[jt];Ft[(0,Ot.Ho)(Ut)]=Ut,Mt[(Pt=Ut,At=void 0,void 0===At&&(At={}),function(e,t){return void 0===t&&(t={}),(0,zt.B)(e,(0,n.pi)({delimiter:"."},t))}(Pt,(0,n.pi)({delimiter:"_"},At))).toUpperCase()]=Ut}var Vt=(0,n.pi)((0,n.pi)({},Ft),Mt),Ht=new Set(Object.values(Vt));function Gt(e){return(0,n.mG)(this,void 0,void 0,(function(){var t,r;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return t=e.loader,"function"!=typeof(r=void 0===t?Jt.defaultLoader:t)?[3,1]:[2,r];case 1:return"all"!==r?[3,3]:[4,o.e(439).then(o.bind(o,663))];case 2:return[2,n.sent().allPathsLoader];case 3:return[4,o.e(569).then(o.bind(o,756))];case 4:return[2,n.sent().splitPathsBySizeLoader]}}))}))}var Wt=function(){function e(){this.defaultLoader="split-by-size",this.loadedIconPaths16=new Map,this.loadedIconPaths20=new Map}return e.setLoaderOptions=function(e){void 0!==e.loader&&(Jt.defaultLoader=e.loader)},e.load=function(e,t,r){return(0,n.mG)(this,void 0,void 0,(function(){var o=this;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return Array.isArray(e)||(e=[e]),[4,Promise.all(e.map((function(e){return o.loadImpl(e,t,r)})))];case 1:return n.sent(),[2]}}))}))},e.loadAll=function(e){return(0,n.mG)(this,void 0,void 0,(function(){var t,r=this;return(0,n.Jh)(this,(function(o){return t=Object.values(Vt),function(e,t){(0,n.mG)(this,void 0,void 0,(function(){var r,o,a;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return(r="undefined"!=typeof NODE_ENV&&"development"===NODE_ENV&&"undefined"!=typeof performance)&&(o=performance.now(),console.info("Started '".concat(e,"'..."))),[4,t()];case 1:return n.sent(),r&&(a=Math.round(performance.now()-o),console.info("Finished '".concat(e,"' in ").concat(a,"ms"))),[2]}}))}))}("[Blueprint] loading all icons",(function(){return(0,n.mG)(r,void 0,void 0,(function(){return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return[4,Promise.all([this.load(t,Dt.J.STANDARD,e),this.load(t,Dt.J.LARGE,e)])];case 1:return n.sent(),[2]}}))}))})),[2]}))}))},e.getPaths=function(e,t){if(this.isValidIconName(e))return(t<Dt.J.LARGE?Jt.loadedIconPaths16:Jt.loadedIconPaths20).get(e)},e.loadImpl=function(e,t,r){return void 0===r&&(r={}),(0,n.mG)(this,void 0,void 0,(function(){var o,a,i,l,u;return(0,n.Jh)(this,(function(n){switch(n.label){case 0:return this.isValidIconName(e)?(o=t<Dt.J.LARGE?Jt.loadedIconPaths16:Jt.loadedIconPaths20).has(e)?[2]:[4,Gt(r)]:(console.error("[Blueprint] Unknown icon '".concat(e,"'")),[2]);case 1:a=n.sent(),n.label=2;case 2:return n.trys.push([2,4,,5]),i=t<Dt.J.LARGE?Dt.J.STANDARD:Dt.J.LARGE,[4,a(e,i)];case 3:return l=n.sent(),o.set(e,l),[3,5];case 4:return u=n.sent(),console.error("[Blueprint] Unable to load ".concat(t,"px icon '").concat(e,"'"),u),[3,5];case 5:return[2]}}))}))},e.isValidIconName=function(e){return Ht.has(e)},e}(),Jt=new Wt,Kt="".concat("bp5","-icon"),qt=new Map,$t=e.forwardRef((function(t,r){var o=t.children,i=t.className,l=t.color,u=t.htmlTitle,c=t.iconName,s=t.size,f=void 0===s?Dt.J.STANDARD:s,d=t.svgProps,p=t.tagName,h=void 0===p?"span":p,m=t.title,v=(0,n._T)(t,["children","className","color","htmlTitle","iconName","size","svgProps","tagName","title"]),g=f>=Dt.J.LARGE?Dt.J.LARGE:Dt.J.STANDARD,y="0 0 ".concat(g," ").concat(g),b=function(e){var t,n=null!==(t=qt.get(e))&&void 0!==t?t:0;return qt.set(e,n+1),"".concat(e,"-").concat(n)}("iconTitle"),w=(0,n.pi)({"data-icon":c,fill:l,height:f,role:"img",viewBox:y,width:f},d);return null===h?e.createElement("svg",(0,n.pi)({"aria-labelledby":m?b:void 0,ref:r},w,v),m&&e.createElement("title",{id:b},m),o):e.createElement(h,(0,n.pi)((0,n.pi)({"aria-hidden":!m||void 0},v),{className:a()(Kt,"".concat(Kt,"-").concat(c),i),ref:r,title:u}),e.createElement("svg",(0,n.pi)({},w),m&&e.createElement("title",null,m),o))}));$t.displayName="Blueprint5.SVGIconContainer";var Qt=e.forwardRef((function(t,r){var o,i,l=t.autoLoad,u=t.className,c=t.color,s=t.icon,f=t.intent,d=t.tagName,p=t.svgProps,h=t.title,m=t.htmlTitle,v=(0,n._T)(t,["autoLoad","className","color","icon","intent","tagName","svgProps","title","htmlTitle"]),g=null!==(i=null!==(o=t.iconSize)&&void 0!==o?o:t.size)&&void 0!==i?i:Dt.J.STANDARD,y=e.useState((function(){return"string"==typeof s?Wt.getPaths(s,g):void 0})),b=y[0],w=y[1];if(e.useEffect((function(){var e=!1;if("string"==typeof s){var t=Wt.getPaths(s,g);void 0!==t?w(t):l?Wt.load(s,g).then((function(){e||w(Wt.getPaths(s,g))})).catch((function(e){console.error("[Blueprint] Icon '".concat(s,"' (").concat(g,"px) could not be loaded."),e)})):console.error("[Blueprint] Icon '".concat(s,"' (").concat(g,"px) is not loaded yet and autoLoad={false}, did you call Icons.load('").concat(s,"', ").concat(g,")?"))}return function(){e=!0}}),[l,s,g]),null==s||"boolean"==typeof s)return null;if("string"!=typeof s)return s;if(null==b){var S=g===Dt.J.STANDARD?rt:g===Dt.J.LARGE?ot:void 0;return e.createElement(d,(0,n.pi)((0,n.pi)({"aria-hidden":!h||void 0},vt(v)),{className:a()(nt,S,lt(s),ut(f),u),"data-icon":s,ref:r,title:m}))}var E=b.map((function(t,n){return e.createElement("path",{d:t,key:n,fillRule:"evenodd"})}));return e.createElement($t,(0,n.pi)({children:E,className:a()(ut(f),u),color:c,htmlTitle:m,iconName:s,ref:r,size:g,svgProps:p,tagName:d,title:h},vt(v)))}));Qt.defaultProps={autoLoad:!0,tagName:"span"},Qt.displayName="".concat(ht,".Icon");var Yt=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"small-cross",ref:r},t),e.createElement("path",{d:o?"M228.2 200L294 265.8C297.8 269.4 300 274.4 300 280C300 291 291 300 280 300C274.4000000000001 300 269.4000000000001 297.8 265.8 294.2L200 228.2L134.2 294.2C130.6 297.8 125.6 300 120 300C109 300 100 291 100 280C100 274.4 102.2 269.4 105.8 265.8L171.8 200L106 134.2000000000001C102.2 130.6 100 125.6 100 120C100 109 109 100 120 100C125.6 100 130.6 102.2 134.2 105.8L200 171.8L265.8 106C269.4000000000001 102.2 274.4000000000001 100 280 100C291 100 300 109 300 120C300 125.6 297.8 130.6 294.2000000000001 134.2000000000001L228.2 200z":"M188.2 160L234 205.8C237.8 209.4 240 214.4 240 220C240 231 231 240 220 240C214.4 240 209.4 237.8 205.8 234.2L160 188.2L114.2 234.2C110.6 237.8 105.6 240 100 240C89 240 80 231 80 220C80 214.4 82.2 209.4 85.8 205.8L131.8 160L86 114.2C82.2 110.6 80 105.6 80 100C80 89 89 80 100 80C105.6 80 110.6 82.2 114.2 85.8L160 131.8L205.8 86C209.4 82.2 214.4 80 220 80C231 80 240 89 240 100C240 105.6 237.8 110.6 234.2 114.2L188.2 160z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));function Xt(e){return"function"==typeof e}function Zt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){e.forEach((function(e){!function(e,t){var n;null!=(n=e)&&"function"!=typeof n?e.current=t:function(e){return"function"==typeof e}(e)&&e(t)}(e,t)}))}}Yt.defaultProps={size:Dt.J.STANDARD},Yt.displayName="Blueprint5.Icon.SmallCross";var en=e.forwardRef((function(t,r){var o,i=t.children,l=t.tagName,u=void 0===l?"div":l,c=t.title,s=t.className,f=t.ellipsize,d=(0,n._T)(t,["children","tagName","title","className","ellipsize"]),p=e.useRef(),h=e.useMemo((function(){return Zt(p,r)}),[r]),m=e.useState(""),v=m[0],g=m[1],y=e.useState(),b=y[0],w=y[1];return e.useLayoutEffect((function(){var e;null!=(null===(e=p.current)||void 0===e?void 0:e.textContent)&&(w(f&&p.current.scrollWidth>p.current.clientWidth),g(p.current.textContent))}),[p,i,f]),e.createElement(u,(0,n.pi)((0,n.pi)({},d),{className:a()((o={},o[x]=f,o),s),ref:h,title:null!=c?c:b?v:void 0}),i)}));en.defaultProps={ellipsize:!1},en.displayName="".concat(ht,".Text");var tn=e.forwardRef((function(t,r){var o,i=t.active,l=t.children,u=t.className,s=t.fill,f=t.icon,d=t.intent,p=t.interactive,m=t.large,y=t.minimal,w=t.multiline,E=t.onRemove,k=t.rightIcon,C=t.round,x=t.tabIndex,N=void 0===x?0:x,L=t.htmlTitle,T=(0,n._T)(t,["active","children","className","fill","icon","intent","interactive","large","minimal","multiline","onRemove","rightIcon","round","tabIndex","htmlTitle"]),R=Xt(E),_=a()($e,ut(d),((o={})[c]=i,o[h]=s,o[v]=p,o[g]=m,o[b]=y,o[S]=C,o),u),P=m||_.indexOf(g)>=0,A=R?e.createElement("button",{"aria-label":"Remove tag",type:"button",className:Qe,onClick:function(e){var n;null===(n=t.onRemove)||void 0===n||n.call(t,e,t)},tabIndex:N},e.createElement(Yt,{size:P?Dt.J.LARGE:Dt.J.STANDARD})):null;return e.createElement("span",(0,n.pi)({},T,{className:_,tabIndex:p?N:void 0,ref:r}),e.createElement(Qt,{icon:f}),!Lt(l)&&e.createElement(en,{className:h,ellipsize:!w,tagName:"span",title:L},l),e.createElement(Qt,{icon:k}),A)}));tn.displayName="".concat(ht,".Tag");var nn=function(t){function r(){var e=null!==t&&t.apply(this,arguments)||this;return e.handleClick=function(t){return e.props.onClick(e.props.id,t)},e}return(0,n.ZT)(r,t),r.prototype.render=function(){var t=this.props,r=t.className,o=t.children,i=t.disabled,u=t.id,c=t.parentId,s=t.selected,f=t.title,d=t.icon,p=t.tagContent,h=t.tagProps,m=(0,n._T)(t,["className","children","disabled","id","parentId","selected","title","icon","tagContent","tagProps"]),v=s?l.PRIMARY:l.NONE;return e.createElement("div",(0,n.pi)({},vt(m),{"aria-controls":rn(c,u),"aria-disabled":i,"aria-expanded":s,"aria-selected":s,className:a()(Ue,r),"data-tab-id":u,id:on(c,u),onClick:i?void 0:this.handleClick,role:"tab",tabIndex:i?void 0:s?0:-1}),null!=d&&e.createElement(Qt,{icon:d,intent:v,className:Ve}),f,o,null!=p&&e.createElement(tn,(0,n.pi)({minimal:!0,intent:v},h,{className:a()(He,null==h?void 0:h.className)}),p))},r.displayName="".concat(ht,".TabTitle"),r}(Nt);function rn(e,t){return"".concat(Ke,"_").concat(e,"_").concat(t)}function on(e,t){return"".concat(Ue,"-title_").concat(e,"_").concat(t)}var an,ln=function(){return e.createElement("div",{className:X})},un=".".concat(Ue),cn=function(t){function r(r){var o=t.call(this,r)||this;o.tablistElement=null,o.refHandlers={tablist:function(e){return o.tablistElement=e}},o.handleKeyDown=function(e){var t,n=null===(t=st(o.tablistElement))||void 0===t?void 0:t.closest(un);if(null!=n){var r=o.getTabElements().filter((function(e){return"false"===e.getAttribute("aria-disabled")})),a=r.indexOf(n),i=o.getKeyCodeDirection(e);if(a>=0&&void 0!==i){e.preventDefault();var l=r.length;r[(a+i+l)%l].focus()}}},o.handleKeyPress=function(e){var t=e.target.closest(un);null!=t&&ft(e)&&(e.preventDefault(),t.click())},o.handleTabClick=function(e,t){var n,r;null===(r=(n=o.props).onChange)||void 0===r||r.call(n,e,o.state.selectedTabId,t),void 0===o.props.selectedTabId&&o.setState({selectedTabId:e})},o.renderTabPanel=function(t){var n=t.props,r=n.className,i=n.panel,l=n.id,u=n.panelClassName;if(void 0!==i)return e.createElement("div",{"aria-labelledby":on(o.props.id,l),"aria-hidden":l!==o.state.selectedTabId,className:a()(Ke,r,u),id:rn(o.props.id,l),key:l,role:"tabpanel"},i)},o.renderTabTitle=function(t){if(sn(t)){var r=t.props.id;return e.createElement(nn,(0,n.pi)({},t.props,{parentId:o.props.id,onClick:o.handleTabClick,selected:r===o.state.selectedTabId}))}return t};var i=o.getInitialSelectedTabId();return o.state={selectedTabId:i},o}return(0,n.ZT)(r,t),r.getDerivedStateFromProps=function(e){var t=e.selectedTabId;return void 0!==t?{selectedTabId:t}:null},r.prototype.render=function(){var t,n,r=this.state,o=r.indicatorWrapperStyle,i=r.selectedTabId,l=e.Children.map(this.props.children,this.renderTabTitle),u=this.getTabChildren().filter(this.props.renderActiveTabPanelOnly?function(e){return e.props.id===i}:function(){return!0}).map(this.renderTabPanel),c=this.props.animate?e.createElement("div",{className:We,style:o},e.createElement("div",{className:Ge})):null,s=a()(qe,this.props.className,((t={})[C]=this.props.vertical,t[h]=this.props.fill,t)),f=a()(Je,((n={})[g]=this.props.large,n));return e.createElement("div",{className:s},e.createElement("div",{className:f,onKeyDown:this.handleKeyDown,onKeyPress:this.handleKeyPress,ref:this.refHandlers.tablist,role:"tablist"},c,l),u)},r.prototype.componentDidMount=function(){this.moveSelectionIndicator(!1)},r.prototype.componentDidUpdate=function(e,t){var n,r,o;this.state.selectedTabId!==t.selectedTabId?this.moveSelectionIndicator():null!=t.selectedTabId&&(n=this.getTabChildrenProps(e),r=this.getTabChildrenProps(),void 0===(o=dt)&&(o=function(e,t){return e===t}),!(null==n&&null==r||null!=n&&null!=r&&n.length===r.length&&n.every((function(e,t){return o(e,r[t])})))&&this.moveSelectionIndicator())},r.prototype.getInitialSelectedTabId=function(){var e=this.props,t=e.defaultSelectedTabId,n=e.selectedTabId;if(void 0!==n)return n;if(void 0!==t)return t;var r=this.getTabChildren();return 0===r.length?void 0:r[0].props.id},r.prototype.getKeyCodeDirection=function(e){return"ArrowLeft"===e.key||"ArrowUp"===e.key?-1:"ArrowRight"===e.key||"ArrowDown"===e.key?1:void 0},r.prototype.getTabChildrenProps=function(e){return void 0===e&&(e=this.props),this.getTabChildren(e).map((function(e){return e.props}))},r.prototype.getTabChildren=function(t){return void 0===t&&(t=this.props),e.Children.toArray(t.children).filter(sn)},r.prototype.getTabElements=function(e){return void 0===e&&(e=""),null==this.tablistElement?[]:Array.from(this.tablistElement.querySelectorAll(un+e))},r.prototype.moveSelectionIndicator=function(e){if(void 0===e&&(e=!0),null!=this.tablistElement&&this.props.animate){var t="".concat(un,'[data-tab-id="').concat(this.state.selectedTabId,'"]'),n=this.tablistElement.querySelector(t),r={display:"none"};if(null!=n){var o=n.clientHeight,a=n.clientWidth,i=n.offsetLeft,l=n.offsetTop;r={height:o,transform:"translateX(".concat(Math.floor(i),"px) translateY(").concat(Math.floor(l),"px)"),width:a},e||(r.transition="none")}this.setState({indicatorWrapperStyle:r})}},r.Expander=ln,r.Tab=It,r.defaultProps={animate:!0,fill:!1,large:!1,renderActiveTabPanelOnly:!1,vertical:!1},r.displayName="".concat(ht,".Tabs"),r}(Nt);function sn(e){return Tt(e,It)}!function(e){e[e.SMALL=20]="SMALL",e[e.STANDARD=50]="STANDARD",e[e.LARGE=100]="LARGE"}(an||(an={}));var fn=45,dn="M 50,50 m 0,-".concat(fn," a ").concat(fn,",").concat(fn," 0 1 1 0,").concat(90," a ").concat(fn,",").concat(fn," 0 1 1 0,-").concat(90),pn=280,hn=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(r,t),r.prototype.componentDidUpdate=function(e){e.value!==this.props.value&&this.forceUpdate()},r.prototype.render=function(){var t,r,o=this.props,i=o.className,l=o.intent,u=o.value,c=o.tagName,s=void 0===c?"div":c,f=(0,n._T)(o,["className","intent","value","tagName"]),d=this.getSize(),p=a()(ze,ut(l),((t={})[je]=null!=u,t),i),h=Math.min(16,4*an.LARGE/d),m=pn-pn*(null==u?.25:null==(r=u)?r:Math.min(Math.max(r,0),1));return e.createElement(s,(0,n.pi)({"aria-label":"loading","aria-valuemax":100,"aria-valuemin":0,"aria-valuenow":void 0===u?void 0:100*u,className:p,role:"progressbar"},f),e.createElement(s,{className:Fe},e.createElement("svg",{width:d,height:d,strokeWidth:h.toFixed(2),viewBox:this.getViewBox(h)},e.createElement("path",{className:Be,d:dn}),e.createElement("path",{className:Me,d:dn,pathLength:pn,strokeDasharray:"".concat(pn," ").concat(pn),strokeDashoffset:m}))))},r.prototype.validateProps=function(e){var t=e.className,n=void 0===t?"":t;null!=e.size&&(n.indexOf(k)>=0||n.indexOf(g)>=0)&&console.warn(St)},r.prototype.getSize=function(){var e=this.props,t=e.className,n=void 0===t?"":t,r=e.size;return null==r?n.indexOf(k)>=0?an.SMALL:n.indexOf(g)>=0?an.LARGE:an.STANDARD:Math.max(10,r)},r.prototype.getViewBox=function(e){var t=fn+e/2,n=(50-t).toFixed(2),r=(2*t).toFixed(2);return"".concat(n," ").concat(n," ").concat(r," ").concat(r)},r.displayName="".concat(ht,".Spinner"),r}(Nt),mn=e.forwardRef((function(t,r){var o=gn(t,r);return e.createElement("button",(0,n.pi)({type:"button"},vt(t),o),yn(t))}));mn.displayName="".concat(ht,".Button");var vn=e.forwardRef((function(t,r){var o=t.href,a=t.tabIndex,i=void 0===a?0:a,l=gn(t,r);return e.createElement("a",(0,n.pi)({role:"button"},vt(t),l,{"aria-disabled":l.disabled,href:l.disabled?void 0:o,tabIndex:l.disabled?-1:i}),yn(t))}));function gn(t,n){var r,o=t.active,i=void 0!==o&&o,l=t.alignText,u=t.fill,s=t.large,f=t.loading,d=void 0!==f&&f,m=t.minimal,v=t.onBlur,S=t.onKeyDown,E=t.onKeyUp,C=t.outlined,x=t.small,N=t.tabIndex,L=t.disabled||d,T=e.useState(),R=T[0],_=T[1],P=e.useState(!1),A=P[0],D=P[1],O=e.useRef(null),z=e.useCallback((function(e){A&&D(!1),null==v||v(e)}),[A,v]),F=e.useCallback((function(e){ft(e)&&(e.preventDefault(),e.key!==R&&D(!0)),_(e.key),null==S||S(e)}),[R,S]),M=e.useCallback((function(e){var t;ft(e)&&(D(!1),null===(t=O.current)||void 0===t||t.click()),_(void 0),null==E||E(e)}),[E]);return{className:a()(I,((r={})[c]=!L&&(i||A),r[p]=L,r[h]=u,r[g]=s,r[y]=d,r[b]=m,r[w]=C,r[k]=x,r),at(l),ut(t.intent),t.className),disabled:L,onBlur:z,onClick:L?void 0:t.onClick,onFocus:L?void 0:t.onFocus,onKeyDown:F,onKeyUp:M,ref:Zt(O,n),tabIndex:L?-1:N}}function yn(t){var n=t.children,r=t.ellipsizeText,o=t.icon,i=t.loading,l=t.rightIcon,u=t.text,c=t.textClassName,s=!Lt(u)||!Lt(n);return e.createElement(e.Fragment,null,i&&e.createElement(hn,{key:"loading",className:D,size:an.SMALL}),e.createElement(Qt,{key:"leftIcon",icon:o}),s&&e.createElement(en,{key:"text",className:a()(O,c),ellipsize:r,tagName:"span"},u,n),e.createElement(Qt,{key:"rightIcon",icon:l}))}function bn(t,r){return e.forwardRef((function(o,i){var l=o.className,u=o.children,c=(0,n._T)(o,["className","children"]);return e.createElement(t,(0,n.pi)((0,n.pi)({},c),{className:a()(r,l),ref:i}),u)}))}vn.displayName="".concat(ht,".AnchorButton"),bn("h1",R),bn("h2",R),bn("h3",R),bn("h4",R),bn("h5",R);var wn=bn("h6",R),Sn=(bn("blockquote",N),bn("code",L),bn("pre",T),bn("label",de));function En(){return En=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},En.apply(this,arguments)}function kn(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function Cn(e,t){return Cn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Cn(e,t)}function xn(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Cn(e,t)}function Nn(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}bn("ol",_),bn("ul",_);var Ln=o(935);const Tn=e.createContext(null);var Rn=function(e){return e.scrollTop},_n="unmounted",Pn="exited",An="entering",In="entered",Dn="exiting",On=function(t){function n(e,n){var r;r=t.call(this,e,n)||this;var o,a=n&&!n.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?a?(o=Pn,r.appearStatus=An):o=In:o=e.unmountOnExit||e.mountOnEnter?_n:Pn,r.state={status:o},r.nextCallback=null,r}xn(n,t),n.getDerivedStateFromProps=function(e,t){return e.in&&t.status===_n?{status:Pn}:null};var r=n.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==An&&n!==In&&(t=An):n!==An&&n!==In||(t=Dn)}this.updateStatus(!1,t)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},r.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===An){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Ln.findDOMNode(this);n&&Rn(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Pn&&this.setState({status:_n})},r.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[Ln.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),u=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:An},(function(){t.props.onEntering(a,i),t.onTransitionEnd(u,(function(){t.safeSetState({status:In},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:In},(function(){t.props.onEntered(a)}))},r.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Ln.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Dn},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Pn},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Pn},(function(){e.props.onExited(r)}))},r.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},r.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},r.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Ln.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},r.render=function(){var t=this.state.status;if(t===_n)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,kn(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(Tn.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},n}(e.Component);function zn(){}On.contextType=Tn,On.propTypes={},On.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:zn,onEntering:zn,onEntered:zn,onExit:zn,onExiting:zn,onExited:zn},On.UNMOUNTED=_n,On.EXITED=Pn,On.ENTERING=An,On.ENTERED=In,On.EXITING=Dn;const Fn=On;var Mn=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.remove(r):"string"==typeof n.className?n.className=Nn(n.className,r):n.setAttribute("class",Nn(n.className&&n.className.baseVal||"",r)));var n,r}))},jn=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).appliedClasses={appear:{},enter:{},exit:{}},e.onEnter=function(t,n){var r=e.resolveArguments(t,n),o=r[0],a=r[1];e.removeClasses(o,"exit"),e.addClass(o,a?"appear":"enter","base"),e.props.onEnter&&e.props.onEnter(t,n)},e.onEntering=function(t,n){var r=e.resolveArguments(t,n),o=r[0],a=r[1]?"appear":"enter";e.addClass(o,a,"active"),e.props.onEntering&&e.props.onEntering(t,n)},e.onEntered=function(t,n){var r=e.resolveArguments(t,n),o=r[0],a=r[1]?"appear":"enter";e.removeClasses(o,a),e.addClass(o,a,"done"),e.props.onEntered&&e.props.onEntered(t,n)},e.onExit=function(t){var n=e.resolveArguments(t)[0];e.removeClasses(n,"appear"),e.removeClasses(n,"enter"),e.addClass(n,"exit","base"),e.props.onExit&&e.props.onExit(t)},e.onExiting=function(t){var n=e.resolveArguments(t)[0];e.addClass(n,"exit","active"),e.props.onExiting&&e.props.onExiting(t)},e.onExited=function(t){var n=e.resolveArguments(t)[0];e.removeClasses(n,"exit"),e.addClass(n,"exit","done"),e.props.onExited&&e.props.onExited(t)},e.resolveArguments=function(t,n){return e.props.nodeRef?[e.props.nodeRef.current,t]:[t,n]},e.getClassNames=function(t){var n=e.props.classNames,r="string"==typeof n,o=r?(r&&n?n+"-":"")+t:n[t];return{baseClassName:o,activeClassName:r?o+"-active":n[t+"Active"],doneClassName:r?o+"-done":n[t+"Done"]}},e}xn(n,t);var r=n.prototype;return r.addClass=function(e,t,n){var r=this.getClassNames(t)[n+"ClassName"],o=this.getClassNames("enter").doneClassName;"appear"===t&&"done"===n&&o&&(r+=" "+o),"active"===n&&e&&Rn(e),r&&(this.appliedClasses[t][n]=r,function(e,t){e&&t&&t.split(" ").forEach((function(t){return r=t,void((n=e).classList?n.classList.add(r):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(n,r)||("string"==typeof n.className?n.className=n.className+" "+r:n.setAttribute("class",(n.className&&n.className.baseVal||"")+" "+r)));var n,r}))}(e,r))},r.removeClasses=function(e,t){var n=this.appliedClasses[t],r=n.base,o=n.active,a=n.done;this.appliedClasses[t]={},r&&Mn(e,r),o&&Mn(e,o),a&&Mn(e,a)},r.render=function(){var t=this.props,n=(t.classNames,kn(t,["classNames"]));return e.createElement(Fn,En({},n,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},n}(e.Component);jn.defaultProps={classNames:""},jn.propTypes={};const Bn=jn;function Un(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function Vn(e,t,n){return null!=n[t]?n[t]:e.props[t]}function Hn(t,n,r){var o=Un(t.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var c=o[u][r];l[o[u][r]]=n(c)}l[u]=n(u)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(n,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,e.isValidElement)(l)){var u=i in n,c=i in o,s=n[i],f=(0,e.isValidElement)(s)&&!s.props.in;!c||u&&!f?c||!u||f?c&&u&&(0,e.isValidElement)(s)&&(a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:s.props.in,exit:Vn(l,"exit",t),enter:Vn(l,"enter",t)})):a[i]=(0,e.cloneElement)(l,{in:!1}):a[i]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:Vn(l,"exit",t),enter:Vn(l,"enter",t)})}})),a}var Gn=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},Wn=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}xn(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,a=n.children,i=n.handleExited;return{children:n.firstRender?(r=t,o=i,Un(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:Vn(t,"appear",r),enter:Vn(t,"enter",r),exit:Vn(t,"exit",r)})}))):Hn(t,a,i),firstRender:!1}},r.handleExited=function(e,t){var n=Un(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=En({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=kn(t,["component","childFactory"]),a=this.state.contextValue,i=Gn(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(Tn.Provider,{value:a},i):e.createElement(Tn.Provider,{value:a},e.createElement(n,o,i))},n}(e.Component);Wn.propTypes={},Wn.defaultProps={component:"div",childFactory:function(e){return e}};const Jn=Wn;var Kn=e.createContext({}),qn={blueprintPortalClassName:function(e,t){if(null!=e[t]&&"string"!=typeof e[t])return new Error(yt)}};function $n(t,n){var r,o=t.className,a=t.stopPropagationEvents,i=t.container,l=t.onChildrenMount,u=t.children;void 0===n&&(n={});var c=e.useContext(Kn),s=null!==(r=null!=i?i:c.portalContainer)&&void 0!==r?r:"undefined"!=typeof document?document.body:void 0,f=e.useState(),d=f[0],p=f[1],h=e.useCallback((function(){var e=document.createElement("div");e.classList.add(De),Qn(e.classList,o),Qn(e.classList,c.portalClassName),Yn(e,a);var t=n.blueprintPortalClassName;return null!=t&&""!==t&&(console.error(bt),Qn(e.classList,t)),e}),[o,c.portalClassName,n.blueprintPortalClassName,a]);return e.useEffect((function(){if(null!=s){var e=h();return s.appendChild(e),p(e),function(){Xn(e,a),e.remove(),p(void 0)}}}),[s,h,a]),e.useEffect((function(){null!=d&&(null==l||l())}),[d,l]),e.useEffect((function(){if(null!=d)return Qn(d.classList,o),function(){return function(e,t){null!=t&&""!==t&&e.remove.apply(e,t.split(" "))}(d.classList,o)}}),[o,d]),e.useEffect((function(){if(null!=d)return Yn(d,a),function(){return Xn(d,a)}}),[d,a]),"undefined"==typeof document||null==d?null:Ln.createPortal(u,d)}function Qn(e,t){null!=t&&""!==t&&e.add.apply(e,t.split(" "))}function Yn(e,t){null==t||t.forEach((function(t){return e.addEventListener(t,Zn)}))}function Xn(e,t){null==t||t.forEach((function(t){return e.removeEventListener(t,Zn)}))}function Zn(e){e.stopPropagation()}$n.displayName="".concat(ht,".Portal"),$n.contextTypes=qn;var er=function(t){function r(){var n=null!==t&&t.apply(this,arguments)||this;return n.isAutoFocusing=!1,n.state={hasEverOpened:n.props.isOpen},n.containerElement=e.createRef(),n.startFocusTrapElement=e.createRef(),n.endFocusTrapElement=e.createRef(),n.maybeRenderChild=function(t){if(Xt(t)&&(t=t()),null==t)return null;var r=n.props.enforceFocus||n.props.autoFocus?0:void 0,o="object"==typeof t?e.cloneElement(t,{className:a()(t.props.className,Ce),tabIndex:r}):e.createElement("span",{className:Ce,tabIndex:r},t),i=n.props,l=i.onOpening,u=i.onOpened,c=i.onClosing,s=i.transitionDuration,f=i.transitionName;return e.createElement(Bn,{classNames:f,onEntering:l,onEntered:u,onExiting:c,onExited:n.handleTransitionExited,timeout:s,addEndListener:n.handleTransitionAddEnd},o)},n.handleStartFocusTrapElementFocus=function(e){var t,r;n.props.enforceFocus&&!n.isAutoFocusing&&null!=e.relatedTarget&&(null===(t=n.containerElement.current)||void 0===t?void 0:t.contains(e.relatedTarget))&&e.relatedTarget!==n.endFocusTrapElement.current&&(null===(r=n.endFocusTrapElement.current)||void 0===r||r.focus({preventScroll:!0}))},n.handleStartFocusTrapElementKeyDown=function(e){var t;if(n.props.enforceFocus&&e.shiftKey&&"Tab"===e.key){var r=n.getKeyboardFocusableElements().pop();null!=r?r.focus():null===(t=n.endFocusTrapElement.current)||void 0===t||t.focus({preventScroll:!0})}},n.handleEndFocusTrapElementFocus=function(e){var t,r,o;if(null!=e.relatedTarget&&(null===(t=n.containerElement.current)||void 0===t?void 0:t.contains(e.relatedTarget))&&e.relatedTarget!==n.startFocusTrapElement.current){var a=n.getKeyboardFocusableElements().shift();n.isAutoFocusing||null==a||a===e.relatedTarget?null===(r=n.startFocusTrapElement.current)||void 0===r||r.focus({preventScroll:!0}):a.focus()}else{var i=n.getKeyboardFocusableElements().pop();null!=i?i.focus():null===(o=n.startFocusTrapElement.current)||void 0===o||o.focus({preventScroll:!0})}},n.handleTransitionExited=function(e){var t,r;n.props.shouldReturnFocusOnClose&&n.lastActiveElementBeforeOpened instanceof HTMLElement&&n.lastActiveElementBeforeOpened.focus(),null===(r=(t=n.props).onClosed)||void 0===r||r.call(t,e)},n.handleBackdropMouseDown=function(e){var t,r=n.props,o=r.backdropProps,a=r.canOutsideClickClose,i=r.enforceFocus,l=r.onClose;a&&(null==l||l(e)),i&&n.bringFocusInsideOverlay(),null===(t=null==o?void 0:o.onMouseDown)||void 0===t||t.call(o,e)},n.handleDocumentClick=function(e){var t=n.props,o=t.canOutsideClickClose,a=t.isOpen,i=t.onClose,l=e.composed?e.composedPath()[0]:e.target,u=r.openStack.indexOf(n),c=r.openStack.slice(u).some((function(e){var t,n=e.containerElement;return(null===(t=n.current)||void 0===t?void 0:t.contains(l))&&!n.current.isSameNode(l)}));a&&!c&&o&&(null==i||i(e))},n.handleDocumentFocus=function(e){var t=e.composed?e.composedPath()[0]:e.target;n.props.enforceFocus&&null!=n.containerElement.current&&t instanceof Node&&!n.containerElement.current.contains(t)&&(e.preventDefault(),e.stopImmediatePropagation(),n.bringFocusInsideOverlay())},n.handleKeyDown=function(e){var t=n.props,r=t.canEscapeKeyClose,o=t.onClose;"Escape"===e.key&&r&&(null==o||o(e),e.stopPropagation(),e.preventDefault())},n.handleTransitionAddEnd=function(){},n}return(0,n.ZT)(r,t),r.getDerivedStateFromProps=function(e){var t=e.isOpen;return t?{hasEverOpened:t}:null},r.prototype.render=function(){var t,n;if(this.props.lazy&&!this.state.hasEverOpened)return null;var r=this.props,o=r.autoFocus,i=r.children,l=r.className,u=r.enforceFocus,c=r.usePortal,s=r.isOpen,f=s&&null!==(n=e.Children.map(i,this.maybeRenderChild))&&void 0!==n?n:[],d=this.maybeRenderBackdrop();null!==d&&f.unshift(d),s&&(o||u)&&f.length>0&&(f.unshift(this.renderDummyElement("__start",{className:Te,onFocus:this.handleStartFocusTrapElementFocus,onKeyDown:this.handleStartFocusTrapElementKeyDown,ref:this.startFocusTrapElement})),u&&f.push(this.renderDummyElement("__end",{className:Re,onFocus:this.handleEndFocusTrapElementFocus,ref:this.endFocusTrapElement})));var p=a()(Ee,((t={})[Ne]=s,t[xe]=!c,t),l),h=e.createElement("div",{"aria-live":"polite",className:p,onKeyDown:this.handleKeyDown,ref:this.containerElement},e.createElement(Jn,{appear:!0,component:null},f));return c?e.createElement($n,{className:this.props.portalClassName,container:this.props.portalContainer,stopPropagationEvents:this.props.portalStopPropagationEvents},h):h},r.prototype.componentDidMount=function(){this.props.isOpen&&this.overlayWillOpen()},r.prototype.componentDidUpdate=function(e){e.isOpen&&!this.props.isOpen?this.overlayWillClose():!e.isOpen&&this.props.isOpen&&this.overlayWillOpen()},r.prototype.componentWillUnmount=function(){this.overlayWillClose()},r.prototype.bringFocusInsideOverlay=function(){var e=this;return this.requestAnimationFrame((function(){var t,n=st(e.containerElement.current);null!=e.containerElement.current&&null!=n&&e.props.isOpen&&!e.containerElement.current.contains(n)&&(null===(t=e.startFocusTrapElement.current)||void 0===t||t.focus({preventScroll:!0}),e.isAutoFocusing=!1)}))},r.prototype.maybeRenderBackdrop=function(){var t=this.props,r=t.backdropClassName,o=t.backdropProps,i=t.hasBackdrop,l=t.isOpen,u=t.transitionDuration,c=t.transitionName;return i&&l?e.createElement(Bn,{classNames:c,key:"__backdrop",timeout:u,addEndListener:this.handleTransitionAddEnd},e.createElement("div",(0,n.pi)({},o,{className:a()(ke,r,null==o?void 0:o.className),onMouseDown:this.handleBackdropMouseDown}))):null},r.prototype.renderDummyElement=function(t,r){var o=this.props,a=o.transitionDuration,i=o.transitionName;return e.createElement(Bn,{classNames:i,key:t,addEndListener:this.handleTransitionAddEnd,timeout:a,unmountOnExit:!0},e.createElement("div",(0,n.pi)({tabIndex:0},r)))},r.prototype.getKeyboardFocusableElements=function(){return(null!==this.containerElement.current?Array.from(this.containerElement.current.querySelectorAll(['a[href]:not([tabindex="-1"])','button:not([disabled]):not([tabindex="-1"])','details:not([tabindex="-1"])','input:not([disabled]):not([tabindex="-1"])','select:not([disabled]):not([tabindex="-1"])','textarea:not([disabled]):not([tabindex="-1"])','[tabindex]:not([tabindex="-1"])'].join(","))):[]).filter((function(e){return!e.classList.contains(Te)&&!e.classList.contains(Re)}))},r.prototype.overlayWillClose=function(){document.removeEventListener("focus",this.handleDocumentFocus,!0),document.removeEventListener("mousedown",this.handleDocumentClick);var e=r.openStack,t=e.indexOf(this);if(-1!==t){if(e.splice(t,1),e.length>0){var n=r.getLastOpened();n.props.autoFocus&&n.props.enforceFocus&&(n.bringFocusInsideOverlay(),document.addEventListener("focus",n.handleDocumentFocus,!0))}0===e.filter((function(e){return e.props.usePortal&&e.props.hasBackdrop})).length&&document.body.classList.remove(Ne)}},r.prototype.overlayWillOpen=function(){var e=r.getLastOpened,t=r.openStack;t.length>0&&document.removeEventListener("focus",e().handleDocumentFocus,!0),t.push(this),this.props.autoFocus&&(this.isAutoFocusing=!0,this.bringFocusInsideOverlay()),this.props.enforceFocus&&document.addEventListener("focus",this.handleDocumentFocus,!0),this.props.canOutsideClickClose&&!this.props.hasBackdrop&&document.addEventListener("mousedown",this.handleDocumentClick),this.props.hasBackdrop&&this.props.usePortal&&document.body.classList.add(Ne),this.lastActiveElementBeforeOpened=st(this.containerElement.current)},r.displayName="".concat(ht,".Overlay"),r.defaultProps={autoFocus:!0,backdropProps:{},canEscapeKeyClose:!0,canOutsideClickClose:!0,enforceFocus:!0,hasBackdrop:!0,isOpen:!1,lazy:!0,shouldReturnFocusOnClose:!0,transitionDuration:300,transitionName:Ee,usePortal:!0},r.openStack=[],r.getLastOpened=function(){return r.openStack[r.openStack.length-1]},r}(Nt),tr=function(t){function r(e){var n=t.call(this,e)||this,r=function(e){var t,n=null!==(t=xt.get(e))&&void 0!==t?t:0;return xt.set(e,n+1),"".concat(e,"-").concat(n)}("bp-dialog");return n.titleId="title-".concat(r),n}return(0,n.ZT)(r,t),r.prototype.render=function(){return e.createElement(er,(0,n.pi)({},this.props,{className:Le,hasBackdrop:!0}),e.createElement("div",{className:W,ref:this.props.containerRef},e.createElement("div",{className:a()(G,this.props.className),role:"dialog","aria-labelledby":this.props["aria-labelledby"]||(this.props.title?this.titleId:void 0),"aria-describedby":this.props["aria-describedby"],style:this.props.style},this.maybeRenderHeader(),this.props.children)))},r.prototype.validateProps=function(e){null==e.title&&(null!=e.icon&&console.warn(Et),null!=e.isCloseButtonShown&&console.warn(kt))},r.prototype.maybeRenderCloseButton=function(){return!1!==this.props.isCloseButtonShown?e.createElement(mn,{"aria-label":"Close",className:K,icon:e.createElement(Yt,{size:Dt.J.STANDARD}),minimal:!0,onClick:this.props.onClose}):void 0},r.prototype.maybeRenderHeader=function(){var t=this.props,n=t.icon,r=t.title;if(null!=r)return e.createElement("div",{className:J},e.createElement(Qt,{icon:n,size:Dt.J.STANDARD,"aria-hidden":!0,tabIndex:-1}),e.createElement(wn,{id:this.titleId},r),this.maybeRenderCloseButton())},r.defaultProps={canOutsideClickClose:!0,isOpen:!1},r.displayName="".concat(ht,".Dialog"),r}(Nt),nr=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"time",ref:r},t),e.createElement("path",{d:o?"M220 208.2V320C220 331 211 340 200 340S180 331 180 320V200C180 194.4 182.2 189.4 185.8 185.8L245.8 125.8C249.4 122.2 254.4 120 260 120C271 120 280 129 280 140C280 145.6 277.8 150.6 274.2000000000001 154.2L220 208.2zM200 400C89.6 400 0 310.4 0 200C0 89.6 89.6 0 200 0S400 89.6 400 200C400 310.4 310.4 400 200 400zM200 40C111.6 40 40 111.6 40 200S111.6 360 200 360S360 288.4 360 200S288.4 40 200 40z":"M160 320C71.6 320 0 248.4 0 160S71.6 0 160 0S320 71.6 320 160S248.4 320 160 320zM160 40C93.8 40 40 93.8 40 160S93.8 280 160 280S280 226.2 280 160S226.2 40 160 40zM180 168.2V240C180 251 171 260 160 260S140 251 140 240V160C140 154.4 142.2 149.4 145.8 145.8L185.8 105.8C189.4 102.2 194.4 100 200 100C211 100 220 109 220 120C220 125.6 217.8 130.6 214.2 134.2L180 168.2z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));nr.defaultProps={size:Dt.J.STANDARD},nr.displayName="Blueprint5.Icon.Time";var rr=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"stopwatch",ref:r},t),e.createElement("path",{d:o?"M200 280C133.72583 280 80 226.2741700000001 80 160C80 93.72583 133.72583 40 200 40C266.2741700000001 40 320 93.72583 320 160L200 160L200 280zM180.0373994 318.7667840000001C180.012587 319.174675 180 319.5858676000001 180 320L180 360L140 360C128.954305 360 120 368.954305 120 380C120 391.045695 128.954305 400 140 400L260 400C271.045694 400 280 391.045695 280 380C280 368.954305 271.045694 360 260 360L220 360L220 320C220 319.5858676000001 219.987412 319.174675 219.9626 318.7667840000001C298.9069380000001 308.941431 360 241.6052402 360 160C360 71.63444 288.36556 0 200 0C111.63444 0 40 71.63444 40 160C40 241.6052402 101.0930626 308.941431 180.0373994 318.7667840000001z":"M180 280L180 258.3408312000001C236.7542660000001 248.8192694 280 199.4599258 280 140C280 73.72583 226.2741700000001 20 160 20C93.72583 20 40 73.72583 40 140C40 199.4599258 83.2457332 248.8192694 140 258.3408312000001L140 280L120 280C108.954305 280 100 288.954305 100 300C100 311.045695 108.954305 320 120 320L200 320C211.045694 320 220 311.045695 220 300C220 288.954305 211.045694 280 200 280L180 280zM160 220C115.81722 220 80 184.18278 80 140C80 95.81722 115.81722 60 160 60C204.18278 60 240 95.81722 240 140L160 140L160 220z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));rr.defaultProps={size:Dt.J.STANDARD},rr.displayName="Blueprint5.Icon.Stopwatch";var or=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"clean",ref:r},t),e.createElement("path",{d:o?"M140 400L100 300L0 260.0385184L100 220L140 120L180 220L280 259.8943316L180 300zM300 200L270 130.07389L200 100.102912L270 70.137224L300 0L330 70.137224L400 100L330 130.07389z":"M240 160L216 104.07387L160 80.08233L216 56.137188L240 0L264 56.137188L320 80L264 104.07387zM100 320L70 250L0 220.102913L70 190L100 120L130 190L200 220L130 250z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));or.defaultProps={size:Dt.J.STANDARD},or.displayName="Blueprint5.Icon.Clean";var ar=function(t){function r(){return null!==t&&t.apply(this,arguments)||this}return(0,n.ZT)(r,t),r.prototype.render=function(){var t=this.props,r=t.className,o=t.tagName,i=void 0===o?"div":o,l=(0,n._T)(t,["className","tagName"]),u=a()($,r);return e.createElement(i,(0,n.pi)((0,n.pi)({},l),{className:u}))},r.displayName="".concat(ht,".Divider"),r}(Nt),ir=e.forwardRef((function(t,r){var o,i=t.className,l=t.elevation,u=t.interactive,c=t.selected,s=t.compact,f=(0,n._T)(t,["className","elevation","interactive","selected","compact"]),p=a()(i,F,it(l),((o={})[v]=u,o[d]=s,o[E]=c,o));return e.createElement("div",(0,n.pi)({className:p,ref:r},f))}));ir.defaultProps={elevation:0,interactive:!1},ir.displayName="".concat(ht,".Card");var lr=e.forwardRef((function(t,r){var o,i=t.alignIndicator,l=t.children,u=t.className,c=t.indicatorChildren,s=t.inline,f=t.inputRef,d=t.label,h=t.labelElement,v=t.large,y=t.style,b=t.type,w=t.typeClassName,S=t.tagName,E=void 0===S?"label":S,k=(0,n._T)(t,["alignIndicator","children","className","indicatorChildren","inline","inputRef","label","labelElement","large","style","type","typeClassName","tagName"]),C=a()(ne,w,((o={})[p]=k.disabled,o[m]=s,o[g]=v,o),at(i),u);return e.createElement(E,{className:C,style:y,ref:r},e.createElement("input",(0,n.pi)({},k,{ref:f,type:b})),e.createElement("span",{className:re},c),d,h,l)}));lr.displayName="".concat(ht,".Control");var ur=e.forwardRef((function(t,r){var o=t.innerLabelChecked,a=t.innerLabel,i=(0,n._T)(t,["innerLabelChecked","innerLabel"]),l=a||o?[e.createElement("div",{key:"checked",className:oe},e.createElement("div",{className:ce},o||a)),e.createElement("div",{key:"unchecked",className:oe},e.createElement("div",{className:ce},a))]:null;return e.createElement(lr,(0,n.pi)({},i,{indicatorChildren:l,ref:r,type:"checkbox",typeClassName:ue}))}));ur.displayName="".concat(ht,".Switch");var cr=e.forwardRef((function(t,r){return e.createElement(lr,(0,n.pi)({},t,{ref:r,type:"radio",typeClassName:ie}))}));cr.displayName="".concat(ht,".Radio");var sr=e.forwardRef((function(t,r){var o=t.defaultIndeterminate,a=t.indeterminate,i=t.onChange,l=(0,n._T)(t,["defaultIndeterminate","indeterminate","onChange"]),u=e.useState(a||o||!1),c=u[0],s=u[1],f=e.useRef(null),d=void 0===t.inputRef?f:Zt(t.inputRef,f),p=e.useCallback((function(e){void 0===a&&s(e.target.indeterminate),null==i||i(e)}),[a,i]);return e.useEffect((function(){void 0!==a&&s(a)}),[a]),e.useEffect((function(){null!=f.current&&(f.current.indeterminate=c)}),[f,c]),e.createElement(lr,(0,n.pi)({},l,{inputRef:d,onChange:p,ref:r,type:"checkbox",typeClassName:ae}))}));sr.displayName="".concat(ht,".Checkbox");var fr=e.forwardRef((function(t,r){var o,i=t.alignIndicator,l=(t.checked,t.children),u=t.className,c=t.controlKind,s=(t.defaultChecked,t.disabled),f=t.inputProps,d=t.inputRef,p=t.label,h=(t.onChange,t.showAsSelectedWhenChecked),m=t.value,v=(0,n._T)(t,["alignIndicator","checked","children","className","controlKind","defaultChecked","disabled","inputProps","inputRef","label","onChange","showAsSelectedWhenChecked","value"]),g=function(t){var n=e.useState((function(){var e;return null!==(e=t.defaultChecked)&&void 0!==e&&e})),r=n[0],o=n[1];e.useEffect((function(){void 0!==t.checked&&o(t.checked)}),[t.checked]);var a=e.useCallback((function(e){var n;o((function(e){return!e})),null===(n=t.onChange)||void 0===n||n.call(t,e)}),[t.onChange]);return{checked:r,onChange:a}}(t),y=g.checked,b=g.onChange,w=e.createElement("div",{className:j},null!=l?l:p),S=(0,n.pi)({alignIndicator:i,checked:y,disabled:s,inline:!0,inputRef:d,labelElement:w,onChange:b,value:m},f),k=a()(M,u,((o={})[E]=h&&y,o));return e.createElement(ir,(0,n.pi)({interactive:!s,className:k,ref:r},v),"switch"===c?e.createElement(ur,(0,n.pi)({},S)):"checkbox"===c?e.createElement(sr,(0,n.pi)({},S)):"radio"===c?e.createElement(cr,(0,n.pi)({},S)):w)}));fr.defaultProps={alignIndicator:"right",showAsSelectedWhenChecked:!0},fr.displayName="".concat(ht,".ControlCard");var dr=e.forwardRef((function(t,r){var o=a()(t.className,B);return e.createElement(fr,(0,n.pi)({},t,{className:o,controlKind:"radio",ref:r}))}));dr.displayName="".concat(ht,".RadioCard");var pr=0;function hr(){return"".concat(mr.displayName,"-").concat(pr++)}var mr=function(t){function r(){var e=null!==t&&t.apply(this,arguments)||this;return e.autoGroupName=hr(),e}return(0,n.ZT)(r,t),r.prototype.render=function(){var t=this.props.label;return e.createElement("div",{className:a()(le,this.props.className)},null==t?null:e.createElement("label",{className:de},t),Array.isArray(this.props.options)?this.renderOptions():this.renderChildren())},r.prototype.validateProps=function(){null!=this.props.children&&null!=this.props.options&&console.warn(wt)},r.prototype.renderChildren=function(){var t=this;return e.Children.map(this.props.children,(function(n){return Tt(n,cr)||Tt(n,dr)?e.cloneElement(n,t.getRadioProps(n.props)):n}))},r.prototype.renderOptions=function(){var t,r=this;return null===(t=this.props.options)||void 0===t?void 0:t.map((function(t){return e.createElement(cr,(0,n.pi)({},r.getRadioProps(t),{key:t.value,labelElement:t.label||t.value}))}))},r.prototype.getRadioProps=function(e){var t=this.props.name,n=e.className,r=e.disabled,o=e.value;return{checked:o===this.props.selectedValue,className:n,disabled:r||this.props.disabled,inline:this.props.inline,name:null==t?this.autoGroupName:t,onChange:this.props.onChange,value:o}},r.displayName="".concat(ht,".RadioGroup"),r}(Nt);function vr(t){var n=(0,e.useMemo)((function(){return t.timeLapseInterval}),[]),r=(0,e.useMemo)((function(){return t.outputDuration}),[]),o=(0,e.useMemo)((function(){return t.outputFPS}),[]);return e.createElement("div",null,e.createElement("div",{className:"complex-radio-group"},e.createElement("label",{className:"radio-option"},e.createElement(Sn,{style:{marginBottom:"5px"},htmlFor:"time-between-frames"},"Time Between Frames (ms)"),e.createElement("input",{type:"number",id:"time-between-frames",className:ee,placeholder:String(n),onChange:function(e){var r=Number(e.target.value);t.setTimeLapseInterval(isNaN(r)||r<=0?n:r)}}))),e.createElement(ar,{style:{marginTop:"-1px"}}),e.createElement(mr,{selectedValue:t.outputSpec,onChange:function(e){t.setOutputSpec(e.currentTarget.value)},className:"complex-radio-group",inline:!0},e.createElement(cr,{label:"Output FPS",value:"FPS"}),e.createElement(cr,{label:"Output Duration (ms)",value:"Duration"})),"FPS"===t.outputSpec?e.createElement("div",{style:{padding:"7px"},className:"radio-option"},e.createElement("div",{style:"FPS"===t.outputSpec?{}:{color:"lightgrey"}},"FPS (Frames Per Second)"),e.createElement("input",{type:"number",className:ee+" radio-input "+("FPS"===t.outputSpec?"":"dull"),placeholder:String(o),disabled:"FPS"!==t.outputSpec,onChange:function(e){var n=Number(e.target.value);t.setOutputFPS(isNaN(n)||n<=0?o:n)}})):e.createElement("div",{style:{padding:"7px"},className:"radio-option"},e.createElement("div",{style:"Duration"===t.outputSpec?{}:{color:"lightgrey"}},"Output Duration (ms)"),e.createElement("input",{type:"number",className:ee+" radio-input "+("Duration"===t.outputSpec?"":"dull"),placeholder:String(r),disabled:"Duration"!==t.outputSpec,onChange:function(e){var n=Number(e.target.value);t.setOutputDuration(isNaN(n)||n<=0?r:n)}})),e.createElement(ar,{style:{marginTop:"-1px"}}))}var gr=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"pause",ref:r},t),e.createElement("path",{d:o?"M140 340H80C69 340 60 331 60 320V80C60 69 69 60 80 60H140C151 60 160 69 160 80V320C160 331 151 340 140 340zM320 340H260C249 340 240 331 240 320V80C240 69 249 60 260 60H320C331 60 340 69 340 80V320C340 331 331 340 320 340z":"M120 260H80C69 260 60 251 60 240V80C60 69 69 60 80 60H120C131 60 140 69 140 80V240C140 251 131 260 120 260zM240 260H200C189 260 180 251 180 240V80C180 69 189 60 200 60H240C251 60 260 69 260 80V240C260 251 251 260 240 260z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));gr.defaultProps={size:Dt.J.STANDARD},gr.displayName="Blueprint5.Icon.Pause";var yr=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"stop",ref:r},t),e.createElement("path",{d:o?"M320 340H80C69 340 60 331 60 320V80C60 69 69 60 80 60H320C331 60 340 69 340 80V320C340 331 331 340 320 340z":"M240 260H80C69 260 60 251 60 240V80C60 69 69 60 80 60H240C251 60 260 69 260 80V240C260 251 251 260 240 260z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));yr.defaultProps={size:Dt.J.STANDARD},yr.displayName="Blueprint5.Icon.Stop";var br=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"record",ref:r},t),e.createElement("path",{d:o?"M60 200A140 140 0 0 1 340 200A140 140 0 0 1 60 200":"M60 160A100 100 0 0 1 260 160A100 100 0 0 1 60 160",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));function wr(t){return"Recording"===t.recordingStatus?e.createElement("div",{className:"footer",style:{display:"flex"}},e.createElement(mn,{className:"big-button simple-label",icon:e.createElement(gr,null),large:!0,fill:!0,onClick:t.onPause,style:{paddingRight:"2px"}},"Pause"),e.createElement(mn,{className:"big-button simple-label",icon:e.createElement(yr,null),large:!0,fill:!0,onClick:t.onStop,style:{paddingLeft:"2px"}},"Stop")):"Stopped"===t.recordingStatus?e.createElement("div",{className:"footer"},e.createElement(mn,{className:"big-button simple-label",icon:e.createElement(br,null),large:!0,fill:!0,onClick:t.onStart},"Start Recording")):"Paused"===t.recordingStatus?e.createElement("div",{className:"footer",style:{display:"flex"}},e.createElement(mn,{className:"big-button simple-label",icon:e.createElement(yr,null),large:!0,fill:!0,onClick:t.onStop,style:{paddingRight:"2px"}},"Stop"),e.createElement(mn,{className:"big-button simple-label",icon:e.createElement(br,null),large:!0,fill:!0,onClick:t.onStart,style:{paddingLeft:"2px"}},"Resume")):void 0}br.defaultProps={size:Dt.J.STANDARD},br.displayName="Blueprint5.Icon.Record";const Sr={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let Er;const kr=new Uint8Array(16);function Cr(){if(!Er&&(Er="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!Er))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return Er(kr)}const xr=[];for(let e=0;e<256;++e)xr.push((e+256).toString(16).slice(1));const Nr=function(e,t,n){if(Sr.randomUUID&&!t&&!e)return Sr.randomUUID();const r=(e=e||{}).random||(e.rng||Cr)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return function(e,t=0){return xr[e[t+0]]+xr[e[t+1]]+xr[e[t+2]]+xr[e[t+3]]+"-"+xr[e[t+4]]+xr[e[t+5]]+"-"+xr[e[t+6]]+xr[e[t+7]]+"-"+xr[e[t+8]]+xr[e[t+9]]+"-"+xr[e[t+10]]+xr[e[t+11]]+xr[e[t+12]]+xr[e[t+13]]+xr[e[t+14]]+xr[e[t+15]]}(r)};function Lr(e){const t=[];for(;e>0;)t.push(255&e),e>>=8;return new Uint8Array(t.reverse())}function Tr(e,t){const n=new Uint8Array(t);for(let r=t-1;r>=0;r--)n[r]=255&e,e>>=8;return n}function Rr(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}function _r(e){const t=[],n=(e.length%8?new Array(9-e.length%8).join("0"):"")+e;for(let e=0;e<n.length;e+=8)t.push(parseInt(n.substr(e,8),2));return new Uint8Array(t)}function Pr(e){return{id:187,data:[{data:Math.round(e),id:179},{id:183,data:[{data:1,id:247},{data:0,size:8,id:241}]}]}}function Ar(e,t){t||(t=[]);for(const n of e)"object"==typeof n&&n[Symbol.iterator]?Ar(n,t):t.push(n);return t}function Ir(e,t){const n=[];for(const r of e){if(!("id"in r)){n.push(r);continue}let e=r.data;"object"==typeof e&&(e=Ir(e,t)),"number"==typeof e&&(e="size"in r?Tr(e,r.size||0):_r(e.toString(2))),"string"==typeof e&&(e=Rr(e));const o=e.size||e.byteLength||e.length,a=Math.ceil(Math.ceil(Math.log(o)/Math.log(2))/8),i=o.toString(2),l=new Array(7*a+7+1-i.length).join("0")+i,u=new Array(a).join("0")+"1"+l;n.push(Lr(r.id)),n.push(_r(u)),n.push(e)}if(t){const e=Ar(n);return new Uint8Array(e)}return new Blob(n,{type:"video/webm"})}function Dr(e){let t=0;if(e.keyframe&&(t|=128),e.invisible&&(t|=8),e.lacing&&(t|=e.lacing<<1),e.discardable&&(t|=1),e.trackNum>127)throw new Error("TrackNumber > 127 not supported");return[128|e.trackNum,e.timecode>>8,255&e.timecode,t].map((e=>String.fromCharCode(e))).join("")+e.frame}function Or(e,t){return parseInt(e.substr(t,4).split("").map((e=>{const t=e.charCodeAt(0).toString(2);return new Array(8-t.length+1).join("0")+t})).reverse().join(""),2)}function zr(e){let t=14;for(;t<e.length;){const n=e.substr(t,4);t+=4;const r=Or(e,t);switch(t+=4,n){case"VP8 ":case"VP8L":return e.substr(t-4,4)+e.substr(t,r);default:t+=r}}throw new Error("VP8X format error: missing VP8/VP8L chunk.")}function Fr(e){let t=0;const n={};for(;t<e.length;){const r=e.substr(t,4);if(n[r]=n[r]||[],"RIFF"===r||"LIST"===r){const o=Or(e,t+4),a=e.substr(t+4+4,o);t+=8+o,n[r].push(Fr(a))}else if("WEBP"===r){const o=e.substr(t+4,4);switch(o){case"VP8X":n[r].push(zr(e.substr(t+8)));break;case"VP8 ":case"VP8L":n[r].push(e.substr(t+8));break;default:console.error(`not supported webp version: '${o}'`)}t=e.length}else n[r].push(e.substr(t+4)),t=e.length}return n}const Mr=(e,t)=>new Promise(((n,r)=>{const o=new Image;o.src=e,o.onload=()=>{const e=document.createElement("canvas"),r=e.getContext("2d");e.width=t?.width||o.width,e.height=t?.height||o.height,r.fillStyle=t?.backgroundColor||"#000",r.fillRect(0,0,e.width,e.height),r?.drawImage(o,0,0,o.width,o.height,0,0,e.width,e.height);const a=e.toDataURL("image/webp");n(a)},o.onerror=e=>{r(e)}})),jr={fromImageArray(e,t,n){const r="undefined"==typeof Blob||n,o=t||1;return function(e,t){const n=function(e){var t;return[{id:440786851,data:[{data:1,id:17030},{data:1,id:17143},{data:4,id:17138},{data:8,id:17139},{data:"webm",id:17026},{data:2,id:17031},{data:2,id:17029}]},{id:408125543,data:[{id:357149030,data:[{data:1e6,id:2807729},{data:"whammy",id:19840},{data:"whammy",id:22337},{data:(t=e.duration,[].slice.call(new Uint8Array(new Float64Array([t]).buffer),0).map((e=>String.fromCharCode(e))).reverse().join("")),id:17545}]},{id:374648427,data:[{id:174,data:[{data:1,id:215},{data:1,id:29637},{data:0,id:156},{data:"und",id:2274716},{data:"V_VP8",id:134},{data:"VP8",id:2459272},{data:1,id:131},{id:224,data:[{data:e.width,id:176},{data:e.height,id:186}]}]}]},{id:475249515,data:[]}]}]}(function(e){const t=e[0].width,n=e[0].height;let r=e[0].duration;for(let o=1;o<e.length;o++){if(e[o].width!==t)throw new Error("Frame "+(o+1)+" has a different width");if(e[o].height!==n)throw new Error("Frame "+(o+1)+" has a different height");if(e[o].duration<0||e[o].duration>32767)throw new Error("Frame "+(o+1)+" has a weird duration (must be between 0 and 32767)");r+=e[o].duration}return{duration:r,width:t,height:n}}(e)),r=n[1],o=r.data[2];let a=0,i=0;for(;a<e.length;){const t=Pr(i);o.data.push(t);const n=[];let l=0;do{n.push(e[a]),l+=e[a].duration,a++}while(a<e.length&&l<3e4);let u=0;const c=n.map((e=>{const t=Dr({discardable:0,frame:e.data.slice(4),invisible:0,keyframe:1,lacing:0,trackNum:1,timecode:Math.round(u)});return u+=e.duration,{data:t,id:163}})),s={id:524531317,data:[{data:Math.round(i),id:231},...c]};r.data.push(s),i+=l}let l=0;for(let e=0;e<r.data.length;e++){e>=3&&(o.data[e-3].data[1].data[1].data=l);const n=Ir([r.data[e]],t);"undefined"!=typeof Blob&&n instanceof Blob&&(l+=n.size),n instanceof Uint8Array&&(l+=n.byteLength),2!==e&&(r.data[e]=n)}return Ir(n,t)}(e.map(((e,t)=>{try{return{...function(e){const t=e.RIFF[0].WEBP[0],n=t.indexOf("*"),r=[];for(let e=0;e<4;e++)r[e]=t.charCodeAt(n+3+e);let o=r[1]<<8|r[0];const a=16383&o;return o=r[3]<<8|r[2],{width:a,height:16383&o,data:t,riff:e}}(Fr((n=e.slice(23),"undefined"!=typeof atob?atob(n):Buffer.from(n,"base64").toString("binary")))),duration:1e3/o}}catch(e){throw console.error(`Before toWebM Error, Image Index ${t}`),e}var n})),r)},fromImageArrayWithOptions(e,t={}){const{fps:n,duration:r,outputAsArray:o}=t;let a=n||1;return r&&(a=1e3/(1e3*r/e.length)),this.fromImageArray(e,a,o)},async fixImageDataList(e,t){const n=[];for(const r of e){const e=await Mr(r,t);n.push(e)}return n}};var Br=o(483),Ur=o.n(Br),Vr=o(162),Hr=o.n(Vr);function Gr(e){return Gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Gr(e)}function Wr(){Wr=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof g?t:g,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:N(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function g(){}function y(){}function b(){}var w={};c(w,i,(function(){return this}));var S=Object.getPrototypeOf,E=S&&S(S(P([])));E&&E!==n&&r.call(E,i)&&(w=E);var k=b.prototype=g.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==Gr(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=L(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var c=f(t,n,r);if("normal"===c.type){if(o=r.done?m:p,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(o=m,r.method="throw",r.arg=c.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(Gr(t)+" is not iterable")}return y.prototype=b,o(k,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(x.prototype),c(x.prototype,l,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new x(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),c(k,u,"Generator"),c(k,i,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Jr(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Kr(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Jr(a,r,o,i,l,"next",e)}function l(e){Jr(a,r,o,i,l,"throw",e)}i(void 0)}))}}function qr(e){return new Blob([e],{type:arguments.length>1&&void 0!==arguments[1]?arguments[1]:"application/octet-stream"})}var $r=function(){var e=Kr(Wr().mark((function e(t,n){var r;return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!((r=jr.fromImageArray(t,n))instanceof Uint8Array)){e.next=4;break}return console.log("webm output is Uint8Array converting... not sure if this is correct"),e.abrupt("return",{blob:qr(r),previewImage:t[0]});case 4:return console.log("COMPILED VIDEO",r),e.t0=r,e.next=8,oo(t[0],50,41);case 8:return e.t1=e.sent,e.abrupt("return",{blob:e.t0,previewImage:e.t1});case 10:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),Qr="metadata_";function Yr(e){return Qr+e}function Xr(e){return"blob_"+e}var Zr=function(){var e=Kr(Wr().mark((function e(t){return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:Hr().saveAs(t,"timelapse.webm");case 1:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),eo=function(){var e=Kr(Wr().mark((function e(t,n,r,o){var a,i;return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a=Nr(),i={type:r,size:t.size,timestamp:Date.now(),previewImage:n,saveUuid:a},e.prev=2,console.log("SAVING",a,i),e.next=6,Ur().setItem(Yr(a),i);case 6:return e.next=8,Ur().setItem(Xr(a),t);case 8:e.next=13;break;case 10:e.prev=10,e.t0=e.catch(2),console.error(e.t0);case 13:return o(),e.abrupt("return",i);case 15:case"end":return e.stop()}}),e,null,[[2,10]])})));return function(t,n,r,o){return e.apply(this,arguments)}}(),to=function(){var e=Kr(Wr().mark((function e(t){return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ur().getItem(Xr(t));case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),no=function(){var e=Kr(Wr().mark((function e(t){return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Ur().removeItem(Yr(t));case 2:return e.next=4,Ur().removeItem(Xr(t));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),ro=function(){var e=Kr(Wr().mark((function e(){var t,n,r,o,a,i;return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=[],e.next=3,Ur().length();case 3:n=e.sent,r=0;case 5:if(!(r<n)){e.next=13;break}return e.next=8,Ur().key(r);case 8:(o=e.sent).startsWith(Qr)&&t.push(Ur().getItem(o));case 10:r++,e.next=5;break;case 13:return e.next=15,Promise.all(t);case 15:return a=e.sent,i=a.filter((function(e){return null!==e})),e.abrupt("return",i.sort((function(e,t){return t.timestamp-e.timestamp})));case 18:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();function oo(e,t,n){return ao.apply(this,arguments)}function ao(){return(ao=Kr(Wr().mark((function e(t,n,r){return Wr().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e,o){var a=new Image;a.onload=function(){var t=document.createElement("canvas"),o=t.getContext("2d");t.width=n,t.height=r,o.drawImage(a,0,0,n,r),e(t.toDataURL())},a.onerror=function(e){o(e)},a.src=t})));case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}var io=o(695),lo=o.n(io);function uo(t){return e.createElement("div",{style:{padding:"10px"}},e.createElement("div",null,e.createElement("b",null,"Mode:")," ",t.mode),e.createElement("div",null,e.createElement("b",null,"Frames Captured:")," ",t.framesCaptured),"FPS"===t.outputSpec?e.createElement("div",null,e.createElement("b",null,"Video Duration:")," ",lo()(t.framesCaptured/t.outputFPS*1e3,{round:!0})):e.createElement("div",null,e.createElement("b",null,"Video FPS:")," ",Math.round(t.framesCaptured/t.outputDuration*1e3)),e.createElement("div",null,e.createElement("b",null,"Elapsed Time:")," ",lo()(t.framesCaptured*t.timeLapseInterval,{round:!0})))}function co(e){return co="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},co(e)}function so(){so=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof g?t:g,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:N(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function g(){}function y(){}function b(){}var w={};c(w,i,(function(){return this}));var S=Object.getPrototypeOf,E=S&&S(S(P([])));E&&E!==n&&r.call(E,i)&&(w=E);var k=b.prototype=g.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==co(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=L(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var c=f(t,n,r);if("normal"===c.type){if(o=r.done?m:p,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(o=m,r.method="throw",r.arg=c.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(co(t)+" is not iterable")}return y.prototype=b,o(k,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(x.prototype),c(x.prototype,l,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new x(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),c(k,u,"Generator"),c(k,i,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function fo(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function po(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){fo(a,r,o,i,l,"next",e)}function l(e){fo(a,r,o,i,l,"throw",e)}i(void 0)}))}}function ho(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||mo(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function mo(e,t){if(e){if("string"==typeof e)return vo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?vo(e,t):void 0}}function vo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function go(t){var n=(0,e.useRef)(null),r=(0,e.useRef)(null),o=(0,e.useRef)(null),a=ho((0,e.useState)("Timelapse"),2),i=a[0],l=a[1],u=ho((0,e.useState)([]),2),c=u[0],s=u[1],f=ho((0,e.useState)(void 0),2),d=f[0],p=f[1],h=ho((0,e.useState)(!1),2),m=(h[0],h[1]),v=ho((0,e.useState)(1e3),2),g=v[0],y=v[1],b=ho((0,e.useState)("FPS"),2),w=b[0],S=b[1],E=ho((0,e.useState)(1e3),2),k=E[0],C=E[1],x=ho((0,e.useState)(30),2),N=x[0],L=x[1];(0,e.useEffect)((function(){var e=function(){var e=po(so().mark((function e(){return so().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:try{navigator.permissions.query({name:"camera"}).then((function(e){console.log("Set camera permission",e.state),p(e.state)})).catch((function(e){console.log("Got error :",e)})).finally((function(){P()}))}catch(e){p("denied")}case 1:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[]);var T=(0,e.useRef)(null),R=function(){navigator.mediaDevices.getUserMedia({video:!0}).then((function(e){n.current?(console.log("START VIDEO"),n.current.srcObject=e,p("granted")):console.error("No video ref!")})).catch((function(e){console.warn("Could not access webcam ",e),"Permission denied"===e.message?p("denied"):"Permission dismissed"===e.message?p("prompt"):p(void 0)})).finally((function(){return P()}))},_=function(){if(r.current&&n.current){var e=r.current.getContext("2d");if(e){e.drawImage(n.current,0,0,r.current.width,r.current.height);var t=r.current.toDataURL("image/webp");s((function(e){var n,r=[].concat(function(e){if(Array.isArray(e))return vo(e)}(n=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||mo(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[t]);return console.log("Capturing frame!",r.length),r}))}}},P=function(){n.current&&(console.log("VIDEO RESIZE - video",n.current.offsetWidth,n.current.width),n.current.style.height="".concat(n.current.offsetWidth/2.031,"px")),o.current&&(console.log("VIDEO RESIZE - div",o.current.offsetWidth),o.current.style.height="".concat(o.current.offsetWidth/2.031,"px"))},A=function(){p(void 0),R()};(0,e.useEffect)((function(){return function(){clearInterval(T.current)}}),[]),(0,e.useEffect)((function(){P();var e=function(){P()};return window.addEventListener("resize",e),function(){window.removeEventListener("resize",e)}}),[]);var I=(0,e.useMemo)((function(){switch(console.log("Computing overlay for",d),d){case"prompt":return e.createElement("div",{ref:o,style:{backgroundColor:"orange"},className:"video-placeholder"},e.createElement("div",{style:{display:"flex",flexDirection:"column",alignItems:"center"}},e.createElement("div",{style:{marginBottom:"5px"}},"This app requires access to your camera to function."),e.createElement(mn,{onClick:A},"Grant Camera Permission")));case"granted":return void R();case"denied":return e.createElement("div",{ref:o,style:{backgroundColor:"grey"},className:"video-placeholder"},"Camera permissions have been denied, however this app requires camera permission to function!");case void 0:return e.createElement("div",{ref:o,style:{backgroundColor:"LightGray"},className:"video-placeholder"},e.createElement(hn,{size:64}))}}),[d]);return e.createElement("div",{className:"Main"},e.createElement("div",null,I,e.createElement("video",{ref:n,autoPlay:!0,muted:!0,playsInline:!0,style:{display:"granted"===d?"inline":"none",width:"100%",padding:"3px",backgroundColor:"black"}})),e.createElement("canvas",{ref:r,style:{display:"none"},width:"640",height:"480"}),e.createElement(cn,{fill:!0,large:!0,onChange:function(e){l(e)},selectedTabId:i},e.createElement(It,{className:"no-highlight minimal-top-margin",id:"Timelapse",title:e.createElement("div",{className:"spacer"},"Timelapse"),panel:"Recording"===t.recordingStatus||"Paused"===t.recordingStatus?e.createElement(uo,{mode:i,framesCaptured:c.length,outputFPS:N,outputSpec:w,outputDuration:g,timeLapseInterval:k}):e.createElement(vr,{timeLapseInterval:k,outputFPS:N,outputDuration:g,outputSpec:w,setTimeLapseInterval:C,setOutputFPS:L,setOutputDuration:y,setOutputSpec:S}),icon:e.createElement(nr,null)}),e.createElement(It,{className:"no-highlight minimal-top-margin",id:"StopMotion",title:e.createElement("div",{className:"spacer"},"Stop Motion"),panel:e.createElement("div",null,"STOP MOTION - NOT IMPLEMENTED"),icon:e.createElement(rr,null)}),e.createElement(It,{className:"no-highlight minimal-top-margin",id:"Astronomical",title:e.createElement("div",{className:"spacer"},"Astronomical"),panel:e.createElement("div",null,"ASTRONOMICAL - NOT IMPLEMENTED"),icon:e.createElement(or,null)})),"granted"===d?e.createElement(wr,{onStart:function(){"Stopped"!==t.recordingStatus&&"Paused"!==t.recordingStatus||(t.setRecordingStatus("Recording"),_(),T.current=setInterval(_,k),console.log("Start recording!!",T.current))},onStop:function(){t.recordingStatus&&(console.log("Stop recording!!",T.current),m(!0),T.current&&(clearInterval(T.current),T.current=null),t.setRecordingStatus("Stopped"),setTimeout(po(so().mark((function e(){var n,r;return so().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("Number of frames before compiling:",c.length),n="FPS"===w?N:c.length/g*1e3,e.next=4,$r(c,n);case 4:return r=e.sent,e.next=7,eo(r.blob,r.previewImage,i,t.reloadSavedVideos);case 7:t.setVideoToShow(r.blob),s([]),m(!1);case 10:case"end":return e.stop()}}),e)}))),k+100))},onPause:function(){"Recording"===t.recordingStatus&&(T.current&&(clearInterval(T.current),T.current=null),t.setRecordingStatus("Paused"))},recordingStatus:t.recordingStatus}):null,e.createElement("div",{id:"timelapsePlaybackContainer"}),e.createElement("div",{id:"downloadLink"}))}var yo=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"play",ref:r},t),e.createElement("path",{d:o?"M320 200C320 207.2 316 213.4 310.2 216.8L310.4 217L110.4 337L110.2 336.8C107.2 338.6 103.8 340 100 340C89 340 80 331 80 320V80C80 69 89 60 100 60C103.8 60 107.2 61.4 110.2 63.2L110.4 63L310.4 183L310.2 183.2C316 186.6 320 192.8 320 200z":"M240 160C240 167 236.2 172.8 230.8 176.4L231 176.8L111 256.8L110.8 256.4C107.8 258.4 104.2 260 100 260C89 260 80 251 80 240V80C80 69 89 60 100 60C104.2 60 107.8 61.6 110.8 63.6L111 63.2L231 143.2L230.8 143.6C236.2 147.2 240 153 240 160z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));yo.defaultProps={size:Dt.J.STANDARD},yo.displayName="Blueprint5.Icon.Play";var bo=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"download",ref:r},t),e.createElement("path",{d:o?"M200 400C89.6 400 0 310.4 0 200C0 89.6 89.6 0 200 0S400 89.6 400 200C400 310.4 310.4 400 200 400zM294.2000000000001 165.8L214.2 85.8C210.6 82.2 205.6 80 200 80S189.4 82.2 185.8 85.8L105.8 165.8C102.2 169.4 100 174.4 100 180C100 191 109 200 120 200C125.6 200 130.6 197.8 134.2 194.2L180 148.2V300C180 311 189 320 200 320S220 311 220 300V148.2L265.8 194C269.4000000000001 197.8 274.4000000000001 200 280 200C291 200 300 191 300 180C300 174.4 297.8 169.4 294.2000000000001 165.8z":"M159.8 320.2C71.4 320.2 -0.2 248.6 -0.2 160.2S71.4 0.2 159.8 0.2S319.8 71.8 319.8 160.2S248.2 320.2 159.8 320.2zM234 126L174 66C170.4 62.4 165.4 60.2000000000001 159.8 60.2000000000001S149.2 62.4 145.6 66L85.6 126C82 129.6 79.8 134.6 79.8 140.2C79.8 151.2 88.8 160.2 99.8 160.2C105.4 160.2 110.4 158 114 154.4L139.8 128.6V240.2C139.8 251.2 148.8 260.2 159.8 260.2S179.8 251.2 179.8 240.2V128.4L205.6 154.2C209.2 157.8 214.2 160 219.8000000000001 160C230.8000000000001 160 239.8000000000001 151 239.8000000000001 140C239.8 134.6 237.6 129.6 234 126z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));bo.defaultProps={size:Dt.J.STANDARD},bo.displayName="Blueprint5.Icon.Download";var wo=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"trash",ref:r},t),e.createElement("path",{d:o?"M340 380H240C240 391 231 400 220 400H180C169 400 160 391 160 380H60C49 380 40 371 40 360V340H360V360C360 371 351 380 340 380zM350 320H50C44.4 320 40 315.6 40 310C40 304.4 44.4 300 50 300H60V20C60 9 69 0 80 0H320C331 0 340 9 340 20V300H350C355.6 300 360 304.4 360 310C360 315.6 355.6 320 350 320zM140 80C140 69 131 60 120 60S100 69 100 80V240C100 251 109 260 120 260S140 251 140 240V80zM220 80C220 69 211 60 200 60S180 69 180 80V240C180 251 189 260 200 260S220 251 220 240V80zM300 80C300 69 291 60 280 60S260 69 260 80V240C260 251 269 260 280 260S300 251 300 240V80z":"M289.8 240.2H29.8C24.2 240.2 19.8 235.8 19.8 230.2S24.2 220.2 29.8 220.2H39.8V20.2C39.8 9.2 48.8 0.2 59.8 0.2H259.8C270.8 0.2 279.8 9.2 279.8 20.2V220.2H289.8C295.4 220.2 299.8 224.6 299.8 230.2S295.4 240.2 289.8 240.2zM119.8 60.2C119.8 49.2 110.8 40.2 99.8 40.2S79.8 49.2 79.8 60.2V180.2C79.8 191.2 88.8 200.2 99.8 200.2S119.8 191.2 119.8 180.2V60.2zM179.8 60.2C179.8 49.2 170.8 40.2 159.8 40.2S139.8 49.2 139.8 60.2V180.2C139.8 191.2 148.8 200.2 159.8 200.2S179.8 191.2 179.8 180.2V60.2zM239.8 60.2C239.8 49.2 230.8 40.2 219.8 40.2S199.8 49.2 199.8 60.2V180.2C199.8 191.2 208.8 200.2 219.8 200.2S239.8 191.2 239.8 180.2V60.2zM279.8 300.2H199.8C199.8 311.2 190.8 320.2 179.8 320.2H139.8C128.8 320.2 119.8 311.2 119.8 300.2H39.8C28.8 300.2 19.8 291.2 19.8 280.2V260.2H299.8V280.2C299.8 291.2 290.8 300.2 279.8 300.2z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));function So(e){return So="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},So(e)}function Eo(){Eo=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof g?t:g,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:N(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function g(){}function y(){}function b(){}var w={};c(w,i,(function(){return this}));var S=Object.getPrototypeOf,E=S&&S(S(P([])));E&&E!==n&&r.call(E,i)&&(w=E);var k=b.prototype=g.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==So(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=L(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var c=f(t,n,r);if("normal"===c.type){if(o=r.done?m:p,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(o=m,r.method="throw",r.arg=c.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(So(t)+" is not iterable")}return y.prototype=b,o(k,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(x.prototype),c(x.prototype,l,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new x(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),c(k,u,"Generator"),c(k,i,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function ko(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Co(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){ko(a,r,o,i,l,"next",e)}function l(e){ko(a,r,o,i,l,"throw",e)}i(void 0)}))}}function xo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function No(t){var n,r,o=(n=(0,e.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return xo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xo(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1],l=function(){var e=Co(Eo().mark((function e(n){return Eo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return console.log("DOWNLOAD",n.target),e.t0=Zr,e.next=4,to(t.saveUuid);case 4:e.t1=e.sent,(0,e.t0)(e.t1);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),u=function(){var e=Co(Eo().mark((function e(n){return Eo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i(!0),e.next=3,no(t.saveUuid);case 3:i(!1),t.reloadSavedVideos();case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),c=function(){var e=Co(Eo().mark((function e(){return Eo().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.t0=t,e.next=3,to(t.saveUuid);case 3:e.t1=e.sent,e.t0.setVideoToShow.call(e.t0,e.t1);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),s=new Date(t.timestamp).toLocaleDateString("en-US"),f=new Date(t.timestamp).toLocaleTimeString("en-US");return a?e.createElement("div",{style:{display:"flex",alignItems:"center",padding:"4px",margin:"6px",justifyContent:"space-between",backgroundColor:"lightgrey",borderRadius:"3px"}},e.createElement(hn,{size:16})):e.createElement("div",{style:{display:"flex",alignItems:"center",padding:"4px",margin:"6px",justifyContent:"space-between",backgroundColor:"lightgrey",borderRadius:"3px"}},e.createElement("div",{style:{marginLeft:"10px"}},function(t){switch(t){case"Timelapse":return e.createElement(nr,null);case"StopMotion":return e.createElement(rr,null);case"Astronomical":return e.createElement(or,null);default:return"default-icon"}}(t.type)),e.createElement("div",null,e.createElement("img",{id:"myImage",src:t.previewImage,alt:"Image from String"})),e.createElement("div",null,e.createElement("div",null,s),e.createElement("div",null,f)),e.createElement("div",null,function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=t?1e3:1024;if(Math.abs(e)<r)return e+" B";var o=t?["kB","MB","GB","TB","PB","EB","ZB","YB"]:["KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"],a=-1,i=Math.pow(10,n);do{e/=r,++a}while(Math.round(Math.abs(e)*i)/i>=r&&a<o.length-1);return e.toFixed(n)+" "+o[a]}(t.size)),e.createElement(mn,{large:!0,icon:e.createElement(yo,null),onClick:c}),e.createElement(mn,{large:!0,icon:e.createElement(bo,null),onClick:l}),e.createElement(mn,{large:!0,icon:e.createElement(wo,null),onClick:u}))}function Lo(t){if(void 0===t.savedVideos)return e.createElement("div",null,e.createElement(hn,{size:64}));if(0===t.savedVideos.length)return e.createElement("div",{style:{margin:"50px",textAlign:"center"}},"There are currently no saved videos.");var n=t.savedVideos.map((function(n){return e.createElement(No,{type:n.type,size:n.size,timestamp:n.timestamp,saveUuid:n.saveUuid,previewImage:n.previewImage,key:n.saveUuid,reloadSavedVideos:t.reloadSavedVideos,setVideoToShow:t.setVideoToShow})}));return e.createElement("div",null,e.createElement("div",{style:{marginLeft:"10px",marginRight:"10px",display:"flex",justifyContent:"space-between"}},e.createElement("div",null,"Type"),e.createElement("div",null,"Img"),e.createElement("div",null,"Date/Time"),e.createElement("div",null,"Size"),e.createElement("div",null,"Play"),e.createElement("div",null,"Download"),e.createElement("div",null,"Delete")),n)}wo.defaultProps={size:Dt.J.STANDARD},wo.displayName="Blueprint5.Icon.Trash";var To=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"camera",ref:r},t),e.createElement("path",{d:o?"M200 240C166.8 240 140 213.2 140 180S166.8 120 200 120S260 146.8 260 180S233.2 240 200 240zM380 320H308.2L274 354.2C270.6 357.8 265.6 360 260 360H140C134.4 360 129.4 357.8 125.8 354.2L91.8 320H20C9 320 0 311 0 300V100C0 89 9 80 20 80H102.2C127.4 55.2 162 40 200 40S272.6 55.2 297.8 80H380C391 80 400 89 400 100V300C400 311 391 320 380 320zM80 240H40V280H80V240zM200 80C144.8 80 100 124.8 100 180S144.8 280 200 280S300 235.2 300 180S255.2 80 200 80z":"M300 260H248.2L214 294.2C210.6 297.8 205.6 300 200 300H120C114.4 300 109.4 297.8 105.8 294.2L71.8 260H20C9 260 0 251 0 240V100C0 89 9 80 20 80H71.2C93.2 55.6 124.6 40 160 40S226.8 55.6 248.8 80H300C311 80 320 89 320 100V240C320 251 311 260 300 260zM60 200H20V220H60V200zM160 80C115.8 80 80 115.8 80 160C80 204.2 115.8 240 160 240S240 204.2 240 160C240 115.8 204.2 80 160 80zM160 200C138 200 120 182 120 160C120 138 138 120 160 120S200 138 200 160C200 182 182 200 160 200z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));To.defaultProps={size:Dt.J.STANDARD},To.displayName="Blueprint5.Icon.Camera";var Ro=e.forwardRef((function(t,r){var o=t.size>=Dt.J.LARGE,a=o?Dt.J.LARGE:Dt.J.STANDARD,i="".concat(-1*a/.05/2);return e.createElement($t,(0,n.pi)({iconName:"folder-open",ref:r},t),e.createElement("path",{d:o?"M400 220C400 231 391 240 380 240H100C91.4 240 84.2 234.6 81.4 227L81.2 227L21.2 67L21.4 67C20.6 64.8 20 62.4 20 60C20 49 29 40 40 40H320C328.6 40 335.8 45.4 338.6 53L338.8 53L398.8 213L398.6 213C399.4 215.2 400 217.6 400 220zM61.4 247.4C64.4 254.8 71.6 260 80 260H360V300C360 311 351 320 340 320H168.2L134.2 354.2C130.6 357.8 125.6 360 120 360H20C9 360 0 351 0 340V93.8L61.4 247.4L61.4 247.4z":"M41.2 186.2C44 194.2 51.2 200 60 200H280V220C280 231 271 240 260 240H128.2L94.2 274.2C90.6 277.8 85.6 280 80 280H20C9 280 0 271 0 260V63.2L41 186.2L41.2 186.2zM320 160C320 171 311 180 300 180H80C71.2 180 63.8 174.2 61.2 166.2L61.2 166.2L21.2 46.2L21.2 46.2C20.4 44.4 20 42.2 20 40C20 29 29 20 40 20H260C268.8 20 276.2 25.8 278.8 33.8L278.8 33.8L318.8 153.8L318.8 153.8C319.6 155.6 320 157.8 320 160z",fillRule:"evenodd","transform-origin":"center",transform:"scale(0.05, -0.05) translate(".concat(i,", ").concat(i,")")}))}));function _o(e){return _o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_o(e)}function Po(){Po=function(){return t};var e,t={},n=Object.prototype,r=n.hasOwnProperty,o=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},i=a.iterator||"@@iterator",l=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function s(e,t,n,r){var a=t&&t.prototype instanceof g?t:g,i=Object.create(a.prototype),l=new _(r||[]);return o(i,"_invoke",{value:N(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=s;var d="suspendedStart",p="suspendedYield",h="executing",m="completed",v={};function g(){}function y(){}function b(){}var w={};c(w,i,(function(){return this}));var S=Object.getPrototypeOf,E=S&&S(S(P([])));E&&E!==n&&r.call(E,i)&&(w=E);var k=b.prototype=g.prototype=Object.create(w);function C(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(o,a,i,l){var u=f(e[o],e,a);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==_o(s)&&r.call(s,"__await")?t.resolve(s.__await).then((function(e){n("next",e,i,l)}),(function(e){n("throw",e,i,l)})):t.resolve(s).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,l)}))}l(u.arg)}var a;o(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function N(t,n,r){var o=d;return function(a,i){if(o===h)throw new Error("Generator is already running");if(o===m){if("throw"===a)throw i;return{value:e,done:!0}}for(r.method=a,r.arg=i;;){var l=r.delegate;if(l){var u=L(l,r);if(u){if(u===v)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(o===d)throw o=m,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);o=h;var c=f(t,n,r);if("normal"===c.type){if(o=r.done?m:p,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(o=m,r.method="throw",r.arg=c.arg)}}}function L(t,n){var r=n.method,o=t.iterator[r];if(o===e)return n.delegate=null,"throw"===r&&t.iterator.return&&(n.method="return",n.arg=e,L(t,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),v;var a=f(o,t.iterator,n.arg);if("throw"===a.type)return n.method="throw",n.arg=a.arg,n.delegate=null,v;var i=a.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function T(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function R(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(T,this),this.reset(!0)}function P(t){if(t||""===t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function n(){for(;++o<t.length;)if(r.call(t,o))return n.value=t[o],n.done=!1,n;return n.value=e,n.done=!0,n};return a.next=a}}throw new TypeError(_o(t)+" is not iterable")}return y.prototype=b,o(k,"constructor",{value:b,configurable:!0}),o(b,"constructor",{value:y,configurable:!0}),y.displayName=c(b,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===y||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,c(e,u,"GeneratorFunction")),e.prototype=Object.create(k),e},t.awrap=function(e){return{__await:e}},C(x.prototype),c(x.prototype,l,(function(){return this})),t.AsyncIterator=x,t.async=function(e,n,r,o,a){void 0===a&&(a=Promise);var i=new x(s(e,n,r,o),a);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},C(k),c(k,u,"Generator"),c(k,i,(function(){return this})),c(k,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=P,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(R),!t)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function o(r,o){return l.type="throw",l.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],l=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,v):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),R(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;R(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}},t}function Ao(e,t,n,r,o,a,i){try{var l=e[a](i),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function Io(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Do(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Do(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Do(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Oo(t){var n,r,o,a=Io((0,e.useState)("camera"),2),i=a[0],l=a[1],u=Io((0,e.useState)(void 0),2),c=u[0],s=u[1],f=Io((0,e.useState)(void 0),2),d=f[0],p=f[1],h=function(){var e,t=(e=Po().mark((function e(){var t;return Po().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,ro();case 2:return t=e.sent,s(t),e.abrupt("return",t);case 5:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){Ao(a,r,o,i,l,"next",e)}function l(e){Ao(a,r,o,i,l,"throw",e)}i(void 0)}))});return function(){return t.apply(this,arguments)}}();return(0,e.useMemo)(h,[]),e.createElement(e.Fragment,null,e.createElement(cn,{fill:!0,large:!0,onChange:function(e){l(e)},selectedTabId:i},e.createElement(It,{className:"no-highlight minimal-top-margin",id:"camera",title:e.createElement("div",{className:"spacer"},"Camera"),panel:e.createElement(go,{recordingStatus:t.recordingStatus,setRecordingStatus:t.setRecordingStatus,reloadSavedVideos:h,setVideoToShow:p}),icon:e.createElement(To,null)}),e.createElement(It,{className:"no-highlight minimal-top-margin",id:"recordings",title:e.createElement("div",{className:"spacer"},"Recordings"),panel:e.createElement(Lo,{savedVideos:c,reloadSavedVideos:h,setVideoToShow:p}),icon:e.createElement(Ro,null),tagContent:void 0===c?void 0:c.length})),void 0!==d?e.createElement(tr,{title:"Saved Video",isOpen:!0,isCloseButtonShown:!0,onClose:function(){p(void 0)},style:{width:"90vw"},icon:e.createElement(Ro,null)},(n=d,r={maxHeight:"82vh",backgroundColor:"black"},o=URL.createObjectURL(n),e.createElement("video",{src:o,style:r,controls:!0,autoPlay:!0}))):null)}function zo(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}Ro.defaultProps={size:Dt.J.STANDARD},Ro.displayName="Blueprint5.Icon.FolderOpen";var Fo=function(){var t,n,r,o=(n=(0,e.useState)("Stopped"),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],u=!0,c=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{if(!u&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(c)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return zo(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?zo(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[0],i=o[1];switch(a){case"Stopped":default:t="white";break;case"Recording":t="#ff6947";break;case"Paused":t="#fffa7e"}return e.createElement("div",{className:"wrapper",style:{backgroundColor:t}},e.createElement("div",{className:"main-margin"},e.createElement(Oo,{recordingStatus:a,setRecordingStatus:i})))},Mo=document.getElementById("app");t.createRoot(Mo).render(e.createElement(Fo,null))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,